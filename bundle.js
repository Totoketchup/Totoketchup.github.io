/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={9713:e=>{e.exports=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}},5354:e=>{e.exports=function(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}},4738:(e,t,n)=>{"use strict";n.d(t,{SG:()=>m,If:()=>h});var r=n(4686),o=n(658),a=n(7294),i="chakra-ui-light",l="chakra-ui-dark",s={classList:{add:o.ZT,remove:o.ZT}};var u="(prefers-color-scheme: dark)";var c="undefined"!=typeof Storage,f="chakra-ui-color-mode",d={get(e){if(!c)return e;var t=window.localStorage.getItem(f);return null!=t?t:e},set(e){c&&window.localStorage.setItem(f,e)},type:"localStorage"},p=a.createContext({});r.__DEV__&&(p.displayName="ColorModeContext");var h=()=>{var e=a.useContext(p);if(void 0===e)throw new Error("useColorMode must be used within a ColorModeProvider");return e};function m(e){var{value:t,children:n,options:{useSystemColorMode:c,initialColorMode:f},colorModeManager:h=d}=e,[m,v]=a.useState("cookie"===h.type?h.get(f):f);a.useEffect((()=>{if(r.isBrowser&&"localStorage"===h.type){var e=c?(t=f,(null!=(n=function(e){var t=null==window.matchMedia?void 0:window.matchMedia("(prefers-color-scheme: dark)");if(t)return!!t.media===t.matches}())?n:"dark"===t)?"dark":"light"):document.documentElement.style.getPropertyValue("--chakra-ui-color-mode")||h.get();e&&v(e)}var t,n}),[h,c,f]),a.useEffect((()=>{var e,t="dark"===m;(function(e){var t=r.isBrowser?document.body:s;t.classList.add(e?l:i),t.classList.remove(e?i:l)})(t),e=t?"dark":"light",r.isBrowser&&document.documentElement.style.setProperty("--chakra-ui-color-mode",e)}),[m]);var g=a.useCallback((e=>{h.set(e),v(e)}),[h]),y=a.useCallback((()=>{g("light"===m?"dark":"light")}),[m,g]);a.useEffect((()=>{var e;return c&&(e=function(e){if(!("matchMedia"in window))return o.ZT;var t=window.matchMedia(u),n=()=>{e(t.matches?"dark":"light")};return n(),t.addListener(n),()=>{t.removeListener(n)}}(g)),()=>{e&&c&&e()}}),[g,c]);var b={colorMode:null!=t?t:m,toggleColorMode:t?o.ZT:y,setColorMode:t?o.ZT:g};return a.createElement(p.Provider,{value:b},n)}r.__DEV__&&(m.displayName="ColorModeProvider"),r.__DEV__,r.__DEV__},2270:(e,t,n)=>{"use strict";n.d(t,{SG:()=>r.SG,If:()=>r.If});var r=n(4738)},2300:(e,t,n)=>{"use strict";n(1180);var r=n(4686);n(7294);r.__DEV__},4442:(e,t,n)=>{"use strict";n(2300);var r=n(1180);n.o(r,"useColorMode")&&n.d(t,{useColorMode:function(){return r.useColorMode}});var o=n(886);n.o(o,"useColorMode")&&n.d(t,{useColorMode:function(){return o.useColorMode}})},7310:(e,t,n)=>{"use strict";n.d(t,{Oq:()=>a,xj:()=>i,Cg:()=>s,Mr:()=>u,$_:()=>f,gT:()=>d,GQ:()=>h,Zo:()=>m,eC:()=>g,w8:()=>y,bK:()=>k,iA:()=>S,pb:()=>$,uU:()=>G,o_:()=>E,Rn:()=>_,Kl:()=>W,nO:()=>H,FK:()=>T,Gt:()=>M,AF:()=>L,ZM:()=>D,Dh:()=>B,ch:()=>F,vs:()=>Z,NV:()=>J,eR:()=>Q,Z2:()=>X,cp:()=>I,gQ:()=>V});var r=n(4547),o={bg:{property:"background",scale:"colors"},bgColor:{property:"backgroundColor",scale:"colors"},background:{property:"background",scale:"colors"},backgroundColor:{property:"backgroundColor",scale:"colors"},backgroundImage:!0,backgroundSize:!0,backgroundPosition:!0,backgroundRepeat:!0,backgroundAttachment:!0,backgroundBlendMode:!0,bgImage:{property:"backgroundImage"},bgImg:{property:"backgroundImage"},bgBlendMode:{property:"backgroundBlendMode"},bgSize:{property:"backgroundSize"},bgPosition:{property:"backgroundPosition"},bgPos:{property:"backgroundPosition"},bgRepeat:{property:"backgroundRepeat"},bgAttachment:{property:"backgroundAttachment"}},a=(0,r.By)(o),i=(0,r.jo)(o),l={border:{property:"border",scale:"borders"},borderWidth:{property:"borderWidth",scale:"borderWidths"},borderStyle:{property:"borderStyle",scale:"borderStyles"},borderColor:{property:"borderColor",scale:"colors"},borderRadius:{property:"borderRadius",scale:"radii"},rounded:{property:"borderRadius",scale:"radii"},borderTop:{property:"borderTop",scale:"borders"},borderTopLeftRadius:{property:"borderTopLeftRadius",scale:"radii"},roundedTopLeft:{property:"borderTopLeftRadius",scale:"radii"},borderTopRightRadius:{property:"borderTopRightRadius",scale:"radii"},roundedTopRight:{property:"borderTopRightRadius",scale:"radii"},borderRight:{property:"borderRight",scale:"borders"},borderBottom:{property:"borderBottom",scale:"borders"},borderBottomLeftRadius:{property:"borderBottomLeftRadius",scale:"radii"},roundedBottomLeft:{property:"borderBottomLeftRadius",scale:"radii"},borderBottomRightRadius:{property:"borderBottomRightRadius",scale:"radii"},roundedBottomRight:{property:"borderBottomRightRadius",scale:"radii"},borderLeft:{property:"borderLeft",scale:"borders"},borderX:{properties:["borderLeft","borderRight"],scale:"borders"},borderY:{properties:["borderTop","borderBottom"],scale:"borders"},borderTopWidth:{property:"borderTopWidth",scale:"borderWidths"},borderTopColor:{property:"borderTopColor",scale:"colors"},borderTopStyle:{property:"borderTopStyle",scale:"borderStyles"},borderBottomWidth:{property:"borderBottomWidth",scale:"borderWidths"},borderBottomColor:{property:"borderBottomColor",scale:"colors"},borderBottomStyle:{property:"borderBottomStyle",scale:"borderStyles"},borderLeftWidth:{property:"borderLeftWidth",scale:"borderWidths"},borderLeftColor:{property:"borderLeftColor",scale:"colors"},borderLeftStyle:{property:"borderLeftStyle",scale:"borderStyles"},borderRightWidth:{property:"borderRightWidth",scale:"borderWidths"},borderRightColor:{property:"borderRightColor",scale:"colors"},borderRightStyle:{property:"borderRightStyle",scale:"borderStyles"},borderTopRadius:{properties:["borderTopLeftRadius","borderTopRightRadius"],scale:"radii"},roundedTop:{properties:["borderTopLeftRadius","borderTopRightRadius"],scale:"radii"},borderBottomRadius:{properties:["borderBottomLeftRadius","borderBottomRightRadius"],scale:"radii"},roundedBottom:{properties:["borderBottomLeftRadius","borderBottomRightRadius"],scale:"radii"},borderLeftRadius:{properties:["borderTopLeftRadius","borderBottomLeftRadius"],scale:"radii"},roundedLeft:{properties:["borderTopLeftRadius","borderBottomLeftRadius"],scale:"radii"},borderRightRadius:{properties:["borderTopRightRadius","borderBottomRightRadius"],scale:"radii"},roundedRight:{properties:["borderTopRightRadius","borderBottomRightRadius"],scale:"radii"}},s=(0,r.By)(l),u=(0,r.jo)(l),c={color:{property:"color",scale:"colors"},textColor:{property:"color",scale:"colors"},opacity:!0,fill:{property:"fill",scale:"colors"},stroke:{property:"stroke",scale:"colors"}},f=(0,r.By)(c),d=(0,r.jo)(c),p={alignItems:!0,alignContent:!0,justifyItems:!0,justifyContent:!0,flexWrap:!0,flexDirection:!0,flex:!0,flexGrow:!0,flexShrink:!0,flexBasis:{property:"flexBasis",scale:"sizes"},justifySelf:!0,alignSelf:!0,order:!0,flexDir:{property:"flexDirection"}},h=(0,r.By)(p),m=(0,r.jo)(p),v={gridGap:{property:"gridGap",scale:"space"},gridColumnGap:{property:"gridColumnGap",scale:"space"},gridRowGap:{property:"gridRowGap",scale:"space"},gridColumn:!0,gridRow:!0,gridAutoFlow:!0,gridAutoColumns:!0,gridColumnStart:!0,gridColumnEnd:!0,gridAutoRows:!0,gridTemplateColumns:!0,gridTemplateRows:!0,gridTemplateAreas:!0,gridArea:!0,placeItems:!0},g=(0,r.By)(v),y=(0,r.jo)(v),b=n(4686);function x(e,t){var n=!(0,b.isNumber)(e)||e>1?e:100*e+"%";return(0,b.memoizedGet)(t,e,n)}var w={width:{property:"width",scale:"sizes",transform:x},w:{property:"width",scale:"sizes",transform:x},height:{property:"height",scale:"sizes"},h:{property:"height",scale:"sizes"},boxSize:{properties:["width","height"],scale:"sizes"},minWidth:{property:"minWidth",scale:"sizes"},minW:{property:"minWidth",scale:"sizes"},minHeight:{property:"minHeight",scale:"sizes"},minH:{property:"minHeight",scale:"sizes"},maxWidth:{property:"maxWidth",scale:"sizes"},maxW:{property:"maxWidth",scale:"sizes"},maxHeight:{property:"maxHeight",scale:"sizes"},maxH:{property:"maxHeight",scale:"sizes"},d:{property:"display"},overflow:!0,overflowX:!0,overflowY:!0,display:!0,verticalAlign:!0,boxSizing:!0},k=(0,r.By)(w),S=(0,r.jo)(w),C={animation:!0,appearance:!0,visibility:!0,userSelect:!0,pointerEvents:!0,cursor:!0,resize:!0,objectFit:!0,objectPosition:!0,float:!0,willChange:!0},E=(0,r.By)(C),_=(0,r.jo)(C),A=n(4305),O=n.n(A);function P(e,t){if(!t||null==e)return e;var n,r=e.toString();if("-","-"===r.slice(0,0+"-".length)){var o=t[r.slice(1)];n=(0,b.isString)(o)?"-"+o:(0,b.isNumber)(o)?-1*o:e}else{var a;n=null!=(a=t[e])?a:e}var i=n||e;return O()(i)||Number.isNaN(Number(i))||(i=Number(i)),i}var R={position:!0,pos:{property:"position"},zIndex:{property:"zIndex",scale:"zIndices"},inset:{properties:["left","top","bottom","right"],scale:"space",transform:P},insetX:{properties:["left","right"],scale:"space",transform:P},insetY:{properties:["top","bottom"],scale:"space",transform:P},top:{property:"top",scale:"space",transform:P},right:{property:"right",scale:"space",transform:P},bottom:{property:"bottom",scale:"space",transform:P},left:{property:"left",scale:"space",transform:P}},T=(0,r.By)(R),M=(0,r.jo)(R),z={boxShadow:{property:"boxShadow",scale:"shadows"},textShadow:{property:"textShadow",scale:"shadows"},shadow:{property:"boxShadow",scale:"shadows"}},L=(0,r.By)(z),D=(0,r.jo)(z),j={margin:{property:"margin",transform:P,scale:"space"},m:{property:"margin",transform:P,scale:"space"},marginTop:{property:"marginTop",transform:P,scale:"space"},mt:{property:"marginTop",transform:P,scale:"space"},marginRight:{property:"marginRight",transform:P,scale:"space"},mr:{property:"marginRight",transform:P,scale:"space"},marginBottom:{property:"marginBottom",transform:P,scale:"space"},mb:{property:"marginBottom",transform:P,scale:"space"},marginLeft:{property:"marginLeft",transform:P,scale:"space"},ml:{property:"marginLeft",transform:P,scale:"space"},marginX:{properties:["marginLeft","marginRight"],transform:P,scale:"space"},mx:{properties:["marginLeft","marginRight"],transform:P,scale:"space"},marginY:{properties:["marginTop","marginBottom"],transform:P,scale:"space"},my:{properties:["marginTop","marginBottom"],transform:P,scale:"space"},padding:{property:"padding",scale:"space"},p:{property:"padding",scale:"space"},paddingTop:{property:"paddingTop",scale:"space"},pt:{property:"paddingTop",scale:"space"},paddingRight:{property:"paddingRight",scale:"space"},pr:{property:"paddingRight",scale:"space"},paddingBottom:{property:"paddingBottom",scale:"space"},pb:{property:"paddingBottom",scale:"space"},paddingLeft:{property:"paddingLeft",scale:"space"},pl:{property:"paddingLeft",scale:"space"},paddingX:{properties:["paddingLeft","paddingRight"],scale:"space"},px:{properties:["paddingLeft","paddingRight"],scale:"space"},paddingY:{properties:["paddingTop","paddingBottom"],scale:"space"},py:{properties:["paddingTop","paddingBottom"],scale:"space"}},B=(0,r.By)(j),F=(0,r.jo)(j),N={fontFamily:{property:"fontFamily",scale:"fonts"},fontSize:{property:"fontSize",scale:"fontSizes"},fontWeight:{property:"fontWeight",scale:"fontWeights"},lineHeight:{property:"lineHeight",scale:"lineHeights"},letterSpacing:{property:"letterSpacing",scale:"letterSpacings"},textAlign:!0,fontStyle:!0,wordBreak:!0,overflowWrap:!0,textOverflow:!0,textTransform:!0,whiteSpace:!0,textDecoration:!0,textDecor:{property:"textDecoration"}},I=(0,r.By)(N),V=(0,r.jo)(N),U={outline:!0,outlineOffset:!0,outlineColor:{property:"outlineColor",scale:"colors"}},W=(0,r.By)(U),H=(0,r.jo)(U),q={listStyleType:!0,listStylePosition:!0,listStylePos:{property:"listStylePosition"},listStyleImage:!0,listStyleImg:{property:"listStyleImage"}},$=(0,r.By)(q),G=(0,r.jo)(q),K={transition:!0,transitionDuration:{property:"transitionDuration",scale:"transition.duration"},transitionProperty:{property:"transitionProperty",scale:"transition.property"},transitionTimingFunction:{property:"transitionTimingFunction",scale:"transition.easing"}},Q=(0,r.By)(K),X=(0,r.jo)(K),Y={transform:!0,transformOrigin:!0},Z=(0,r.By)(Y),J=(0,r.jo)(Y)},7720:(e,t,n)=>{"use strict";n.d(t,{i:()=>c});var r=n(4686),o=n(658),a=n(4547),i=n(7310),l=(0,a.qC)(i.xj,i.Mr,i.gT,i.Zo,i.iA,i.nO,i.w8,i.Rn,i.Gt,i.ZM,i.ch,i.gQ,i.NV,i.Z2,i.uU),s=n(8270),u={themeBreakpoints:[],breakpoints:[],breakpointValues:[],mediaQueries:[]},c=function e(t){return void 0===t&&(t={}),function(n){void 0===n&&(n={});var a="theme"in n?n.theme:n,i={},c=(e=>t=>{var n={},{breakpoints:a,mediaQueries:i}=function(e){if(void 0===e&&(e=[]),u.themeBreakpoints===e)return u;var{breakpoints:t,breakpointValues:n}=Object.entries(e).filter((e=>{var[t]=e;return(0,r.isCustomBreakpoint)(t)})).reduce(((e,t)=>{var[n,r]=t;return e.breakpoints.push(n),e.breakpointValues.push(r),e}),{breakpoints:[],breakpointValues:[]}),o=[null,...n.map((e=>"@media screen and (min-width: "+e+")")).slice(1)];return u.themeBreakpoints=e,u.mediaQueries=o,u.breakpointValues=n,u.breakpoints=t,{breakpoints:t,mediaQueries:o}}(t.breakpoints);for(var l in e){var s=(0,o.Pu)(e[l],t);if(null!=s)if(s=(0,r.isResponsiveObjectLike)(s,a)?(0,r.objectToArrayNotation)(s,a):s,(0,r.isArray)(s))for(var c=s.slice(0,i.length).length,f=0;f<c;f+=1){var d=i[f];d?(n[d]=n[d]||{},null!=s[f]&&(n[d][l]=s[f])):n[l]=s[f]}else n[l]=s}return n})((0,o.Pu)(t,a))(a);for(var f in c){var d,p=c[f],h=(0,o.Pu)(p,a),m=f in s.vP?s.vP[f]:f,v=l.config[m];if("apply"!==m)if((0,r.isObject)(h))i[m]=e(h)(a);else{var g=(0,r.memoizedGet)(a,null==v?void 0:v.scale,{}),y=null!=(d=null==v||null==v.transform?void 0:v.transform(h,g))?d:(0,r.memoizedGet)(g,h,h);if(null==v?void 0:v.properties)for(var b of v.properties)i[b]=y;else(null==v?void 0:v.property)?i[v.property]=y:i[m]=y}else{var x=e((0,r.memoizedGet)(a,h))(a);i=(0,r.mergeWith)({},i,x)}}return i}}},3063:()=>{},9421:(e,t,n)=>{"use strict";n.d(t,{css:()=>o.i,propNames:()=>l.cC}),n(7310),n(4547);var r=n(8270);n.o(r,"GlobalStyle")&&n.d(t,{GlobalStyle:function(){return r.GlobalStyle}}),n.o(r,"StylesProvider")&&n.d(t,{StylesProvider:function(){return r.StylesProvider}}),n.o(r,"ThemeProvider")&&n.d(t,{ThemeProvider:function(){return r.ThemeProvider}}),n.o(r,"chakra")&&n.d(t,{chakra:function(){return r.chakra}}),n.o(r,"css")&&n.d(t,{css:function(){return r.css}}),n.o(r,"forwardRef")&&n.d(t,{forwardRef:function(){return r.forwardRef}}),n.o(r,"propNames")&&n.d(t,{propNames:function(){return r.propNames}}),n.o(r,"useMultiStyleConfig")&&n.d(t,{useMultiStyleConfig:function(){return r.useMultiStyleConfig}}),n.o(r,"useStyleConfig")&&n.d(t,{useStyleConfig:function(){return r.useStyleConfig}}),n.o(r,"useStyles")&&n.d(t,{useStyles:function(){return r.useStyles}});var o=n(7720),a=n(3063);n.o(a,"GlobalStyle")&&n.d(t,{GlobalStyle:function(){return a.GlobalStyle}}),n.o(a,"StylesProvider")&&n.d(t,{StylesProvider:function(){return a.StylesProvider}}),n.o(a,"ThemeProvider")&&n.d(t,{ThemeProvider:function(){return a.ThemeProvider}}),n.o(a,"chakra")&&n.d(t,{chakra:function(){return a.chakra}}),n.o(a,"forwardRef")&&n.d(t,{forwardRef:function(){return a.forwardRef}}),n.o(a,"propNames")&&n.d(t,{propNames:function(){return a.propNames}}),n.o(a,"useMultiStyleConfig")&&n.d(t,{useMultiStyleConfig:function(){return a.useMultiStyleConfig}}),n.o(a,"useStyleConfig")&&n.d(t,{useStyleConfig:function(){return a.useStyleConfig}}),n.o(a,"useStyles")&&n.d(t,{useStyles:function(){return a.useStyles}});var i=n(8351);n.o(i,"GlobalStyle")&&n.d(t,{GlobalStyle:function(){return i.GlobalStyle}}),n.o(i,"StylesProvider")&&n.d(t,{StylesProvider:function(){return i.StylesProvider}}),n.o(i,"ThemeProvider")&&n.d(t,{ThemeProvider:function(){return i.ThemeProvider}}),n.o(i,"chakra")&&n.d(t,{chakra:function(){return i.chakra}}),n.o(i,"forwardRef")&&n.d(t,{forwardRef:function(){return i.forwardRef}}),n.o(i,"propNames")&&n.d(t,{propNames:function(){return i.propNames}}),n.o(i,"useMultiStyleConfig")&&n.d(t,{useMultiStyleConfig:function(){return i.useMultiStyleConfig}}),n.o(i,"useStyleConfig")&&n.d(t,{useStyleConfig:function(){return i.useStyleConfig}}),n.o(i,"useStyles")&&n.d(t,{useStyles:function(){return i.useStyles}});var l=n(5503)},8351:()=>{},8270:(e,t,n)=>{"use strict";n.d(t,{_F:()=>r._,vP:()=>r.v}),n(7213);var r=n(7579),o=n(6660);n.o(o,"GlobalStyle")&&n.d(t,{GlobalStyle:function(){return o.GlobalStyle}}),n.o(o,"StylesProvider")&&n.d(t,{StylesProvider:function(){return o.StylesProvider}}),n.o(o,"ThemeProvider")&&n.d(t,{ThemeProvider:function(){return o.ThemeProvider}}),n.o(o,"chakra")&&n.d(t,{chakra:function(){return o.chakra}}),n.o(o,"css")&&n.d(t,{css:function(){return o.css}}),n.o(o,"forwardRef")&&n.d(t,{forwardRef:function(){return o.forwardRef}}),n.o(o,"propNames")&&n.d(t,{propNames:function(){return o.propNames}}),n.o(o,"useMultiStyleConfig")&&n.d(t,{useMultiStyleConfig:function(){return o.useMultiStyleConfig}}),n.o(o,"useStyleConfig")&&n.d(t,{useStyleConfig:function(){return o.useStyleConfig}}),n.o(o,"useStyles")&&n.d(t,{useStyles:function(){return o.useStyles}})},7579:(e,t,n)=>{"use strict";n.d(t,{v:()=>i,_:()=>l});var r=n(4686);function o(e){return a(e,"[role=group]","[data-group]")}function a(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return n.map(e).join(", ")}var i={_hover:"&:hover, &[data-hover]",_active:"&:active, &[data-active]",_focus:"&:focus, &[data-focus]",_highlighted:"&[data-highlighted]",_focusWithin:"&:focus-within",_focusVisible:"&:focus-visible",_disabled:a((e=>e+", "+e+":focus, "+e+":hover"),"&[disabled]","&[aria-disabled=true]","&[data-disabled]"),_readOnly:"&[aria-readonly=true], &[readonly], &[data-readonly]",_before:"&::before",_after:"&::after",_empty:"&:empty",_expanded:"&[aria-expanded=true], &[data-expanded]",_checked:"&[aria-checked=true], &[data-checked]",_grabbed:"&[aria-grabbed=true], &[data-grabbed]",_pressed:"&[aria-pressed=true], &[data-pressed]",_invalid:"&[aria-invalid=true], &[data-invalid]",_valid:"&[data-valid], &[data-state=valid]",_loading:"&[data-loading], &[aria-busy=true]",_selected:"&[aria-selected=true], &[data-selected]",_hidden:"&[hidden], &[data-hidden]",_autofill:"&:-webkit-autofill",_even:"&:nth-of-type(even)",_odd:"&:nth-of-type(odd)",_first:"&:first-of-type",_last:"&:last-of-type",_notFirst:"&:not(:first-of-type)",_notLast:"&:not(:last-of-type)",_visited:"&:visited",_activeLink:"&[aria-current=page]",_indeterminate:"&:indeterminate, &[aria-checked=mixed], &[data-indeterminate]",_groupHover:o((e=>e+":hover &, "+e+"[data-hover] &")),_groupFocus:o((e=>e+":focus &, "+e+"[data-focus] &")),_groupActive:o((e=>e+":active &, "+e+"[data-active] &")),_groupDisabled:o((e=>e+":disabled &, "+e+"[data-disabled] &")),_groupInvalid:o((e=>e+":invalid &, "+e+"[data-invalid] &")),_groupChecked:o((e=>e+":checked &, "+e+"[data-checked] &")),_placeholder:"&::placeholder",_fullScreen:"&:fullscreen",_selection:"&::selection"},l=(0,r.objectKeys)(i)},6660:()=>{},7213:(e,t,n)=>{"use strict";n(7579)},5503:(e,t,n)=>{"use strict";n.d(t,{cC:()=>l});var r=n(4547),o=n(7310),a=n(8270),i=(0,r.qC)(o.Oq,o.Cg,o.$_,o.GQ,o.bK,o.Kl,o.eC,o.o_,o.FK,o.AF,o.Dh,o.cp,o.vs,o.pb,o.eR),l=((0,r.qC)(o.Dh,o.bK,o.GQ,o.eC,o.FK).propNames,[...i.propNames,...a._F])},63:(e,t,n)=>{"use strict";n.d(t,{G:()=>o});var r=n(7294);function o(e){return r.forwardRef(e)}},1180:(e,t,n)=>{"use strict";n.d(t,{ColorModeProvider:()=>r.SG,useColorMode:()=>r.If,GlobalStyle:()=>i.ZL,StylesProvider:()=>i.Fo,ThemeProvider:()=>i.f6,useStyles:()=>i.yK,chakra:()=>l.m$,forwardRef:()=>s.G,useMultiStyleConfig:()=>u.j,useStyleConfig:()=>u.m});var r=n(2270),o=n(9421);n.o(o,"GlobalStyle")&&n.d(t,{GlobalStyle:function(){return o.GlobalStyle}}),n.o(o,"StylesProvider")&&n.d(t,{StylesProvider:function(){return o.StylesProvider}}),n.o(o,"ThemeProvider")&&n.d(t,{ThemeProvider:function(){return o.ThemeProvider}}),n.o(o,"chakra")&&n.d(t,{chakra:function(){return o.chakra}}),n.o(o,"forwardRef")&&n.d(t,{forwardRef:function(){return o.forwardRef}}),n.o(o,"useMultiStyleConfig")&&n.d(t,{useMultiStyleConfig:function(){return o.useMultiStyleConfig}}),n.o(o,"useStyleConfig")&&n.d(t,{useStyleConfig:function(){return o.useStyleConfig}}),n.o(o,"useStyles")&&n.d(t,{useStyles:function(){return o.useStyles}}),n(6418);var a=n(5070);n.o(a,"GlobalStyle")&&n.d(t,{GlobalStyle:function(){return a.GlobalStyle}}),n.o(a,"StylesProvider")&&n.d(t,{StylesProvider:function(){return a.StylesProvider}}),n.o(a,"ThemeProvider")&&n.d(t,{ThemeProvider:function(){return a.ThemeProvider}}),n.o(a,"chakra")&&n.d(t,{chakra:function(){return a.chakra}}),n.o(a,"forwardRef")&&n.d(t,{forwardRef:function(){return a.forwardRef}}),n.o(a,"useMultiStyleConfig")&&n.d(t,{useMultiStyleConfig:function(){return a.useMultiStyleConfig}}),n.o(a,"useStyleConfig")&&n.d(t,{useStyleConfig:function(){return a.useStyleConfig}}),n.o(a,"useStyles")&&n.d(t,{useStyles:function(){return a.useStyles}});var i=n(9676),l=n(3065),s=n(63),u=n(2326)},9676:(e,t,n)=>{"use strict";n.d(t,{f6:()=>u,Fg:()=>c,Fo:()=>f,yK:()=>d,ZL:()=>p});var r=n(4738),o=n(9421),a=n(4686),i=n(658),l=n(6418),s=n(7294),u=e=>{var{children:t,theme:n}=e,r=s.useContext(l.Ni),o=(0,a.mergeWith)({},r,n);return s.createElement(l.Ni.Provider,{value:o},t)};function c(){var e=s.useContext(l.Ni);if(!e)throw Error("useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />`");return e}var[f,d]=(0,a.createContext)({name:"StylesContext",errorMessage:"useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` "}),p=()=>{var{colorMode:e}=(0,r.If)();return s.createElement(l.xB,{styles:t=>{var n=(0,a.memoizedGet)(t,"styles.global"),r=(0,i.Pu)(n,{theme:t,colorMode:e});if(r)return(0,o.css)(r)(t)}})}},3065:(e,t,n)=>{"use strict";n.d(t,{m$:()=>_});var r=n(9421),o=n(4686),a=n(9713),i=n.n(a),l=n(7294),s=n(3804),u=n(6418),c=n(8087),f=n(2015),d=s.Z,p=function(e){return"theme"!==e&&"innerRef"!==e},h=function(e){return"string"==typeof e&&e.charCodeAt(0)>96?d:p};function m(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function v(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?m(n,!0).forEach((function(t){i()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):m(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var g=function e(t,n){var r,o,a;void 0!==n&&(r=n.label,a=n.target,o=t.__emotion_forwardProp&&n.shouldForwardProp?function(e){return t.__emotion_forwardProp(e)&&n.shouldForwardProp(e)}:n.shouldForwardProp);var i=t.__emotion_real===t,s=i&&t.__emotion_base||t;"function"!=typeof o&&i&&(o=t.__emotion_forwardProp);var d=o||h(s),p=!d("as");return function(){var m=arguments,g=i&&void 0!==t.__emotion_styles?t.__emotion_styles.slice(0):[];if(void 0!==r&&g.push("label:"+r+";"),null==m[0]||void 0===m[0].raw)g.push.apply(g,m);else{g.push(m[0][0]);for(var y=m.length,b=1;b<y;b++)g.push(m[b],m[0][b])}var x=(0,u.Xn)((function(e,t,n){return(0,l.createElement)(u.Ni.Consumer,null,(function(r){var i=p&&e.as||s,u="",m=[],v=e;if(null==e.theme){for(var y in v={},e)v[y]=e[y];v.theme=r}"string"==typeof e.className?u=(0,c.f)(t.registered,m,e.className):null!=e.className&&(u=e.className+" ");var b=(0,f.O)(g.concat(m),t.registered,v);(0,c.M)(t,b,"string"==typeof i),u+=t.key+"-"+b.name,void 0!==a&&(u+=" "+a);var x=p&&void 0===o?h(i):d,w={};for(var k in e)p&&"as"===k||x(k)&&(w[k]=e[k]);return w.className=u,w.ref=n||e.innerRef,(0,l.createElement)(i,w)}))}));return x.displayName=void 0!==r?r:"Styled("+("string"==typeof s?s:s.displayName||s.name||"Component")+")",x.defaultProps=t.defaultProps,x.__emotion_real=x,x.__emotion_base=s,x.__emotion_styles=g,x.__emotion_forwardProp=o,Object.defineProperty(x,"toString",{value:function(){return"."+a}}),x.withComponent=function(t,r){return e(t,void 0!==r?v({},n||{},{},r):n).apply(void 0,g)},x}}.bind();["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"].forEach((function(e){g[e]=g(e)}));const y=g;var b=new Set([...r.propNames,"textStyle","layerStyle","apply","isTruncated","noOfLines","focusBorderColor","errorBorderColor","as","__css","css","sx"]),x=new Set(["htmlWidth","htmlHeight","htmlSize"]),w=e=>x.has(e)||!b.has(e),k=n(5284);function S(){return(S=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function C(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}var E=r.propNames.reduce(((e,t)=>("object"!=typeof t&&"function"!=typeof t&&(e[t]=t),e)),{}),_=function(e,t){var n=null!=t?t:{},{baseStyle:a}=n,i=S({},C(n,["baseStyle"]),{shouldForwardProp:w});return y(e,i)((e=>{var{baseStyle:t}=e;return e=>{var{theme:n,layerStyle:a,textStyle:i,apply:l,noOfLines:s,isTruncated:u,css:c,__css:f,sx:d}=e,p=C(e,["theme","layerStyle","textStyle","apply","noOfLines","isTruncated","css","__css","sx"]),h=(0,o.memoizedGet)(n,"layerStyles."+a,{}),m=(0,o.memoizedGet)(n,"textStyles."+i,{}),v=(0,o.objectFilter)(p,((e,t)=>t in E)),g={};null!=s?g={overflow:"hidden",textOverflow:"ellipsis",display:"-webkit-box",WebkitBoxOrient:"vertical",WebkitLineClamp:s}:u&&(g={overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"});var y=(0,o.objectAssign)({},f,t,{apply:l},h,m,g,v,d),b=(0,r.css)(y)(e.theme);return(0,o.objectAssign)(b,(0,o.isFunction)(c)?c(n):c)}})({baseStyle:a}))};k.t6.forEach((e=>{_[e]=_(e)}))},5070:()=>{},5284:(e,t,n)=>{"use strict";n.d(t,{t6:()=>o,Lr:()=>a});var r=n(4686),o=["a","b","article","aside","blockquote","button","caption","cite","circle","code","dd","div","dl","dt","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","header","hr","img","input","kbd","label","li","mark","nav","ol","p","path","pre","q","rect","s","svg","section","select","strong","small","span","sub","sup","table","tbody","td","textarea","tfoot","th","thead","tr","ul"];function a(e){return(0,r.omit)(e,["styleConfig","size","variant","colorScheme"])}},2326:(e,t,n)=>{"use strict";n.d(t,{j:()=>d,m:()=>f});var r=n(4686),o=n(658),a=n(7294),i=n(9590),l=n.n(i),s=n(4738),u=n(9676);function c(){return(c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function f(e,t,n){var i,{styleConfig:f}=t,d=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(t,["styleConfig"]),{theme:p,colorMode:h}=c({},(0,s.If)(),{theme:(0,u.Fg)()}),m=(0,r.memoizedGet)(p,"components."+e),v=f||m,g=(0,r.mergeWith)({theme:p,colorMode:h},null!=(i=null==v?void 0:v.defaultProps)?i:{},(0,r.filterUndefined)((0,r.omit)(d,["children"]))),y=(0,a.useRef)({});return(0,a.useMemo)((()=>{if(v){var e,t,a,i,s,u=(0,o.Pu)(null!=(e=v.baseStyle)?e:{},g),c=(0,o.Pu)(null!=(t=null==(a=v.variants)?void 0:a[g.variant])?t:{},g),f=(0,o.Pu)(null!=(i=null==(s=v.sizes)?void 0:s[g.size])?i:{},g),d=(0,r.mergeWith)({},u,f,c);(null==n?void 0:n.isMultiPart)&&v.parts&&v.parts.forEach((e=>{var t;d[e]=null!=(t=d[e])?t:{}})),l()(y.current,d)||(y.current=d)}return y.current}),[v,g,null==n?void 0:n.isMultiPart])}function d(e,t){return f(e,t,{isMultiPart:!0})}},886:(e,t,n)=>{"use strict";var r=n(7657);n.o(r,"useColorMode")&&n.d(t,{useColorMode:function(){return r.useColorMode}})},7657:()=>{},7277:(e,t,n)=>{"use strict";function r(e){var t=null==e?0:e.length;return t?e[t-1]:void 0}function o(e,t){return[...e,t]}function a(e,t){return e.filter((e=>e!==t))}function i(e,t,n,r){void 0===n&&(n=1),void 0===r&&(r=!0);var o=t-1;if(-1===e)return n>0?0:o;var a=e+n;return a<0?r?o:0:a>=t?r?0:e>t?t:e:a}function l(e,t,n){return void 0===n&&(n=!0),i(e,t,-1,n)}function s(e,t,n,r){if(null==t)return r;if(!r)return e.find((e=>n(e).toLowerCase().startsWith(t.toLowerCase())));var o,a=e.filter((e=>n(e).toLowerCase().startsWith(t.toLowerCase())));return a.length>0?a.includes(r)?((o=a.indexOf(r)+1)===a.length&&(o=0),a[o]):(o=e.indexOf(a[0]),e[o]):r}n.d(t,{s:()=>r,jX:()=>o,cl:()=>a,LK:()=>i,BO:()=>l,LP:()=>s,X4:()=>u});var u=e=>Number.isNaN(parseInt(e,10))},3808:(e,t,n)=>{"use strict";function r(e){return"number"==typeof e}function o(e){return Array.isArray(e)}function a(e){return"function"==typeof e}n.d(t,{hj:()=>r,kJ:()=>o,mf:()=>a,Kn:()=>i,Qr:()=>l,HD:()=>s,Ts:()=>u});var i=e=>{var t=typeof e;return null!=e&&("object"===t||"function"===t)&&!o(e)},l=e=>i(e)&&0===Object.keys(e).length;function s(e){return"[object String]"===Object.prototype.toString.call(e)}var u=!1},7658:(e,t,n)=>{"use strict";n.d(t,{dO:()=>r}),["input:not([disabled])","select:not([disabled])","textarea:not([disabled])","embed","iframe","object","a[href]","area[href]","button:not([disabled])","[tabindex]","audio[controls]","video[controls]","*[tabindex]:not([aria-disabled])","*[contenteditable]"].join();var r=e=>0!==e.button},4461:(e,t,n)=>{"use strict";var r;n.d(t,{jU:()=>a,uh:()=>i,PB:()=>l,cx:()=>s,vY:()=>u,r3:()=>c});try{r=window}catch(e){}var o=e=>{var t,n;return null!=(t=null==e||null==(n=e.ownerDocument)?void 0:n.defaultView)?t:r},a=function(){var e=o();return Boolean(void 0!==e&&e.document&&e.document.createElement)}();function i(e){var{key:t,keyCode:n}=e;return n>=37&&n<=40&&0!==t.indexOf("Arrow")?"Arrow"+t:t}var l=e=>e?"":void 0,s=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter(Boolean).join(" ")};function u(e){var t=(e=>(null==e?void 0:e.ownerDocument)||a?document:null)(e);return null==t?void 0:t.activeElement}function c(e,t){return e===t||e.contains(t)}},658:(e,t,n)=>{"use strict";n.d(t,{Pu:()=>o,v0:()=>a,ZT:()=>l,ZK:()=>s});var r=n(3808);function o(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),o=1;o<t;o++)n[o-1]=arguments[o];return(0,r.mf)(e)?e(...n):e}function a(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){t.some((t=>(null==t||t(e),null==e?void 0:e.defaultPrevented)))}}function i(e){var t;return function(){if(e){for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];t=e.apply(this,r),e=null}return t}}var l=()=>{},s=i((e=>{var{condition:t,message:n}=e;t&&r.Ts&&console.warn(n)}));i((e=>{var{condition:t,message:n}=e;t&&r.Ts&&console.error(n)}))},4686:(e,t,n)=>{"use strict";n.d(t,{contains:()=>o.r3,cx:()=>o.cx,dataAttr:()=>o.PB,getActiveElement:()=>o.vY,isBrowser:()=>o.jU,normalizeEventKey:()=>o.uh,addItem:()=>a.jX,getNextIndex:()=>a.LK,getNextItemFromSearch:()=>a.LP,getPrevIndex:()=>a.BO,isCustomBreakpoint:()=>a.X4,removeItem:()=>a.cl,filterUndefined:()=>i.YU,fromEntries:()=>i.sq,memoizedGet:()=>i.Wf,mergeWith:()=>i.bT,objectAssign:()=>i.wB,objectFilter:()=>i.lw,objectKeys:()=>i.Yd,omit:()=>i.CE,isRightClick:()=>l.dO,focus:()=>s.T_,isTabbable:()=>s.Wq,__DEV__:()=>u.Ts,isArray:()=>u.kJ,isEmptyObject:()=>u.Qr,isFunction:()=>u.mf,isNumber:()=>u.hj,isObject:()=>u.Kn,isString:()=>u.HD,createContext:()=>c.kr,getValidChildren:()=>c.WR,mergeRefs:()=>c.lq,isResponsiveObjectLike:()=>f.WN,objectToArrayNotation:()=>f.kQ});var r=n(5515);n.o(r,"__DEV__")&&n.d(t,{__DEV__:function(){return r.__DEV__}}),n.o(r,"addItem")&&n.d(t,{addItem:function(){return r.addItem}}),n.o(r,"contains")&&n.d(t,{contains:function(){return r.contains}}),n.o(r,"createContext")&&n.d(t,{createContext:function(){return r.createContext}}),n.o(r,"cx")&&n.d(t,{cx:function(){return r.cx}}),n.o(r,"dataAttr")&&n.d(t,{dataAttr:function(){return r.dataAttr}}),n.o(r,"filterUndefined")&&n.d(t,{filterUndefined:function(){return r.filterUndefined}}),n.o(r,"focus")&&n.d(t,{focus:function(){return r.focus}}),n.o(r,"fromEntries")&&n.d(t,{fromEntries:function(){return r.fromEntries}}),n.o(r,"getActiveElement")&&n.d(t,{getActiveElement:function(){return r.getActiveElement}}),n.o(r,"getNextIndex")&&n.d(t,{getNextIndex:function(){return r.getNextIndex}}),n.o(r,"getNextItemFromSearch")&&n.d(t,{getNextItemFromSearch:function(){return r.getNextItemFromSearch}}),n.o(r,"getPrevIndex")&&n.d(t,{getPrevIndex:function(){return r.getPrevIndex}}),n.o(r,"getValidChildren")&&n.d(t,{getValidChildren:function(){return r.getValidChildren}}),n.o(r,"isArray")&&n.d(t,{isArray:function(){return r.isArray}}),n.o(r,"isBrowser")&&n.d(t,{isBrowser:function(){return r.isBrowser}}),n.o(r,"isCustomBreakpoint")&&n.d(t,{isCustomBreakpoint:function(){return r.isCustomBreakpoint}}),n.o(r,"isEmptyObject")&&n.d(t,{isEmptyObject:function(){return r.isEmptyObject}}),n.o(r,"isFunction")&&n.d(t,{isFunction:function(){return r.isFunction}}),n.o(r,"isNumber")&&n.d(t,{isNumber:function(){return r.isNumber}}),n.o(r,"isObject")&&n.d(t,{isObject:function(){return r.isObject}}),n.o(r,"isResponsiveObjectLike")&&n.d(t,{isResponsiveObjectLike:function(){return r.isResponsiveObjectLike}}),n.o(r,"isRightClick")&&n.d(t,{isRightClick:function(){return r.isRightClick}}),n.o(r,"isString")&&n.d(t,{isString:function(){return r.isString}}),n.o(r,"isTabbable")&&n.d(t,{isTabbable:function(){return r.isTabbable}}),n.o(r,"memoizedGet")&&n.d(t,{memoizedGet:function(){return r.memoizedGet}}),n.o(r,"mergeRefs")&&n.d(t,{mergeRefs:function(){return r.mergeRefs}}),n.o(r,"mergeWith")&&n.d(t,{mergeWith:function(){return r.mergeWith}}),n.o(r,"normalizeEventKey")&&n.d(t,{normalizeEventKey:function(){return r.normalizeEventKey}}),n.o(r,"objectAssign")&&n.d(t,{objectAssign:function(){return r.objectAssign}}),n.o(r,"objectFilter")&&n.d(t,{objectFilter:function(){return r.objectFilter}}),n.o(r,"objectKeys")&&n.d(t,{objectKeys:function(){return r.objectKeys}}),n.o(r,"objectToArrayNotation")&&n.d(t,{objectToArrayNotation:function(){return r.objectToArrayNotation}}),n.o(r,"omit")&&n.d(t,{omit:function(){return r.omit}}),n.o(r,"removeItem")&&n.d(t,{removeItem:function(){return r.removeItem}});var o=n(4461),a=n(7277),i=n(4651),l=n(7658),s=n(7768),u=n(3808),c=n(4691),f=n(6678)},4651:(e,t,n)=>{"use strict";n.d(t,{bT:()=>o.a,wB:()=>i.a,CE:()=>l,Wf:()=>c,lw:()=>f,YU:()=>d,Yd:()=>p,sq:()=>h});var r=n(8554),o=n.n(r),a=n(7418),i=n.n(a);function l(e,t){var n={};return Object.keys(e).forEach((r=>{t.includes(r)||(n[r]=e[r])})),n}var s,u,c=(s=function(e,t,n,r){var o="string"==typeof t?t.split("."):[t];for(r=0;r<o.length&&e;r+=1)e=e[o[r]];return void 0===e?n:e},u=new WeakMap,(e,t,n,r)=>{u.has(e)||u.set(e,new Map);var o=u.get(e),a="string"==typeof t?t.split("."):[t];if(o.has(a))return o.get(a);var i=s(e,t,n,r);return o.set(a,i),i});function f(e,t){var n={};return Object.keys(e).forEach((r=>{var o=e[r];t(o,r,e)&&(n[r]=o)})),n}var d=e=>f(e,(e=>null!=e)),p=e=>Object.keys(e),h=e=>e.reduce(((e,t)=>{var[n,r]=t;return e[n]=r,e}),{})},4691:(e,t,n)=>{"use strict";n.d(t,{kr:()=>a,WR:()=>i,lq:()=>s});var r=n(7294),o=n(3808);function a(e){void 0===e&&(e={});var{strict:t=!0,errorMessage:n="useContext: `context` is undefined. Seems you forgot to wrap component within the Provider",name:o}=e,a=r.createContext(void 0);return a.displayName=o,[a.Provider,function(){var e=r.useContext(a);if(!e&&t)throw new Error(n);return e},a]}function i(e){return r.Children.toArray(e).filter((e=>r.isValidElement(e)))}function l(e,t){if(null!=e)if((0,o.mf)(e))e(t);else try{e.current=t}catch(n){throw new Error("Cannot assign value '"+t+"' to ref '"+e+"'")}}function s(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return e=>{t.forEach((t=>l(t,e)))}}},6678:(e,t,n)=>{"use strict";n.d(t,{kQ:()=>a,WN:()=>i});var r=n(7277),o=Object.freeze(["base","sm","md","lg","xl"]);function a(e,t){void 0===t&&(t=o);for(var n=t.map((t=>{var n;return null!=(n=e[t])?n:null}));null===(0,r.s)(n);)n.pop();return n}function i(e,t){void 0===t&&(t=o);var n=Object.keys(e);return n.length>0&&n.every((e=>t.includes(e)))}},7768:(e,t,n)=>{"use strict";n.d(t,{Wq:()=>l,T_:()=>u});var r=e=>e.hasAttribute("tabindex");function o(e){return e instanceof HTMLElement}function a(e){return!(!e.parentElement||!a(e.parentElement))||e.hidden}function i(e){if(!o(e)||a(e)||function(e){return!0===Boolean(e.getAttribute("disabled"))||!0===Boolean(e.getAttribute("aria-disabled"))}(e))return!1;var{localName:t}=e;if(["input","select","textarea","button"].indexOf(t)>=0)return!0;var n={a:()=>e.hasAttribute("href"),audio:()=>e.hasAttribute("controls"),video:()=>e.hasAttribute("controls")};return t in n?n[t]():!!function(e){var t=e.getAttribute("contenteditable");return"false"!==t&&null!=t}(e)||r(e)}function l(e){return!!e&&o(e)&&i(e)&&!(e=>r(e)&&-1===e.tabIndex)(e)}var s=e=>document.activeElement===e;function u(e,t){void 0===t&&(t={});var{isActive:n=s,preventScroll:r}=t;return n(e)?-1:requestAnimationFrame((()=>{e.focus({preventScroll:r}),function(e){return o(e)&&"input"===e.tagName.toLowerCase()&&"select"in e}(e)&&e.select()}))}},5515:()=>{},6418:(e,t,n)=>{"use strict";n.d(t,{xB:()=>y,Ni:()=>v,F4:()=>x,Xn:()=>g});var r=n(5354),o=n.n(r),a=n(7294),i=function(){function e(e){this.isSpeedy=void 0===e.speedy||e.speedy,this.tags=[],this.ctr=0,this.nonce=e.nonce,this.key=e.key,this.container=e.container,this.before=null}var t=e.prototype;return t.insert=function(e){if(this.ctr%(this.isSpeedy?65e3:1)==0){var t,n=function(e){var t=document.createElement("style");return t.setAttribute("data-emotion",e.key),void 0!==e.nonce&&t.setAttribute("nonce",e.nonce),t.appendChild(document.createTextNode("")),t}(this);t=0===this.tags.length?this.before:this.tags[this.tags.length-1].nextSibling,this.container.insertBefore(n,t),this.tags.push(n)}var r=this.tags[this.tags.length-1];if(this.isSpeedy){var o=function(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}(r);try{var a=105===e.charCodeAt(1)&&64===e.charCodeAt(0);o.insertRule(e,a?0:o.cssRules.length)}catch(e){}}else r.appendChild(document.createTextNode(e));this.ctr++},t.flush=function(){this.tags.forEach((function(e){return e.parentNode.removeChild(e)})),this.tags=[],this.ctr=0},e}();const l=function(e){function t(e,r,s,u,d){for(var p,h,m,v,x,k=0,S=0,C=0,E=0,_=0,M=0,L=m=p=0,j=0,B=0,F=0,N=0,I=s.length,V=I-1,U="",W="",H="",q="";j<I;){if(h=s.charCodeAt(j),j===V&&0!==S+E+C+k&&(0!==S&&(h=47===S?10:47),E=C=k=0,I++,V++),0===S+E+C+k){if(j===V&&(0<B&&(U=U.replace(f,"")),0<U.trim().length)){switch(h){case 32:case 9:case 59:case 13:case 10:break;default:U+=s.charAt(j)}h=59}switch(h){case 123:for(p=(U=U.trim()).charCodeAt(0),m=1,N=++j;j<I;){switch(h=s.charCodeAt(j)){case 123:m++;break;case 125:m--;break;case 47:switch(h=s.charCodeAt(j+1)){case 42:case 47:e:{for(L=j+1;L<V;++L)switch(s.charCodeAt(L)){case 47:if(42===h&&42===s.charCodeAt(L-1)&&j+2!==L){j=L+1;break e}break;case 10:if(47===h){j=L+1;break e}}j=L}}break;case 91:h++;case 40:h++;case 34:case 39:for(;j++<V&&s.charCodeAt(j)!==h;);}if(0===m)break;j++}switch(m=s.substring(N,j),0===p&&(p=(U=U.replace(c,"").trim()).charCodeAt(0)),p){case 64:switch(0<B&&(U=U.replace(f,"")),h=U.charCodeAt(1)){case 100:case 109:case 115:case 45:B=r;break;default:B=T}if(N=(m=t(r,B,m,h,d+1)).length,0<z&&(x=l(3,m,B=n(T,U,F),r,O,A,N,h,d,u),U=B.join(""),void 0!==x&&0===(N=(m=x.trim()).length)&&(h=0,m="")),0<N)switch(h){case 115:U=U.replace(w,i);case 100:case 109:case 45:m=U+"{"+m+"}";break;case 107:m=(U=U.replace(g,"$1 $2"))+"{"+m+"}",m=1===R||2===R&&a("@"+m,3)?"@-webkit-"+m+"@"+m:"@"+m;break;default:m=U+m,112===u&&(W+=m,m="")}else m="";break;default:m=t(r,n(r,U,F),m,u,d+1)}H+=m,m=F=B=L=p=0,U="",h=s.charCodeAt(++j);break;case 125:case 59:if(1<(N=(U=(0<B?U.replace(f,""):U).trim()).length))switch(0===L&&(p=U.charCodeAt(0),45===p||96<p&&123>p)&&(N=(U=U.replace(" ",":")).length),0<z&&void 0!==(x=l(1,U,r,e,O,A,W.length,u,d,u))&&0===(N=(U=x.trim()).length)&&(U="\0\0"),p=U.charCodeAt(0),h=U.charCodeAt(1),p){case 0:break;case 64:if(105===h||99===h){q+=U+s.charAt(j);break}default:58!==U.charCodeAt(N-1)&&(W+=o(U,p,h,U.charCodeAt(2)))}F=B=L=p=0,U="",h=s.charCodeAt(++j)}}switch(h){case 13:case 10:47===S?S=0:0===1+p&&107!==u&&0<U.length&&(B=1,U+="\0"),0<z*D&&l(0,U,r,e,O,A,W.length,u,d,u),A=1,O++;break;case 59:case 125:if(0===S+E+C+k){A++;break}default:switch(A++,v=s.charAt(j),h){case 9:case 32:if(0===E+k+S)switch(_){case 44:case 58:case 9:case 32:v="";break;default:32!==h&&(v=" ")}break;case 0:v="\\0";break;case 12:v="\\f";break;case 11:v="\\v";break;case 38:0===E+S+k&&(B=F=1,v="\f"+v);break;case 108:if(0===E+S+k+P&&0<L)switch(j-L){case 2:112===_&&58===s.charCodeAt(j-3)&&(P=_);case 8:111===M&&(P=M)}break;case 58:0===E+S+k&&(L=j);break;case 44:0===S+C+E+k&&(B=1,v+="\r");break;case 34:case 39:0===S&&(E=E===h?0:0===E?h:E);break;case 91:0===E+S+C&&k++;break;case 93:0===E+S+C&&k--;break;case 41:0===E+S+k&&C--;break;case 40:if(0===E+S+k){if(0===p)switch(2*_+3*M){case 533:break;default:p=1}C++}break;case 64:0===S+C+E+k+L+m&&(m=1);break;case 42:case 47:if(!(0<E+k+C))switch(S){case 0:switch(2*h+3*s.charCodeAt(j+1)){case 235:S=47;break;case 220:N=j,S=42}break;case 42:47===h&&42===_&&N+2!==j&&(33===s.charCodeAt(N+2)&&(W+=s.substring(N,j+1)),v="",S=0)}}0===S&&(U+=v)}M=_,_=h,j++}if(0<(N=W.length)){if(B=r,0<z&&void 0!==(x=l(2,W,B,e,O,A,N,u,d,u))&&0===(W=x).length)return q+W+H;if(W=B.join(",")+"{"+W+"}",0!=R*P){switch(2!==R||a(W,2)||(P=0),P){case 111:W=W.replace(b,":-moz-$1")+W;break;case 112:W=W.replace(y,"::-webkit-input-$1")+W.replace(y,"::-moz-$1")+W.replace(y,":-ms-input-$1")+W}P=0}}return q+W+H}function n(e,t,n){var o=t.trim().split(m);t=o;var a=o.length,i=e.length;switch(i){case 0:case 1:var l=0;for(e=0===i?"":e[0]+" ";l<a;++l)t[l]=r(e,t[l],n).trim();break;default:var s=l=0;for(t=[];l<a;++l)for(var u=0;u<i;++u)t[s++]=r(e[u]+" ",o[l],n).trim()}return t}function r(e,t,n){var r=t.charCodeAt(0);switch(33>r&&(r=(t=t.trim()).charCodeAt(0)),r){case 38:return t.replace(v,"$1"+e.trim());case 58:return e.trim()+t.replace(v,"$1"+e.trim());default:if(0<1*n&&0<t.indexOf("\f"))return t.replace(v,(58===e.charCodeAt(0)?"":"$1")+e.trim())}return e+t}function o(e,t,n,r){var i=e+";",l=2*t+3*n+4*r;if(944===l){e=i.indexOf(":",9)+1;var s=i.substring(e,i.length-1).trim();return s=i.substring(0,e).trim()+s+";",1===R||2===R&&a(s,1)?"-webkit-"+s+s:s}if(0===R||2===R&&!a(i,1))return i;switch(l){case 1015:return 97===i.charCodeAt(10)?"-webkit-"+i+i:i;case 951:return 116===i.charCodeAt(3)?"-webkit-"+i+i:i;case 963:return 110===i.charCodeAt(5)?"-webkit-"+i+i:i;case 1009:if(100!==i.charCodeAt(4))break;case 969:case 942:return"-webkit-"+i+i;case 978:return"-webkit-"+i+"-moz-"+i+i;case 1019:case 983:return"-webkit-"+i+"-moz-"+i+"-ms-"+i+i;case 883:if(45===i.charCodeAt(8))return"-webkit-"+i+i;if(0<i.indexOf("image-set(",11))return i.replace(_,"$1-webkit-$2")+i;break;case 932:if(45===i.charCodeAt(4))switch(i.charCodeAt(5)){case 103:return"-webkit-box-"+i.replace("-grow","")+"-webkit-"+i+"-ms-"+i.replace("grow","positive")+i;case 115:return"-webkit-"+i+"-ms-"+i.replace("shrink","negative")+i;case 98:return"-webkit-"+i+"-ms-"+i.replace("basis","preferred-size")+i}return"-webkit-"+i+"-ms-"+i+i;case 964:return"-webkit-"+i+"-ms-flex-"+i+i;case 1023:if(99!==i.charCodeAt(8))break;return"-webkit-box-pack"+(s=i.substring(i.indexOf(":",15)).replace("flex-","").replace("space-between","justify"))+"-webkit-"+i+"-ms-flex-pack"+s+i;case 1005:return p.test(i)?i.replace(d,":-webkit-")+i.replace(d,":-moz-")+i:i;case 1e3:switch(t=(s=i.substring(13).trim()).indexOf("-")+1,s.charCodeAt(0)+s.charCodeAt(t)){case 226:s=i.replace(x,"tb");break;case 232:s=i.replace(x,"tb-rl");break;case 220:s=i.replace(x,"lr");break;default:return i}return"-webkit-"+i+"-ms-"+s+i;case 1017:if(-1===i.indexOf("sticky",9))break;case 975:switch(t=(i=e).length-10,l=(s=(33===i.charCodeAt(t)?i.substring(0,t):i).substring(e.indexOf(":",7)+1).trim()).charCodeAt(0)+(0|s.charCodeAt(7))){case 203:if(111>s.charCodeAt(8))break;case 115:i=i.replace(s,"-webkit-"+s)+";"+i;break;case 207:case 102:i=i.replace(s,"-webkit-"+(102<l?"inline-":"")+"box")+";"+i.replace(s,"-webkit-"+s)+";"+i.replace(s,"-ms-"+s+"box")+";"+i}return i+";";case 938:if(45===i.charCodeAt(5))switch(i.charCodeAt(6)){case 105:return s=i.replace("-items",""),"-webkit-"+i+"-webkit-box-"+s+"-ms-flex-"+s+i;case 115:return"-webkit-"+i+"-ms-flex-item-"+i.replace(S,"")+i;default:return"-webkit-"+i+"-ms-flex-line-pack"+i.replace("align-content","").replace(S,"")+i}break;case 973:case 989:if(45!==i.charCodeAt(3)||122===i.charCodeAt(4))break;case 931:case 953:if(!0===E.test(e))return 115===(s=e.substring(e.indexOf(":")+1)).charCodeAt(0)?o(e.replace("stretch","fill-available"),t,n,r).replace(":fill-available",":stretch"):i.replace(s,"-webkit-"+s)+i.replace(s,"-moz-"+s.replace("fill-",""))+i;break;case 962:if(i="-webkit-"+i+(102===i.charCodeAt(5)?"-ms-"+i:"")+i,211===n+r&&105===i.charCodeAt(13)&&0<i.indexOf("transform",10))return i.substring(0,i.indexOf(";",27)+1).replace(h,"$1-webkit-$2")+i}return i}function a(e,t){var n=e.indexOf(1===t?":":"{"),r=e.substring(0,3!==t?n:10);return n=e.substring(n+1,e.length-1),L(2!==t?r:r.replace(C,"$1"),n,t)}function i(e,t){var n=o(t,t.charCodeAt(0),t.charCodeAt(1),t.charCodeAt(2));return n!==t+";"?n.replace(k," or ($1)").substring(4):"("+t+")"}function l(e,t,n,r,o,a,i,l,s,c){for(var f,d=0,p=t;d<z;++d)switch(f=M[d].call(u,e,p,n,r,o,a,i,l,s,c)){case void 0:case!1:case!0:case null:break;default:p=f}if(p!==t)return p}function s(e){return void 0!==(e=e.prefix)&&(L=null,e?"function"!=typeof e?R=1:(R=2,L=e):R=0),s}function u(e,n){var r=e;if(33>r.charCodeAt(0)&&(r=r.trim()),r=[r],0<z){var o=l(-1,n,r,r,O,A,0,0,0,0);void 0!==o&&"string"==typeof o&&(n=o)}var a=t(T,r,n,0,0);return 0<z&&void 0!==(o=l(-2,a,r,r,O,A,a.length,0,0,0))&&(a=o),P=0,A=O=1,a}var c=/^\0+/g,f=/[\0\r\f]/g,d=/: */g,p=/zoo|gra/,h=/([,: ])(transform)/g,m=/,\r+?/g,v=/([\t\r\n ])*\f?&/g,g=/@(k\w+)\s*(\S*)\s*/,y=/::(place)/g,b=/:(read-only)/g,x=/[svh]\w+-[tblr]{2}/,w=/\(\s*(.*)\s*\)/g,k=/([\s\S]*?);/g,S=/-self|flex-/g,C=/[^]*?(:[rp][el]a[\w-]+)[^]*/,E=/stretch|:\s*\w+\-(?:conte|avail)/,_=/([^-])(image-set\()/,A=1,O=1,P=0,R=1,T=[],M=[],z=0,L=null,D=0;return u.use=function e(t){switch(t){case void 0:case null:z=M.length=0;break;default:if("function"==typeof t)M[z++]=t;else if("object"==typeof t)for(var n=0,r=t.length;n<r;++n)e(t[n]);else D=0|!!t}return e},u.set=s,void 0!==e&&s(e),u};var s="/*|*/";function u(e){e&&c.current.insert(e+"}")}var c={current:null},f=function(e,t,n,r,o,a,i,l,f,d){switch(e){case 1:switch(t.charCodeAt(0)){case 64:return c.current.insert(t+";"),"";case 108:if(98===t.charCodeAt(2))return""}break;case 2:if(0===l)return t+s;break;case 3:switch(l){case 102:case 112:return c.current.insert(n[0]+t),"";default:return t+(0===d?s:"")}case-2:t.split("/*|*/}").forEach(u)}};var d=n(8087),p=n(2015);const h=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return(0,p.O)(t)};var m=(0,a.createContext)("undefined"!=typeof HTMLElement?function(e){void 0===e&&(e={});var t,n=e.key||"css";void 0!==e.prefix&&(t={prefix:e.prefix});var r,o=new l(t),a={};r=e.container||document.head;var s,u=document.querySelectorAll("style[data-emotion-"+n+"]");Array.prototype.forEach.call(u,(function(e){e.getAttribute("data-emotion-"+n).split(" ").forEach((function(e){a[e]=!0})),e.parentNode!==r&&r.appendChild(e)})),o.use(e.stylisPlugins)(f),s=function(e,t,n,r){var a=t.name;c.current=n,o(e,t.styles),r&&(d.inserted[a]=!0)};var d={key:n,sheet:new i({key:n,container:r,nonce:e.nonce,speedy:e.speedy}),nonce:e.nonce,inserted:a,registered:{},insert:s};return d}():null),v=(0,a.createContext)({}),g=(m.Provider,function(e){return(0,a.forwardRef)((function(t,n){return(0,a.createElement)(m.Consumer,null,(function(r){return e(t,r,n)}))}))});Object.prototype.hasOwnProperty;var y=g((function(e,t){var n=e.styles;if("function"==typeof n)return(0,a.createElement)(v.Consumer,null,(function(e){var r=(0,p.O)([n(e)]);return(0,a.createElement)(b,{serialized:r,cache:t})}));var r=(0,p.O)([n]);return(0,a.createElement)(b,{serialized:r,cache:t})})),b=function(e){function t(t,n,r){return e.call(this,t,n,r)||this}o()(t,e);var n=t.prototype;return n.componentDidMount=function(){this.sheet=new i({key:this.props.cache.key+"-global",nonce:this.props.cache.sheet.nonce,container:this.props.cache.sheet.container});var e=document.querySelector("style[data-emotion-"+this.props.cache.key+'="'+this.props.serialized.name+'"]');null!==e&&this.sheet.tags.push(e),this.props.cache.sheet.tags.length&&(this.sheet.before=this.props.cache.sheet.tags[0]),this.insertStyles()},n.componentDidUpdate=function(e){e.serialized.name!==this.props.serialized.name&&this.insertStyles()},n.insertStyles=function(){if(void 0!==this.props.serialized.next&&(0,d.M)(this.props.cache,this.props.serialized.next,!0),this.sheet.tags.length){var e=this.sheet.tags[this.sheet.tags.length-1].nextElementSibling;this.sheet.before=e,this.sheet.flush()}this.props.cache.insert("",this.props.serialized,this.sheet,!1)},n.componentWillUnmount=function(){this.sheet.flush()},n.render=function(){return null},t}(a.Component),x=function(){var e=h.apply(void 0,arguments),t="animation-"+e.name;return{name:t,styles:"@keyframes "+t+"{"+e.styles+"}",anim:1,toString:function(){return"_EMO_"+this.name+"_"+this.styles+"_EMO_"}}},w=function e(t){for(var n=t.length,r=0,o="";r<n;r++){var a=t[r];if(null!=a){var i=void 0;switch(typeof a){case"boolean":break;case"object":if(Array.isArray(a))i=e(a);else for(var l in i="",a)a[l]&&l&&(i&&(i+=" "),i+=l);break;default:i=a}i&&(o&&(o+=" "),o+=i)}}return o};function k(e,t,n){var r=[],o=(0,d.f)(e,r,n);return r.length<2?n:o+t(r)}g((function(e,t){return(0,a.createElement)(v.Consumer,null,(function(n){var r=function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];var o=(0,p.O)(n,t.registered);return(0,d.M)(t,o,!1),t.key+"-"+o.name},o={css:r,cx:function(){for(var e=arguments.length,n=new Array(e),o=0;o<e;o++)n[o]=arguments[o];return k(t.registered,r,w(n))},theme:n};return e.children(o)}))}))},3804:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(2717),o=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;const a=(0,r.Z)((function(e){return o.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91}))},2717:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=function(e){var t={};return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}}},2015:(e,t,n)=>{"use strict";n.d(t,{O:()=>m});const r=function(e){for(var t,n=0,r=0,o=e.length;o>=4;++r,o-=4)t=1540483477*(65535&(t=255&e.charCodeAt(r)|(255&e.charCodeAt(++r))<<8|(255&e.charCodeAt(++r))<<16|(255&e.charCodeAt(++r))<<24))+(59797*(t>>>16)<<16),n=1540483477*(65535&(t^=t>>>24))+(59797*(t>>>16)<<16)^1540483477*(65535&n)+(59797*(n>>>16)<<16);switch(o){case 3:n^=(255&e.charCodeAt(r+2))<<16;case 2:n^=(255&e.charCodeAt(r+1))<<8;case 1:n=1540483477*(65535&(n^=255&e.charCodeAt(r)))+(59797*(n>>>16)<<16)}return(((n=1540483477*(65535&(n^=n>>>13))+(59797*(n>>>16)<<16))^n>>>15)>>>0).toString(36)},o={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};var a=n(2717),i=/[A-Z]|^ms/g,l=/_EMO_([^_]+?)_([^]*?)_EMO_/g,s=function(e){return 45===e.charCodeAt(1)},u=function(e){return null!=e&&"boolean"!=typeof e},c=(0,a.Z)((function(e){return s(e)?e:e.replace(i,"-$&").toLowerCase()})),f=function(e,t){switch(e){case"animation":case"animationName":if("string"==typeof t)return t.replace(l,(function(e,t,n){return p={name:t,styles:n,next:p},t}))}return 1===o[e]||s(e)||"number"!=typeof t||0===t?t:t+"px"};function d(e,t,n,r){if(null==n)return"";if(void 0!==n.__emotion_styles)return n;switch(typeof n){case"boolean":return"";case"object":if(1===n.anim)return p={name:n.name,styles:n.styles,next:p},n.name;if(void 0!==n.styles){var o=n.next;if(void 0!==o)for(;void 0!==o;)p={name:o.name,styles:o.styles,next:p},o=o.next;return n.styles+";"}return function(e,t,n){var r="";if(Array.isArray(n))for(var o=0;o<n.length;o++)r+=d(e,t,n[o],!1);else for(var a in n){var i=n[a];if("object"!=typeof i)null!=t&&void 0!==t[i]?r+=a+"{"+t[i]+"}":u(i)&&(r+=c(a)+":"+f(a,i)+";");else if(!Array.isArray(i)||"string"!=typeof i[0]||null!=t&&void 0!==t[i[0]]){var l=d(e,t,i,!1);switch(a){case"animation":case"animationName":r+=c(a)+":"+l+";";break;default:r+=a+"{"+l+"}"}}else for(var s=0;s<i.length;s++)u(i[s])&&(r+=c(a)+":"+f(a,i[s])+";")}return r}(e,t,n);case"function":if(void 0!==e){var a=p,i=n(e);return p=a,d(e,t,i,r)}}if(null==t)return n;var l=t[n];return void 0===l||r?n:l}var p,h=/label:\s*([^\s;\n{]+)\s*;/g,m=function(e,t,n){if(1===e.length&&"object"==typeof e[0]&&null!==e[0]&&void 0!==e[0].styles)return e[0];var o=!0,a="";p=void 0;var i=e[0];null==i||void 0===i.raw?(o=!1,a+=d(n,t,i,!1)):a+=i[0];for(var l=1;l<e.length;l++)a+=d(n,t,e[l],46===a.charCodeAt(a.length-1)),o&&(a+=i[l]);h.lastIndex=0;for(var s,u="";null!==(s=h.exec(a));)u+="-"+s[1];return{name:r(a)+u,styles:a,next:p}}},8087:(e,t,n)=>{"use strict";function r(e,t,n){var r="";return n.split(" ").forEach((function(n){void 0!==e[n]?t.push(e[n]):r+=n+" "})),r}n.d(t,{f:()=>r,M:()=>o});var o=function(e,t,n){var r=e.key+"-"+t.name;if(!1===n&&void 0===e.registered[r]&&(e.registered[r]=t.styles),void 0===e.inserted[t.name]){var o=t;do{e.insert("."+r,o,e.sheet,!0),o=o.next}while(void 0!==o)}}},4547:(e,t,n)=>{"use strict";n.d(t,{jo:()=>c,By:()=>h,qC:()=>m});var r=n(7418),o=n.n(r),a=function(e,t){var n=o()({},e,t);for(var r in e){var a;e[r]&&"object"==typeof t[r]&&o()(n,((a={})[r]=o()(e[r],t[r]),a))}return n},i={breakpoints:[40,52,64].map((function(e){return e+"em"}))},l=function(e){return"@media screen and (min-width: "+e+")"},s=function(e,t){return u(t,e,e)},u=function(e,t,n,r,o){for(t=t&&t.split?t.split("."):[t],r=0;r<t.length;r++)e=e?e[t[r]]:o;return e===o?n:e},c=function e(t){var n={},r=function(e){var r,s,c={},p=!1,h=e.theme&&e.theme.disableStyledSystemCache;for(var m in e)if(t[m]){var v=t[m],g=e[m],y=u(e.theme,v.scale,v.defaults);if("object"!=typeof g)o()(c,v(g,y,e));else{if(n.breakpoints=!h&&n.breakpoints||u(e.theme,"breakpoints",i.breakpoints),Array.isArray(g)){n.media=!h&&n.media||[null].concat(n.breakpoints.map(l)),c=a(c,f(n.media,v,y,g,e));continue}null!==g&&(c=a(c,d(n.breakpoints,v,y,g,e)),p=!0)}}return p&&(r=c,s={},Object.keys(r).sort((function(e,t){return e.localeCompare(t,void 0,{numeric:!0,sensitivity:"base"})})).forEach((function(e){s[e]=r[e]})),c=s),c};r.config=t,r.propNames=Object.keys(t),r.cache=n;var s=Object.keys(t).filter((function(e){return"config"!==e}));return s.length>1&&s.forEach((function(n){var o;r[n]=e(((o={})[n]=t[n],o))})),r},f=function(e,t,n,r,a){var i={};return r.slice(0,e.length).forEach((function(r,l){var s,u=e[l],c=t(r,n,a);u?o()(i,((s={})[u]=o()({},i[u],c),s)):o()(i,c)})),i},d=function(e,t,n,r,a){var i={};for(var s in r){var u=e[s],c=t(r[s],n,a);if(u){var f,d=l(u);o()(i,((f={})[d]=o()({},i[d],c),f))}else o()(i,c)}return i},p=function(e){var t=e.properties,n=e.property,r=e.scale,o=e.transform,a=void 0===o?s:o,i=e.defaultScale;t=t||[n];var l=function(e,n,r){var o={},i=a(e,n,r);if(null!==i)return t.forEach((function(e){o[e]=i})),o};return l.scale=r,l.defaults=i,l},h=function(e){void 0===e&&(e={});var t={};return Object.keys(e).forEach((function(n){var r=e[n];t[n]=!0!==r?"function"!=typeof r?p(r):r:p({property:n,scale:n})})),c(t)},m=function(){for(var e={},t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];n.forEach((function(t){t&&t.config&&o()(e,t.config)}));var a=c(e);return a}},4305:e=>{e.exports=function(e){var t=e.length;if(!e||!t)return null;for(var n=t;n--;)if(!isNaN(e[n]))return e.slice(n+1,t)||null;return null}},8554:(e,t,n)=>{e=n.nmd(e);var r="__lodash_hash_undefined__",o=9007199254740991,a="[object Arguments]",i="[object Function]",l="[object Object]",s=/^\[object .+?Constructor\]$/,u=/^(?:0|[1-9]\d*)$/,c={};c["[object Float32Array]"]=c["[object Float64Array]"]=c["[object Int8Array]"]=c["[object Int16Array]"]=c["[object Int32Array]"]=c["[object Uint8Array]"]=c["[object Uint8ClampedArray]"]=c["[object Uint16Array]"]=c["[object Uint32Array]"]=!0,c[a]=c["[object Array]"]=c["[object ArrayBuffer]"]=c["[object Boolean]"]=c["[object DataView]"]=c["[object Date]"]=c["[object Error]"]=c[i]=c["[object Map]"]=c["[object Number]"]=c[l]=c["[object RegExp]"]=c["[object Set]"]=c["[object String]"]=c["[object WeakMap]"]=!1;var f="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g,d="object"==typeof self&&self&&self.Object===Object&&self,p=f||d||Function("return this")(),h=t&&!t.nodeType&&t,m=h&&e&&!e.nodeType&&e,v=m&&m.exports===h,g=v&&f.process,y=function(){try{return m&&m.require&&m.require("util").types||g&&g.binding&&g.binding("util")}catch(e){}}(),b=y&&y.isTypedArray;function x(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}var w,k,S,C=Array.prototype,E=Function.prototype,_=Object.prototype,A=p["__core-js_shared__"],O=E.toString,P=_.hasOwnProperty,R=(w=/[^.]+$/.exec(A&&A.keys&&A.keys.IE_PROTO||""))?"Symbol(src)_1."+w:"",T=_.toString,M=O.call(Object),z=RegExp("^"+O.call(P).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),L=v?p.Buffer:void 0,D=p.Symbol,j=p.Uint8Array,B=(L&&L.allocUnsafe,k=Object.getPrototypeOf,S=Object,function(e){return k(S(e))}),F=Object.create,N=_.propertyIsEnumerable,I=C.splice,V=D?D.toStringTag:void 0,U=function(){try{var e=le(Object,"defineProperty");return e({},"",{}),e}catch(e){}}(),W=L?L.isBuffer:void 0,H=Math.max,q=Date.now,$=le(p,"Map"),G=le(Object,"create"),K=function(){function e(){}return function(t){if(!be(t))return{};if(F)return F(t);e.prototype=t;var n=new e;return e.prototype=void 0,n}}();function Q(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function X(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Y(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Z(e){var t=this.__data__=new X(e);this.size=t.size}function J(e,t,n){(void 0!==n&&!de(e[t],n)||void 0===n&&!(t in e))&&ne(e,t,n)}function ee(e,t,n){var r=e[t];P.call(e,t)&&de(r,n)&&(void 0!==n||t in e)||ne(e,t,n)}function te(e,t){for(var n=e.length;n--;)if(de(e[n][0],t))return n;return-1}function ne(e,t,n){"__proto__"==t&&U?U(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}Q.prototype.clear=function(){this.__data__=G?G(null):{},this.size=0},Q.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},Q.prototype.get=function(e){var t=this.__data__;if(G){var n=t[e];return n===r?void 0:n}return P.call(t,e)?t[e]:void 0},Q.prototype.has=function(e){var t=this.__data__;return G?void 0!==t[e]:P.call(t,e)},Q.prototype.set=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=G&&void 0===t?r:t,this},X.prototype.clear=function(){this.__data__=[],this.size=0},X.prototype.delete=function(e){var t=this.__data__,n=te(t,e);return!(n<0||(n==t.length-1?t.pop():I.call(t,n,1),--this.size,0))},X.prototype.get=function(e){var t=this.__data__,n=te(t,e);return n<0?void 0:t[n][1]},X.prototype.has=function(e){return te(this.__data__,e)>-1},X.prototype.set=function(e,t){var n=this.__data__,r=te(n,e);return r<0?(++this.size,n.push([e,t])):n[r][1]=t,this},Y.prototype.clear=function(){this.size=0,this.__data__={hash:new Q,map:new($||X),string:new Q}},Y.prototype.delete=function(e){var t=ie(this,e).delete(e);return this.size-=t?1:0,t},Y.prototype.get=function(e){return ie(this,e).get(e)},Y.prototype.has=function(e){return ie(this,e).has(e)},Y.prototype.set=function(e,t){var n=ie(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this},Z.prototype.clear=function(){this.__data__=new X,this.size=0},Z.prototype.delete=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n},Z.prototype.get=function(e){return this.__data__.get(e)},Z.prototype.has=function(e){return this.__data__.has(e)},Z.prototype.set=function(e,t){var n=this.__data__;if(n instanceof X){var r=n.__data__;if(!$||r.length<199)return r.push([e,t]),this.size=++n.size,this;n=this.__data__=new Y(r)}return n.set(e,t),this.size=n.size,this};function re(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":V&&V in Object(e)?function(e){var t=P.call(e,V),n=e[V];try{e[V]=void 0;var r=!0}catch(e){}var o=T.call(e);return r&&(t?e[V]=n:delete e[V]),o}(e):function(e){return T.call(e)}(e)}function oe(e){return xe(e)&&re(e)==a}function ae(e,t,n,r,o){e!==t&&function(e,t,n){for(var r=-1,o=Object(e),a=n(e),i=a.length;i--;){var l=a[++r];if(!1===t(o[l],l,o))break}}(t,(function(a,i){if(o||(o=new Z),be(a))!function(e,t,n,r,o,a,i){var s=ce(e,n),u=ce(t,n),c=i.get(u);if(c)J(e,n,c);else{var f,d,p,h,m,v=a?a(s,u,n+"",e,t,i):void 0,g=void 0===v;if(g){var y=he(u),b=!y&&ve(u),x=!y&&!b&&we(u);v=u,y||b||x?he(s)?v=s:xe(m=s)&&me(m)?v=function(e,t){var n=-1,r=e.length;for(t||(t=Array(r));++n<r;)t[n]=e[n];return t}(s):b?(g=!1,v=function(e,t){return e.slice()}(u)):x?(g=!1,h=new(p=(f=u).buffer).constructor(p.byteLength),new j(h).set(new j(p)),d=h,v=new f.constructor(d,f.byteOffset,f.length)):v=[]:function(e){if(!xe(e)||re(e)!=l)return!1;var t=B(e);if(null===t)return!0;var n=P.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&O.call(n)==M}(u)||pe(u)?(v=s,pe(s)?v=function(e){return function(e,t,n,r){var o=!n;n||(n={});for(var a=-1,i=t.length;++a<i;){var l=t[a],s=void 0;void 0===s&&(s=e[l]),o?ne(n,l,s):ee(n,l,s)}return n}(e,ke(e))}(s):be(s)&&!ge(s)||(v=function(e){return"function"!=typeof e.constructor||ue(e)?{}:K(B(e))}(u))):g=!1}g&&(i.set(u,v),o(v,u,r,a,i),i.delete(u)),J(e,n,v)}}(e,t,i,n,ae,r,o);else{var s=r?r(ce(e,i),a,i+"",e,t,o):void 0;void 0===s&&(s=a),J(e,i,s)}}),ke)}function ie(e,t){var n,r,o=e.__data__;return("string"==(r=typeof(n=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?o["string"==typeof t?"string":"hash"]:o.map}function le(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return function(e){return!(!be(e)||function(e){return!!R&&R in e}(e))&&(ge(e)?z:s).test(function(e){if(null!=e){try{return O.call(e)}catch(e){}try{return e+""}catch(e){}}return""}(e))}(n)?n:void 0}function se(e,t){var n=typeof e;return!!(t=null==t?o:t)&&("number"==n||"symbol"!=n&&u.test(e))&&e>-1&&e%1==0&&e<t}function ue(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||_)}function ce(e,t){if(("constructor"!==t||"function"!=typeof e[t])&&"__proto__"!=t)return e[t]}var fe=function(e){var t=0,n=0;return function(){var r=q(),o=16-(r-n);if(n=r,o>0){if(++t>=800)return arguments[0]}else t=0;return e.apply(void 0,arguments)}}(U?function(e,t){return U(e,"toString",{configurable:!0,enumerable:!1,value:(n=t,function(){return n}),writable:!0});var n}:Ee);function de(e,t){return e===t||e!=e&&t!=t}var pe=oe(function(){return arguments}())?oe:function(e){return xe(e)&&P.call(e,"callee")&&!N.call(e,"callee")},he=Array.isArray;function me(e){return null!=e&&ye(e.length)&&!ge(e)}var ve=W||function(){return!1};function ge(e){if(!be(e))return!1;var t=re(e);return t==i||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}function ye(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=o}function be(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function xe(e){return null!=e&&"object"==typeof e}var we=b?function(e){return function(t){return e(t)}}(b):function(e){return xe(e)&&ye(e.length)&&!!c[re(e)]};function ke(e){return me(e)?function(e,t){var n=he(e),r=!n&&pe(e),o=!n&&!r&&ve(e),a=!n&&!r&&!o&&we(e),i=n||r||o||a,l=i?function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}(e.length,String):[],s=l.length;for(var u in e)!t&&!P.call(e,u)||i&&("length"==u||o&&("offset"==u||"parent"==u)||a&&("buffer"==u||"byteLength"==u||"byteOffset"==u)||se(u,s))||l.push(u);return l}(e,!0):function(e){if(!be(e))return function(e){var t=[];if(null!=e)for(var n in Object(e))t.push(n);return t}(e);var t=ue(e),n=[];for(var r in e)("constructor"!=r||!t&&P.call(e,r))&&n.push(r);return n}(e)}var Se,Ce=(Se=function(e,t,n,r){ae(e,t,n,r)},function(e,t){return fe(function(e,t,n){return t=H(void 0===t?e.length-1:t,0),function(){for(var r=arguments,o=-1,a=H(r.length-t,0),i=Array(a);++o<a;)i[o]=r[t+o];o=-1;for(var l=Array(t+1);++o<t;)l[o]=r[o];return l[t]=n(i),x(e,this,l)}}(e,t,Ee),e+"")}((function(e,t){var n=-1,r=t.length,o=r>1?t[r-1]:void 0,a=r>2?t[2]:void 0;for(o=Se.length>3&&"function"==typeof o?(r--,o):void 0,a&&function(e,t,n){if(!be(n))return!1;var r=typeof t;return!!("number"==r?me(n)&&se(t,n.length):"string"==r&&t in n)&&de(n[t],e)}(t[0],t[1],a)&&(o=r<3?void 0:o,r=1),e=Object(e);++n<r;){var i=t[n];i&&Se(e,i,n,o)}return e})));function Ee(e){return e}e.exports=Ce},7418:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,a){for(var i,l,s=o(e),u=1;u<arguments.length;u++){for(var c in i=Object(arguments[u]))n.call(i,c)&&(s[c]=i[c]);if(t){l=t(i);for(var f=0;f<l.length;f++)r.call(i,l[f])&&(s[l[f]]=i[l[f]])}}return s}},2703:(e,t,n)=>{"use strict";var r=n(414);function o(){}function a(){}a.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,a,i){if(i!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:a,resetWarningCache:o};return n.PropTypes=n,n}},5697:(e,t,n)=>{e.exports=n(2703)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},4448:(e,t,n)=>{"use strict";var r=n(7294),o=n(7418),a=n(3840);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(i(227));var l=new Set,s={};function u(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(s[e]=t,e=0;e<t.length;e++)l.add(t[e])}var f=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p=Object.prototype.hasOwnProperty,h={},m={};function v(e,t,n,r,o,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new v(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];g[t]=new v(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new v(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new v(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new v(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new v(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new v(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new v(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new v(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function x(e,t,n,r){var o=g.hasOwnProperty(t)?g[t]:null;(null!==o?0===o.type:!r&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!p.call(m,e)||!p.call(h,e)&&(d.test(e)?m[e]=!0:(h[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,b);g[t]=new v(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,b);g[t]=new v(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,b);g[t]=new v(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new v(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new v("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new v(e,1,!1,e.toLowerCase(),null,!0,!0)}));var w=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,k=60103,S=60106,C=60107,E=60108,_=60114,A=60109,O=60110,P=60112,R=60113,T=60120,M=60115,z=60116,L=60121,D=60128,j=60129,B=60130,F=60131;if("function"==typeof Symbol&&Symbol.for){var N=Symbol.for;k=N("react.element"),S=N("react.portal"),C=N("react.fragment"),E=N("react.strict_mode"),_=N("react.profiler"),A=N("react.provider"),O=N("react.context"),P=N("react.forward_ref"),R=N("react.suspense"),T=N("react.suspense_list"),M=N("react.memo"),z=N("react.lazy"),L=N("react.block"),N("react.scope"),D=N("react.opaque.id"),j=N("react.debug_trace_mode"),B=N("react.offscreen"),F=N("react.legacy_hidden")}var I,V="function"==typeof Symbol&&Symbol.iterator;function U(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=V&&e[V]||e["@@iterator"])?e:null}function W(e){if(void 0===I)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);I=t&&t[1]||""}return"\n"+I+e}var H=!1;function q(e,t){if(!e||H)return"";H=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var o=e.stack.split("\n"),a=r.stack.split("\n"),i=o.length-1,l=a.length-1;1<=i&&0<=l&&o[i]!==a[l];)l--;for(;1<=i&&0<=l;i--,l--)if(o[i]!==a[l]){if(1!==i||1!==l)do{if(i--,0>--l||o[i]!==a[l])return"\n"+o[i].replace(" at new "," at ")}while(1<=i&&0<=l);break}}}finally{H=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?W(e):""}function $(e){switch(e.tag){case 5:return W(e.type);case 16:return W("Lazy");case 13:return W("Suspense");case 19:return W("SuspenseList");case 0:case 2:case 15:return q(e.type,!1);case 11:return q(e.type.render,!1);case 22:return q(e.type._render,!1);case 1:return q(e.type,!0);default:return""}}function G(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case C:return"Fragment";case S:return"Portal";case _:return"Profiler";case E:return"StrictMode";case R:return"Suspense";case T:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case O:return(e.displayName||"Context")+".Consumer";case A:return(e._context.displayName||"Context")+".Provider";case P:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case M:return G(e.type);case L:return G(e._render);case z:t=e._payload,e=e._init;try{return G(e(t))}catch(e){}}return null}function K(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function Q(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function X(e){e._valueTracker||(e._valueTracker=function(e){var t=Q(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Y(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Q(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Z(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function J(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=K(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&x(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=K(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?oe(e,t.type,n):t.hasOwnProperty("defaultValue")&&oe(e,t.type,K(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function oe(e,t,n){"number"===t&&Z(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function ae(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ie(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+K(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function le(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function se(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(i(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(i(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:K(n)}}function ue(e,t){var n=K(t.value),r=K(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ce(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var fe="http://www.w3.org/1999/xhtml";function de(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function pe(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?de(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var he,me,ve=(me=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((he=he||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=he.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return me(e,t)}))}:me);function ge(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ye={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},be=["Webkit","ms","Moz","O"];function xe(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ye.hasOwnProperty(e)&&ye[e]?(""+t).trim():t+"px"}function we(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=xe(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(ye).forEach((function(e){be.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ye[t]=ye[e]}))}));var ke=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Se(e,t){if(t){if(ke[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62))}}function Ce(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Ee(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var _e=null,Ae=null,Oe=null;function Pe(e){if(e=Zr(e)){if("function"!=typeof _e)throw Error(i(280));var t=e.stateNode;t&&(t=eo(t),_e(e.stateNode,e.type,t))}}function Re(e){Ae?Oe?Oe.push(e):Oe=[e]:Ae=e}function Te(){if(Ae){var e=Ae,t=Oe;if(Oe=Ae=null,Pe(e),t)for(e=0;e<t.length;e++)Pe(t[e])}}function Me(e,t){return e(t)}function ze(e,t,n,r,o){return e(t,n,r,o)}function Le(){}var De=Me,je=!1,Be=!1;function Fe(){null===Ae&&null===Oe||(Le(),Te())}function Ne(e,t){var n=e.stateNode;if(null===n)return null;var r=eo(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}var Ie=!1;if(f)try{var Ve={};Object.defineProperty(Ve,"passive",{get:function(){Ie=!0}}),window.addEventListener("test",Ve,Ve),window.removeEventListener("test",Ve,Ve)}catch(me){Ie=!1}function Ue(e,t,n,r,o,a,i,l,s){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var We=!1,He=null,qe=!1,$e=null,Ge={onError:function(e){We=!0,He=e}};function Ke(e,t,n,r,o,a,i,l,s){We=!1,He=null,Ue.apply(Ge,arguments)}function Qe(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Xe(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ye(e){if(Qe(e)!==e)throw Error(i(188))}function Ze(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var Je,et,tt,nt,rt=!1,ot=[],at=null,it=null,lt=null,st=new Map,ut=new Map,ct=[],ft="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function dt(e,t,n,r,o){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:o,targetContainers:[r]}}function pt(e,t){switch(e){case"focusin":case"focusout":at=null;break;case"dragenter":case"dragleave":it=null;break;case"mouseover":case"mouseout":lt=null;break;case"pointerover":case"pointerout":st.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ut.delete(t.pointerId)}}function ht(e,t,n,r,o,a){return null===e||e.nativeEvent!==a?(e=dt(t,n,r,o,a),null!==t&&null!==(t=Zr(t))&&et(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function mt(e){var t=Yr(e.target);if(null!==t){var n=Qe(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Xe(n)))return e.blockedOn=t,void nt(e.lanePriority,(function(){a.unstable_runWithPriority(e.priority,(function(){tt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function vt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Yt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=Zr(n))&&et(t),e.blockedOn=n,!1;t.shift()}return!0}function gt(e,t,n){vt(e)&&n.delete(t)}function yt(){for(rt=!1;0<ot.length;){var e=ot[0];if(null!==e.blockedOn){null!==(e=Zr(e.blockedOn))&&Je(e);break}for(var t=e.targetContainers;0<t.length;){var n=Yt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&ot.shift()}null!==at&&vt(at)&&(at=null),null!==it&&vt(it)&&(it=null),null!==lt&&vt(lt)&&(lt=null),st.forEach(gt),ut.forEach(gt)}function bt(e,t){e.blockedOn===t&&(e.blockedOn=null,rt||(rt=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,yt)))}function xt(e){function t(t){return bt(t,e)}if(0<ot.length){bt(ot[0],e);for(var n=1;n<ot.length;n++){var r=ot[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==at&&bt(at,e),null!==it&&bt(it,e),null!==lt&&bt(lt,e),st.forEach(t),ut.forEach(t),n=0;n<ct.length;n++)(r=ct[n]).blockedOn===e&&(r.blockedOn=null);for(;0<ct.length&&null===(n=ct[0]).blockedOn;)mt(n),null===n.blockedOn&&ct.shift()}function wt(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var kt={animationend:wt("Animation","AnimationEnd"),animationiteration:wt("Animation","AnimationIteration"),animationstart:wt("Animation","AnimationStart"),transitionend:wt("Transition","TransitionEnd")},St={},Ct={};function Et(e){if(St[e])return St[e];if(!kt[e])return e;var t,n=kt[e];for(t in n)if(n.hasOwnProperty(t)&&t in Ct)return St[e]=n[t];return e}f&&(Ct=document.createElement("div").style,"AnimationEvent"in window||(delete kt.animationend.animation,delete kt.animationiteration.animation,delete kt.animationstart.animation),"TransitionEvent"in window||delete kt.transitionend.transition);var _t=Et("animationend"),At=Et("animationiteration"),Ot=Et("animationstart"),Pt=Et("transitionend"),Rt=new Map,Tt=new Map,Mt=["abort","abort",_t,"animationEnd",At,"animationIteration",Ot,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Pt,"transitionEnd","waiting","waiting"];function zt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1];o="on"+(o[0].toUpperCase()+o.slice(1)),Tt.set(r,t),Rt.set(r,o),u(o,[r])}}(0,a.unstable_now)();var Lt=8;function Dt(e){if(0!=(1&e))return Lt=15,1;if(0!=(2&e))return Lt=14,2;if(0!=(4&e))return Lt=13,4;var t=24&e;return 0!==t?(Lt=12,t):0!=(32&e)?(Lt=11,32):0!=(t=192&e)?(Lt=10,t):0!=(256&e)?(Lt=9,256):0!=(t=3584&e)?(Lt=8,t):0!=(4096&e)?(Lt=7,4096):0!=(t=4186112&e)?(Lt=6,t):0!=(t=62914560&e)?(Lt=5,t):67108864&e?(Lt=4,67108864):0!=(134217728&e)?(Lt=3,134217728):0!=(t=805306368&e)?(Lt=2,t):0!=(1073741824&e)?(Lt=1,1073741824):(Lt=8,e)}function jt(e,t){var n=e.pendingLanes;if(0===n)return Lt=0;var r=0,o=0,a=e.expiredLanes,i=e.suspendedLanes,l=e.pingedLanes;if(0!==a)r=a,o=Lt=15;else if(0!=(a=134217727&n)){var s=a&~i;0!==s?(r=Dt(s),o=Lt):0!=(l&=a)&&(r=Dt(l),o=Lt)}else 0!=(a=n&~i)?(r=Dt(a),o=Lt):0!==l&&(r=Dt(l),o=Lt);if(0===r)return 0;if(r=n&((0>(r=31-Ut(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&i)){if(Dt(t),o<=Lt)return t;Lt=o}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-Ut(t)),r|=e[n],t&=~o;return r}function Bt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Ft(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Nt(24&~t))?Ft(10,t):e;case 10:return 0===(e=Nt(192&~t))?Ft(8,t):e;case 8:return 0===(e=Nt(3584&~t))&&0===(e=Nt(4186112&~t))&&(e=512),e;case 2:return 0===(t=Nt(805306368&~t))&&(t=268435456),t}throw Error(i(358,e))}function Nt(e){return e&-e}function It(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Vt(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-Ut(t)]=n}var Ut=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Wt(e)/Ht|0)|0},Wt=Math.log,Ht=Math.LN2,qt=a.unstable_UserBlockingPriority,$t=a.unstable_runWithPriority,Gt=!0;function Kt(e,t,n,r){je||Le();var o=Xt,a=je;je=!0;try{ze(o,e,t,n,r)}finally{(je=a)||Fe()}}function Qt(e,t,n,r){$t(qt,Xt.bind(null,e,t,n,r))}function Xt(e,t,n,r){var o;if(Gt)if((o=0==(4&t))&&0<ot.length&&-1<ft.indexOf(e))e=dt(null,e,t,n,r),ot.push(e);else{var a=Yt(e,t,n,r);if(null===a)o&&pt(e,r);else{if(o){if(-1<ft.indexOf(e))return e=dt(a,e,t,n,r),void ot.push(e);if(function(e,t,n,r,o){switch(t){case"focusin":return at=ht(at,e,t,n,r,o),!0;case"dragenter":return it=ht(it,e,t,n,r,o),!0;case"mouseover":return lt=ht(lt,e,t,n,r,o),!0;case"pointerover":var a=o.pointerId;return st.set(a,ht(st.get(a)||null,e,t,n,r,o)),!0;case"gotpointercapture":return a=o.pointerId,ut.set(a,ht(ut.get(a)||null,e,t,n,r,o)),!0}return!1}(a,e,t,n,r))return;pt(e,r)}Rr(e,t,r,null,n)}}}function Yt(e,t,n,r){var o=Ee(r);if(null!==(o=Yr(o))){var a=Qe(o);if(null===a)o=null;else{var i=a.tag;if(13===i){if(null!==(o=Xe(a)))return o;o=null}else if(3===i){if(a.stateNode.hydrate)return 3===a.tag?a.stateNode.containerInfo:null;o=null}else a!==o&&(o=null)}}return Rr(e,t,r,o,n),null}var Zt=null,Jt=null,en=null;function tn(){if(en)return en;var e,t,n=Jt,r=n.length,o="value"in Zt?Zt.value:Zt.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return en=o.slice(e,1<t?1-t:void 0)}function nn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function rn(){return!0}function on(){return!1}function an(e){function t(t,n,r,o,a){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?rn:on,this.isPropagationStopped=on,this}return o(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=rn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=rn)},persist:function(){},isPersistent:rn}),t}var ln,sn,un,cn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},fn=an(cn),dn=o({},cn,{view:0,detail:0}),pn=an(dn),hn=o({},dn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:En,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==un&&(un&&"mousemove"===e.type?(ln=e.screenX-un.screenX,sn=e.screenY-un.screenY):sn=ln=0,un=e),ln)},movementY:function(e){return"movementY"in e?e.movementY:sn}}),mn=an(hn),vn=an(o({},hn,{dataTransfer:0})),gn=an(o({},dn,{relatedTarget:0})),yn=an(o({},cn,{animationName:0,elapsedTime:0,pseudoElement:0})),bn=an(o({},cn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),xn=an(o({},cn,{data:0})),wn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},kn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Sn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Cn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Sn[e])&&!!t[e]}function En(){return Cn}var _n=an(o({},dn,{key:function(e){if(e.key){var t=wn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=nn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?kn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:En,charCode:function(e){return"keypress"===e.type?nn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?nn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),An=an(o({},hn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),On=an(o({},dn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:En})),Pn=an(o({},cn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Rn=an(o({},hn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),Tn=[9,13,27,32],Mn=f&&"CompositionEvent"in window,zn=null;f&&"documentMode"in document&&(zn=document.documentMode);var Ln=f&&"TextEvent"in window&&!zn,Dn=f&&(!Mn||zn&&8<zn&&11>=zn),jn=String.fromCharCode(32),Bn=!1;function Fn(e,t){switch(e){case"keyup":return-1!==Tn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Nn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var In=!1,Vn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Un(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Vn[e.type]:"textarea"===t}function Wn(e,t,n,r){Re(r),0<(t=Mr(t,"onChange")).length&&(n=new fn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Hn=null,qn=null;function $n(e){Cr(e,0)}function Gn(e){if(Y(Jr(e)))return e}function Kn(e,t){if("change"===e)return t}var Qn=!1;if(f){var Xn;if(f){var Yn="oninput"in document;if(!Yn){var Zn=document.createElement("div");Zn.setAttribute("oninput","return;"),Yn="function"==typeof Zn.oninput}Xn=Yn}else Xn=!1;Qn=Xn&&(!document.documentMode||9<document.documentMode)}function Jn(){Hn&&(Hn.detachEvent("onpropertychange",er),qn=Hn=null)}function er(e){if("value"===e.propertyName&&Gn(qn)){var t=[];if(Wn(t,qn,e,Ee(e)),e=$n,je)e(t);else{je=!0;try{Me(e,t)}finally{je=!1,Fe()}}}}function tr(e,t,n){"focusin"===e?(Jn(),qn=n,(Hn=t).attachEvent("onpropertychange",er)):"focusout"===e&&Jn()}function nr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Gn(qn)}function rr(e,t){if("click"===e)return Gn(t)}function or(e,t){if("input"===e||"change"===e)return Gn(t)}var ar="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},ir=Object.prototype.hasOwnProperty;function lr(e,t){if(ar(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!ir.call(t,n[r])||!ar(e[n[r]],t[n[r]]))return!1;return!0}function sr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function ur(e,t){var n,r=sr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=sr(r)}}function cr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?cr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function fr(){for(var e=window,t=Z();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Z((e=t.contentWindow).document)}return t}function dr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var pr=f&&"documentMode"in document&&11>=document.documentMode,hr=null,mr=null,vr=null,gr=!1;function yr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;gr||null==hr||hr!==Z(r)||(r="selectionStart"in(r=hr)&&dr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},vr&&lr(vr,r)||(vr=r,0<(r=Mr(mr,"onSelect")).length&&(t=new fn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=hr)))}zt("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),zt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),zt(Mt,2);for(var br="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),xr=0;xr<br.length;xr++)Tt.set(br[xr],0);c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var wr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),kr=new Set("cancel close invalid load scroll toggle".split(" ").concat(wr));function Sr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,a,l,s,u){if(Ke.apply(this,arguments),We){if(!We)throw Error(i(198));var c=He;We=!1,He=null,qe||(qe=!0,$e=c)}}(r,t,void 0,e),e.currentTarget=null}function Cr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var i=r.length-1;0<=i;i--){var l=r[i],s=l.instance,u=l.currentTarget;if(l=l.listener,s!==a&&o.isPropagationStopped())break e;Sr(o,l,u),a=s}else for(i=0;i<r.length;i++){if(s=(l=r[i]).instance,u=l.currentTarget,l=l.listener,s!==a&&o.isPropagationStopped())break e;Sr(o,l,u),a=s}}}if(qe)throw e=$e,qe=!1,$e=null,e}function Er(e,t){var n=to(t),r=e+"__bubble";n.has(r)||(Pr(t,e,2,!1),n.add(r))}var _r="_reactListening"+Math.random().toString(36).slice(2);function Ar(e){e[_r]||(e[_r]=!0,l.forEach((function(t){kr.has(t)||Or(t,!1,e,null),Or(t,!0,e,null)})))}function Or(e,t,n,r){var o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,a=n;if("selectionchange"===e&&9!==n.nodeType&&(a=n.ownerDocument),null!==r&&!t&&kr.has(e)){if("scroll"!==e)return;o|=2,a=r}var i=to(a),l=e+"__"+(t?"capture":"bubble");i.has(l)||(t&&(o|=4),Pr(a,e,o,t),i.add(l))}function Pr(e,t,n,r){var o=Tt.get(t);switch(void 0===o?2:o){case 0:o=Kt;break;case 1:o=Qt;break;default:o=Xt}n=o.bind(null,t,n,e),o=void 0,!Ie||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Rr(e,t,n,r,o){var a=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===i)for(i=r.return;null!==i;){var s=i.tag;if((3===s||4===s)&&((s=i.stateNode.containerInfo)===o||8===s.nodeType&&s.parentNode===o))return;i=i.return}for(;null!==l;){if(null===(i=Yr(l)))return;if(5===(s=i.tag)||6===s){r=a=i;continue e}l=l.parentNode}}r=r.return}!function(e,t,n){if(Be)return e();Be=!0;try{De(e,t,n)}finally{Be=!1,Fe()}}((function(){var r=a,o=Ee(n),i=[];e:{var l=Rt.get(e);if(void 0!==l){var s=fn,u=e;switch(e){case"keypress":if(0===nn(n))break e;case"keydown":case"keyup":s=_n;break;case"focusin":u="focus",s=gn;break;case"focusout":u="blur",s=gn;break;case"beforeblur":case"afterblur":s=gn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":s=mn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":s=vn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":s=On;break;case _t:case At:case Ot:s=yn;break;case Pt:s=Pn;break;case"scroll":s=pn;break;case"wheel":s=Rn;break;case"copy":case"cut":case"paste":s=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":s=An}var c=0!=(4&t),f=!c&&"scroll"===e,d=c?null!==l?l+"Capture":null:l;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&null!=(m=Ne(h,d))&&c.push(Tr(h,m,p))),f)break;h=h.return}0<c.length&&(l=new s(l,u,null,n,o),i.push({event:l,listeners:c}))}}if(0==(7&t)){if(s="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(u=n.relatedTarget||n.fromElement)||!Yr(u)&&!u[Qr])&&(s||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,s?(s=r,null!==(u=(u=n.relatedTarget||n.toElement)?Yr(u):null)&&(u!==(f=Qe(u))||5!==u.tag&&6!==u.tag)&&(u=null)):(s=null,u=r),s!==u)){if(c=mn,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=An,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==s?l:Jr(s),p=null==u?l:Jr(u),(l=new c(m,h+"leave",s,n,o)).target=f,l.relatedTarget=p,m=null,Yr(o)===r&&((c=new c(d,h+"enter",u,n,o)).target=p,c.relatedTarget=f,m=c),f=m,s&&u)e:{for(d=u,h=0,p=c=s;p;p=zr(p))h++;for(p=0,m=d;m;m=zr(m))p++;for(;0<h-p;)c=zr(c),h--;for(;0<p-h;)d=zr(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=zr(c),d=zr(d)}c=null}else c=null;null!==s&&Lr(i,l,s,c,!1),null!==u&&null!==f&&Lr(i,f,u,c,!0)}if("select"===(s=(l=r?Jr(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===s&&"file"===l.type)var v=Kn;else if(Un(l))if(Qn)v=or;else{v=nr;var g=tr}else(s=l.nodeName)&&"input"===s.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(v=rr);switch(v&&(v=v(e,r))?Wn(i,v,n,o):(g&&g(e,l,r),"focusout"===e&&(g=l._wrapperState)&&g.controlled&&"number"===l.type&&oe(l,"number",l.value)),g=r?Jr(r):window,e){case"focusin":(Un(g)||"true"===g.contentEditable)&&(hr=g,mr=r,vr=null);break;case"focusout":vr=mr=hr=null;break;case"mousedown":gr=!0;break;case"contextmenu":case"mouseup":case"dragend":gr=!1,yr(i,n,o);break;case"selectionchange":if(pr)break;case"keydown":case"keyup":yr(i,n,o)}var y;if(Mn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else In?Fn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Dn&&"ko"!==n.locale&&(In||"onCompositionStart"!==b?"onCompositionEnd"===b&&In&&(y=tn()):(Jt="value"in(Zt=o)?Zt.value:Zt.textContent,In=!0)),0<(g=Mr(r,b)).length&&(b=new xn(b,e,null,n,o),i.push({event:b,listeners:g}),(y||null!==(y=Nn(n)))&&(b.data=y))),(y=Ln?function(e,t){switch(e){case"compositionend":return Nn(t);case"keypress":return 32!==t.which?null:(Bn=!0,jn);case"textInput":return(e=t.data)===jn&&Bn?null:e;default:return null}}(e,n):function(e,t){if(In)return"compositionend"===e||!Mn&&Fn(e,t)?(e=tn(),en=Jt=Zt=null,In=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Dn&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))&&0<(r=Mr(r,"onBeforeInput")).length&&(o=new xn("onBeforeInput","beforeinput",null,n,o),i.push({event:o,listeners:r}),o.data=y)}Cr(i,t)}))}function Tr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Mr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,a=o.stateNode;5===o.tag&&null!==a&&(o=a,null!=(a=Ne(e,n))&&r.unshift(Tr(e,a,o)),null!=(a=Ne(e,t))&&r.push(Tr(e,a,o))),e=e.return}return r}function zr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Lr(e,t,n,r,o){for(var a=t._reactName,i=[];null!==n&&n!==r;){var l=n,s=l.alternate,u=l.stateNode;if(null!==s&&s===r)break;5===l.tag&&null!==u&&(l=u,o?null!=(s=Ne(n,a))&&i.unshift(Tr(n,s,l)):o||null!=(s=Ne(n,a))&&i.push(Tr(n,s,l))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}function Dr(){}var jr=null,Br=null;function Fr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Nr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Ir="function"==typeof setTimeout?setTimeout:void 0,Vr="function"==typeof clearTimeout?clearTimeout:void 0;function Ur(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function Wr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Hr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var qr=0,$r=Math.random().toString(36).slice(2),Gr="__reactFiber$"+$r,Kr="__reactProps$"+$r,Qr="__reactContainer$"+$r,Xr="__reactEvents$"+$r;function Yr(e){var t=e[Gr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Qr]||n[Gr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Hr(e);null!==e;){if(n=e[Gr])return n;e=Hr(e)}return t}n=(e=n).parentNode}return null}function Zr(e){return!(e=e[Gr]||e[Qr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function Jr(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function eo(e){return e[Kr]||null}function to(e){var t=e[Xr];return void 0===t&&(t=e[Xr]=new Set),t}var no=[],ro=-1;function oo(e){return{current:e}}function ao(e){0>ro||(e.current=no[ro],no[ro]=null,ro--)}function io(e,t){ro++,no[ro]=e.current,e.current=t}var lo={},so=oo(lo),uo=oo(!1),co=lo;function fo(e,t){var n=e.type.contextTypes;if(!n)return lo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function po(e){return null!=e.childContextTypes}function ho(){ao(uo),ao(so)}function mo(e,t,n){if(so.current!==lo)throw Error(i(168));io(so,t),io(uo,n)}function vo(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in e))throw Error(i(108,G(t)||"Unknown",a));return o({},n,r)}function go(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||lo,co=so.current,io(so,e),io(uo,uo.current),!0}function yo(e,t,n){var r=e.stateNode;if(!r)throw Error(i(169));n?(e=vo(e,t,co),r.__reactInternalMemoizedMergedChildContext=e,ao(uo),ao(so),io(so,e)):ao(uo),io(uo,n)}var bo=null,xo=null,wo=a.unstable_runWithPriority,ko=a.unstable_scheduleCallback,So=a.unstable_cancelCallback,Co=a.unstable_shouldYield,Eo=a.unstable_requestPaint,_o=a.unstable_now,Ao=a.unstable_getCurrentPriorityLevel,Oo=a.unstable_ImmediatePriority,Po=a.unstable_UserBlockingPriority,Ro=a.unstable_NormalPriority,To=a.unstable_LowPriority,Mo=a.unstable_IdlePriority,zo={},Lo=void 0!==Eo?Eo:function(){},Do=null,jo=null,Bo=!1,Fo=_o(),No=1e4>Fo?_o:function(){return _o()-Fo};function Io(){switch(Ao()){case Oo:return 99;case Po:return 98;case Ro:return 97;case To:return 96;case Mo:return 95;default:throw Error(i(332))}}function Vo(e){switch(e){case 99:return Oo;case 98:return Po;case 97:return Ro;case 96:return To;case 95:return Mo;default:throw Error(i(332))}}function Uo(e,t){return e=Vo(e),wo(e,t)}function Wo(e,t,n){return e=Vo(e),ko(e,t,n)}function Ho(){if(null!==jo){var e=jo;jo=null,So(e)}qo()}function qo(){if(!Bo&&null!==Do){Bo=!0;var e=0;try{var t=Do;Uo(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Do=null}catch(t){throw null!==Do&&(Do=Do.slice(e+1)),ko(Oo,Ho),t}finally{Bo=!1}}}var $o=w.ReactCurrentBatchConfig;function Go(e,t){if(e&&e.defaultProps){for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Ko=oo(null),Qo=null,Xo=null,Yo=null;function Zo(){Yo=Xo=Qo=null}function Jo(e){var t=Ko.current;ao(Ko),e.type._context._currentValue=t}function ea(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function ta(e,t){Qo=e,Yo=Xo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Mi=!0),e.firstContext=null)}function na(e,t){if(Yo!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Yo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Xo){if(null===Qo)throw Error(i(308));Xo=t,Qo.dependencies={lanes:0,firstContext:t,responders:null}}else Xo=Xo.next=t;return e._currentValue}var ra=!1;function oa(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function aa(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ia(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function la(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function sa(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===a?o=a=i:a=a.next=i,n=n.next}while(null!==n);null===a?o=a=t:a=a.next=t}else o=a=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function ua(e,t,n,r){var a=e.updateQueue;ra=!1;var i=a.firstBaseUpdate,l=a.lastBaseUpdate,s=a.shared.pending;if(null!==s){a.shared.pending=null;var u=s,c=u.next;u.next=null,null===l?i=c:l.next=c,l=u;var f=e.alternate;if(null!==f){var d=(f=f.updateQueue).lastBaseUpdate;d!==l&&(null===d?f.firstBaseUpdate=c:d.next=c,f.lastBaseUpdate=u)}}if(null!==i){for(d=a.baseState,l=0,f=c=u=null;;){s=i.lane;var p=i.eventTime;if((r&s)===s){null!==f&&(f=f.next={eventTime:p,lane:0,tag:i.tag,payload:i.payload,callback:i.callback,next:null});e:{var h=e,m=i;switch(s=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){d=h.call(p,d,s);break e}d=h;break e;case 3:h.flags=-4097&h.flags|64;case 0:if(null==(s="function"==typeof(h=m.payload)?h.call(p,d,s):h))break e;d=o({},d,s);break e;case 2:ra=!0}}null!==i.callback&&(e.flags|=32,null===(s=a.effects)?a.effects=[i]:s.push(i))}else p={eventTime:p,lane:s,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===f?(c=f=p,u=d):f=f.next=p,l|=s;if(null===(i=i.next)){if(null===(s=a.shared.pending))break;i=s.next,s.next=null,a.lastBaseUpdate=s,a.shared.pending=null}}null===f&&(u=d),a.baseState=u,a.firstBaseUpdate=c,a.lastBaseUpdate=f,Ll|=l,e.lanes=l,e.memoizedState=d}}function ca(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(i(191,o));o.call(r)}}}var fa=(new r.Component).refs;function da(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var pa={isMounted:function(e){return!!(e=e._reactInternals)&&Qe(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=as(),o=is(e),a=ia(r,o);a.payload=t,null!=n&&(a.callback=n),la(e,a),ls(e,o,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=as(),o=is(e),a=ia(r,o);a.tag=1,a.payload=t,null!=n&&(a.callback=n),la(e,a),ls(e,o,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=as(),r=is(e),o=ia(n,r);o.tag=2,null!=t&&(o.callback=t),la(e,o),ls(e,r,n)}};function ha(e,t,n,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!(t.prototype&&t.prototype.isPureReactComponent&&lr(n,r)&&lr(o,a))}function ma(e,t,n){var r=!1,o=lo,a=t.contextType;return"object"==typeof a&&null!==a?a=na(a):(o=po(t)?co:so.current,a=(r=null!=(r=t.contextTypes))?fo(e,o):lo),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=pa,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function va(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&pa.enqueueReplaceState(t,t.state,null)}function ga(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=fa,oa(e);var a=t.contextType;"object"==typeof a&&null!==a?o.context=na(a):(a=po(t)?co:so.current,o.context=fo(e,a)),ua(e,n,o,r),o.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(da(e,t,a,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&pa.enqueueReplaceState(o,o.state,null),ua(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4)}var ya=Array.isArray;function ba(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(i(309));var r=n.stateNode}if(!r)throw Error(i(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===fa&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw Error(i(284));if(!n._owner)throw Error(i(290,e))}return e}function xa(e,t){if("textarea"!==e.type)throw Error(i(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function wa(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Bs(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function l(t){return e&&null===t.alternate&&(t.flags=2),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=Vs(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function u(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=ba(e,t,n),r.return=e,r):((r=Fs(n.type,n.key,n.props,null,e.mode,r)).ref=ba(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Us(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,a){return null===t||7!==t.tag?((t=Ns(n,e.mode,r,a)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Vs(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case k:return(n=Fs(t.type,t.key,t.props,null,e.mode,n)).ref=ba(e,null,t),n.return=e,n;case S:return(t=Us(t,e.mode,n)).return=e,t}if(ya(t)||U(t))return(t=Ns(t,e.mode,n,null)).return=e,t;xa(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case k:return n.key===o?n.type===C?f(e,t,n.props.children,r,o):u(e,t,n,r):null;case S:return n.key===o?c(e,t,n,r):null}if(ya(n)||U(n))return null!==o?null:f(e,t,n,r,null);xa(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return s(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case k:return e=e.get(null===r.key?n:r.key)||null,r.type===C?f(t,e,r.props.children,o,r.key):u(t,e,r,o);case S:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(ya(r)||U(r))return f(t,e=e.get(n)||null,r,o,null);xa(t,r)}return null}function m(o,i,l,s){for(var u=null,c=null,f=i,m=i=0,v=null;null!==f&&m<l.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var g=p(o,f,l[m],s);if(null===g){null===f&&(f=v);break}e&&f&&null===g.alternate&&t(o,f),i=a(g,i,m),null===c?u=g:c.sibling=g,c=g,f=v}if(m===l.length)return n(o,f),u;if(null===f){for(;m<l.length;m++)null!==(f=d(o,l[m],s))&&(i=a(f,i,m),null===c?u=f:c.sibling=f,c=f);return u}for(f=r(o,f);m<l.length;m++)null!==(v=h(f,o,m,l[m],s))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),i=a(v,i,m),null===c?u=v:c.sibling=v,c=v);return e&&f.forEach((function(e){return t(o,e)})),u}function v(o,l,s,u){var c=U(s);if("function"!=typeof c)throw Error(i(150));if(null==(s=c.call(s)))throw Error(i(151));for(var f=c=null,m=l,v=l=0,g=null,y=s.next();null!==m&&!y.done;v++,y=s.next()){m.index>v?(g=m,m=null):g=m.sibling;var b=p(o,m,y.value,u);if(null===b){null===m&&(m=g);break}e&&m&&null===b.alternate&&t(o,m),l=a(b,l,v),null===f?c=b:f.sibling=b,f=b,m=g}if(y.done)return n(o,m),c;if(null===m){for(;!y.done;v++,y=s.next())null!==(y=d(o,y.value,u))&&(l=a(y,l,v),null===f?c=y:f.sibling=y,f=y);return c}for(m=r(o,m);!y.done;v++,y=s.next())null!==(y=h(m,o,v,y.value,u))&&(e&&null!==y.alternate&&m.delete(null===y.key?v:y.key),l=a(y,l,v),null===f?c=y:f.sibling=y,f=y);return e&&m.forEach((function(e){return t(o,e)})),c}return function(e,r,a,s){var u="object"==typeof a&&null!==a&&a.type===C&&null===a.key;u&&(a=a.props.children);var c="object"==typeof a&&null!==a;if(c)switch(a.$$typeof){case k:e:{for(c=a.key,u=r;null!==u;){if(u.key===c){switch(u.tag){case 7:if(a.type===C){n(e,u.sibling),(r=o(u,a.props.children)).return=e,e=r;break e}break;default:if(u.elementType===a.type){n(e,u.sibling),(r=o(u,a.props)).ref=ba(e,u,a),r.return=e,e=r;break e}}n(e,u);break}t(e,u),u=u.sibling}a.type===C?((r=Ns(a.props.children,e.mode,s,a.key)).return=e,e=r):((s=Fs(a.type,a.key,a.props,null,e.mode,s)).ref=ba(e,r,a),s.return=e,e=s)}return l(e);case S:e:{for(u=a.key;null!==r;){if(r.key===u){if(4===r.tag&&r.stateNode.containerInfo===a.containerInfo&&r.stateNode.implementation===a.implementation){n(e,r.sibling),(r=o(r,a.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Us(a,e.mode,s)).return=e,e=r}return l(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,a)).return=e,e=r):(n(e,r),(r=Vs(a,e.mode,s)).return=e,e=r),l(e);if(ya(a))return m(e,r,a,s);if(U(a))return v(e,r,a,s);if(c&&xa(e,a),void 0===a&&!u)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(i(152,G(e.type)||"Component"))}return n(e,r)}}var ka=wa(!0),Sa=wa(!1),Ca={},Ea=oo(Ca),_a=oo(Ca),Aa=oo(Ca);function Oa(e){if(e===Ca)throw Error(i(174));return e}function Pa(e,t){switch(io(Aa,t),io(_a,e),io(Ea,Ca),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:pe(null,"");break;default:t=pe(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}ao(Ea),io(Ea,t)}function Ra(){ao(Ea),ao(_a),ao(Aa)}function Ta(e){Oa(Aa.current);var t=Oa(Ea.current),n=pe(t,e.type);t!==n&&(io(_a,e),io(Ea,n))}function Ma(e){_a.current===e&&(ao(Ea),ao(_a))}var za=oo(0);function La(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Da=null,ja=null,Ba=!1;function Fa(e,t){var n=Ds(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Na(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Ia(e){if(Ba){var t=ja;if(t){var n=t;if(!Na(e,t)){if(!(t=Wr(n.nextSibling))||!Na(e,t))return e.flags=-1025&e.flags|2,Ba=!1,void(Da=e);Fa(Da,n)}Da=e,ja=Wr(t.firstChild)}else e.flags=-1025&e.flags|2,Ba=!1,Da=e}}function Va(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Da=e}function Ua(e){if(e!==Da)return!1;if(!Ba)return Va(e),Ba=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Nr(t,e.memoizedProps))for(t=ja;t;)Fa(e,t),t=Wr(t.nextSibling);if(Va(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){ja=Wr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}ja=null}}else ja=Da?Wr(e.stateNode.nextSibling):null;return!0}function Wa(){ja=Da=null,Ba=!1}var Ha=[];function qa(){for(var e=0;e<Ha.length;e++)Ha[e]._workInProgressVersionPrimary=null;Ha.length=0}var $a=w.ReactCurrentDispatcher,Ga=w.ReactCurrentBatchConfig,Ka=0,Qa=null,Xa=null,Ya=null,Za=!1,Ja=!1;function ei(){throw Error(i(321))}function ti(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ar(e[n],t[n]))return!1;return!0}function ni(e,t,n,r,o,a){if(Ka=a,Qa=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,$a.current=null===e||null===e.memoizedState?Oi:Pi,e=n(r,o),Ja){a=0;do{if(Ja=!1,!(25>a))throw Error(i(301));a+=1,Ya=Xa=null,t.updateQueue=null,$a.current=Ri,e=n(r,o)}while(Ja)}if($a.current=Ai,t=null!==Xa&&null!==Xa.next,Ka=0,Ya=Xa=Qa=null,Za=!1,t)throw Error(i(300));return e}function ri(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Ya?Qa.memoizedState=Ya=e:Ya=Ya.next=e,Ya}function oi(){if(null===Xa){var e=Qa.alternate;e=null!==e?e.memoizedState:null}else e=Xa.next;var t=null===Ya?Qa.memoizedState:Ya.next;if(null!==t)Ya=t,Xa=e;else{if(null===e)throw Error(i(310));e={memoizedState:(Xa=e).memoizedState,baseState:Xa.baseState,baseQueue:Xa.baseQueue,queue:Xa.queue,next:null},null===Ya?Qa.memoizedState=Ya=e:Ya=Ya.next=e}return Ya}function ai(e,t){return"function"==typeof t?t(e):t}function ii(e){var t=oi(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=Xa,o=r.baseQueue,a=n.pending;if(null!==a){if(null!==o){var l=o.next;o.next=a.next,a.next=l}r.baseQueue=o=a,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var s=l=a=null,u=o;do{var c=u.lane;if((Ka&c)===c)null!==s&&(s=s.next={lane:0,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null}),r=u.eagerReducer===e?u.eagerState:e(r,u.action);else{var f={lane:c,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null};null===s?(l=s=f,a=r):s=s.next=f,Qa.lanes|=c,Ll|=c}u=u.next}while(null!==u&&u!==o);null===s?a=r:s.next=l,ar(r,t.memoizedState)||(Mi=!0),t.memoizedState=r,t.baseState=a,t.baseQueue=s,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function li(e){var t=oi(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,a=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{a=e(a,l.action),l=l.next}while(l!==o);ar(a,t.memoizedState)||(Mi=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function si(e,t,n){var r=t._getVersion;r=r(t._source);var o=t._workInProgressVersionPrimary;if(null!==o?e=o===r:(e=e.mutableReadLanes,(e=(Ka&e)===e)&&(t._workInProgressVersionPrimary=r,Ha.push(t))),e)return n(t._source);throw Ha.push(t),Error(i(350))}function ui(e,t,n,r){var o=_l;if(null===o)throw Error(i(349));var a=t._getVersion,l=a(t._source),s=$a.current,u=s.useState((function(){return si(o,t,n)})),c=u[1],f=u[0];u=Ya;var d=e.memoizedState,p=d.refs,h=p.getSnapshot,m=d.source;d=d.subscribe;var v=Qa;return e.memoizedState={refs:p,source:t,subscribe:r},s.useEffect((function(){p.getSnapshot=n,p.setSnapshot=c;var e=a(t._source);if(!ar(l,e)){e=n(t._source),ar(f,e)||(c(e),e=is(v),o.mutableReadLanes|=e&o.pendingLanes),e=o.mutableReadLanes,o.entangledLanes|=e;for(var r=o.entanglements,i=e;0<i;){var s=31-Ut(i),u=1<<s;r[s]|=e,i&=~u}}}),[n,t,r]),s.useEffect((function(){return r(t._source,(function(){var e=p.getSnapshot,n=p.setSnapshot;try{n(e(t._source));var r=is(v);o.mutableReadLanes|=r&o.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),ar(h,n)&&ar(m,t)&&ar(d,r)||((e={pending:null,dispatch:null,lastRenderedReducer:ai,lastRenderedState:f}).dispatch=c=_i.bind(null,Qa,e),u.queue=e,u.baseQueue=null,f=si(o,t,n),u.memoizedState=u.baseState=f),f}function ci(e,t,n){return ui(oi(),e,t,n)}function fi(e){var t=ri();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:ai,lastRenderedState:e}).dispatch=_i.bind(null,Qa,e),[t.memoizedState,e]}function di(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Qa.updateQueue)?(t={lastEffect:null},Qa.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function pi(e){return e={current:e},ri().memoizedState=e}function hi(){return oi().memoizedState}function mi(e,t,n,r){var o=ri();Qa.flags|=e,o.memoizedState=di(1|t,n,void 0,void 0===r?null:r)}function vi(e,t,n,r){var o=oi();r=void 0===r?null:r;var a=void 0;if(null!==Xa){var i=Xa.memoizedState;if(a=i.destroy,null!==r&&ti(r,i.deps))return void di(t,n,a,r)}Qa.flags|=e,o.memoizedState=di(1|t,n,a,r)}function gi(e,t){return mi(516,4,e,t)}function yi(e,t){return vi(516,4,e,t)}function bi(e,t){return vi(4,2,e,t)}function xi(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function wi(e,t,n){return n=null!=n?n.concat([e]):null,vi(4,2,xi.bind(null,t,e),n)}function ki(){}function Si(e,t){var n=oi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ti(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Ci(e,t){var n=oi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ti(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Ei(e,t){var n=Io();Uo(98>n?98:n,(function(){e(!0)})),Uo(97<n?97:n,(function(){var n=Ga.transition;Ga.transition=1;try{e(!1),t()}finally{Ga.transition=n}}))}function _i(e,t,n){var r=as(),o=is(e),a={lane:o,action:n,eagerReducer:null,eagerState:null,next:null},i=t.pending;if(null===i?a.next=a:(a.next=i.next,i.next=a),t.pending=a,i=e.alternate,e===Qa||null!==i&&i===Qa)Ja=Za=!0;else{if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var l=t.lastRenderedState,s=i(l,n);if(a.eagerReducer=i,a.eagerState=s,ar(s,l))return}catch(e){}ls(e,o,r)}}var Ai={readContext:na,useCallback:ei,useContext:ei,useEffect:ei,useImperativeHandle:ei,useLayoutEffect:ei,useMemo:ei,useReducer:ei,useRef:ei,useState:ei,useDebugValue:ei,useDeferredValue:ei,useTransition:ei,useMutableSource:ei,useOpaqueIdentifier:ei,unstable_isNewReconciler:!1},Oi={readContext:na,useCallback:function(e,t){return ri().memoizedState=[e,void 0===t?null:t],e},useContext:na,useEffect:gi,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,mi(4,2,xi.bind(null,t,e),n)},useLayoutEffect:function(e,t){return mi(4,2,e,t)},useMemo:function(e,t){var n=ri();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=ri();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=_i.bind(null,Qa,e),[r.memoizedState,e]},useRef:pi,useState:fi,useDebugValue:ki,useDeferredValue:function(e){var t=fi(e),n=t[0],r=t[1];return gi((function(){var t=Ga.transition;Ga.transition=1;try{r(e)}finally{Ga.transition=t}}),[e]),n},useTransition:function(){var e=fi(!1),t=e[0];return pi(e=Ei.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=ri();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},ui(r,e,t,n)},useOpaqueIdentifier:function(){if(Ba){var e=!1,t=function(e){return{$$typeof:D,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(qr++).toString(36))),Error(i(355))})),n=fi(t)[1];return 0==(2&Qa.mode)&&(Qa.flags|=516,di(5,(function(){n("r:"+(qr++).toString(36))}),void 0,null)),t}return fi(t="r:"+(qr++).toString(36)),t},unstable_isNewReconciler:!1},Pi={readContext:na,useCallback:Si,useContext:na,useEffect:yi,useImperativeHandle:wi,useLayoutEffect:bi,useMemo:Ci,useReducer:ii,useRef:hi,useState:function(){return ii(ai)},useDebugValue:ki,useDeferredValue:function(e){var t=ii(ai),n=t[0],r=t[1];return yi((function(){var t=Ga.transition;Ga.transition=1;try{r(e)}finally{Ga.transition=t}}),[e]),n},useTransition:function(){var e=ii(ai)[0];return[hi().current,e]},useMutableSource:ci,useOpaqueIdentifier:function(){return ii(ai)[0]},unstable_isNewReconciler:!1},Ri={readContext:na,useCallback:Si,useContext:na,useEffect:yi,useImperativeHandle:wi,useLayoutEffect:bi,useMemo:Ci,useReducer:li,useRef:hi,useState:function(){return li(ai)},useDebugValue:ki,useDeferredValue:function(e){var t=li(ai),n=t[0],r=t[1];return yi((function(){var t=Ga.transition;Ga.transition=1;try{r(e)}finally{Ga.transition=t}}),[e]),n},useTransition:function(){var e=li(ai)[0];return[hi().current,e]},useMutableSource:ci,useOpaqueIdentifier:function(){return li(ai)[0]},unstable_isNewReconciler:!1},Ti=w.ReactCurrentOwner,Mi=!1;function zi(e,t,n,r){t.child=null===e?Sa(t,null,n,r):ka(t,e.child,n,r)}function Li(e,t,n,r,o){n=n.render;var a=t.ref;return ta(t,o),r=ni(e,t,n,r,a,o),null===e||Mi?(t.flags|=1,zi(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,Zi(e,t,o))}function Di(e,t,n,r,o,a){if(null===e){var i=n.type;return"function"!=typeof i||js(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Fs(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,ji(e,t,i,r,o,a))}return i=e.child,0==(o&a)&&(o=i.memoizedProps,(n=null!==(n=n.compare)?n:lr)(o,r)&&e.ref===t.ref)?Zi(e,t,a):(t.flags|=1,(e=Bs(i,r)).ref=t.ref,e.return=t,t.child=e)}function ji(e,t,n,r,o,a){if(null!==e&&lr(e.memoizedProps,r)&&e.ref===t.ref){if(Mi=!1,0==(a&o))return t.lanes=e.lanes,Zi(e,t,a);0!=(16384&e.flags)&&(Mi=!0)}return Ni(e,t,n,r,a)}function Bi(e,t,n){var r=t.pendingProps,o=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},ps(0,n);else{if(0==(1073741824&n))return e=null!==a?a.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},ps(0,e),null;t.memoizedState={baseLanes:0},ps(0,null!==a?a.baseLanes:n)}else null!==a?(r=a.baseLanes|n,t.memoizedState=null):r=n,ps(0,r);return zi(e,t,o,n),t.child}function Fi(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function Ni(e,t,n,r,o){var a=po(n)?co:so.current;return a=fo(t,a),ta(t,o),n=ni(e,t,n,r,a,o),null===e||Mi?(t.flags|=1,zi(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,Zi(e,t,o))}function Ii(e,t,n,r,o){if(po(n)){var a=!0;go(t)}else a=!1;if(ta(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),ma(t,n,r),ga(t,n,r,o),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var s=i.context,u=n.contextType;u="object"==typeof u&&null!==u?na(u):fo(t,u=po(n)?co:so.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||s!==u)&&va(t,i,r,u),ra=!1;var d=t.memoizedState;i.state=d,ua(t,r,i,o),s=t.memoizedState,l!==r||d!==s||uo.current||ra?("function"==typeof c&&(da(t,n,c,r),s=t.memoizedState),(l=ra||ha(t,n,l,r,d,s,u))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4)):("function"==typeof i.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=s),i.props=r,i.state=s,i.context=u,r=l):("function"==typeof i.componentDidMount&&(t.flags|=4),r=!1)}else{i=t.stateNode,aa(e,t),l=t.memoizedProps,u=t.type===t.elementType?l:Go(t.type,l),i.props=u,f=t.pendingProps,d=i.context,s="object"==typeof(s=n.contextType)&&null!==s?na(s):fo(t,s=po(n)?co:so.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==f||d!==s)&&va(t,i,r,s),ra=!1,d=t.memoizedState,i.state=d,ua(t,r,i,o);var h=t.memoizedState;l!==f||d!==h||uo.current||ra?("function"==typeof p&&(da(t,n,p,r),h=t.memoizedState),(u=ra||ha(t,n,u,r,d,h,s))?(c||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,h,s),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,h,s)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=h),i.props=r,i.state=h,i.context=s,r=u):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),r=!1)}return Vi(e,t,n,r,a,o)}function Vi(e,t,n,r,o,a){Fi(e,t);var i=0!=(64&t.flags);if(!r&&!i)return o&&yo(t,n,!1),Zi(e,t,a);r=t.stateNode,Ti.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=ka(t,e.child,null,a),t.child=ka(t,null,l,a)):zi(e,t,l,a),t.memoizedState=r.state,o&&yo(t,n,!0),t.child}function Ui(e){var t=e.stateNode;t.pendingContext?mo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&mo(0,t.context,!1),Pa(e,t.containerInfo)}var Wi,Hi,qi,$i={dehydrated:null,retryLane:0};function Gi(e,t,n){var r,o=t.pendingProps,a=za.current,i=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&a)),r?(i=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(a|=1),io(za,1&a),null===e?(void 0!==o.fallback&&Ia(t),e=o.children,a=o.fallback,i?(e=Ki(t,e,a,n),t.child.memoizedState={baseLanes:n},t.memoizedState=$i,e):"number"==typeof o.unstable_expectedLoadTime?(e=Ki(t,e,a,n),t.child.memoizedState={baseLanes:n},t.memoizedState=$i,t.lanes=33554432,e):((n=Is({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,i?(o=function(e,t,n,r,o){var a=t.mode,i=e.child;e=i.sibling;var l={mode:"hidden",children:n};return 0==(2&a)&&t.child!==i?((n=t.child).childLanes=0,n.pendingProps=l,null!==(i=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=i,i.nextEffect=null):t.firstEffect=t.lastEffect=null):n=Bs(i,l),null!==e?r=Bs(e,r):(r=Ns(r,a,o,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}(e,t,o.children,o.fallback,n),i=t.child,a=e.child.memoizedState,i.memoizedState=null===a?{baseLanes:n}:{baseLanes:a.baseLanes|n},i.childLanes=e.childLanes&~n,t.memoizedState=$i,o):(n=function(e,t,n,r){var o=e.child;return e=o.sibling,n=Bs(o,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,o.children,n),t.memoizedState=null,n))}function Ki(e,t,n,r){var o=e.mode,a=e.child;return t={mode:"hidden",children:t},0==(2&o)&&null!==a?(a.childLanes=0,a.pendingProps=t):a=Is(t,o,0,null),n=Ns(n,o,r,null),a.return=e,n.return=e,a.sibling=n,e.child=a,n}function Qi(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),ea(e.return,t)}function Xi(e,t,n,r,o,a){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o,lastEffect:a}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=o,i.lastEffect=a)}function Yi(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(zi(e,t,r.children,n),0!=(2&(r=za.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Qi(e,n);else if(19===e.tag)Qi(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(io(za,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===La(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Xi(t,!1,o,n,a,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===La(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Xi(t,!0,n,null,a,t.lastEffect);break;case"together":Xi(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Zi(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Ll|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=Bs(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Bs(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function Ji(e,t){if(!Ba)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function el(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return po(t.type)&&ho(),null;case 3:return Ra(),ao(uo),ao(so),qa(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Ua(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:Ma(t);var a=Oa(Aa.current);if(n=t.type,null!==e&&null!=t.stateNode)Hi(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(i(166));return null}if(e=Oa(Ea.current),Ua(t)){r=t.stateNode,n=t.type;var l=t.memoizedProps;switch(r[Gr]=t,r[Kr]=l,n){case"dialog":Er("cancel",r),Er("close",r);break;case"iframe":case"object":case"embed":Er("load",r);break;case"video":case"audio":for(e=0;e<wr.length;e++)Er(wr[e],r);break;case"source":Er("error",r);break;case"img":case"image":case"link":Er("error",r),Er("load",r);break;case"details":Er("toggle",r);break;case"input":ee(r,l),Er("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!l.multiple},Er("invalid",r);break;case"textarea":se(r,l),Er("invalid",r)}for(var u in Se(n,l),e=null,l)l.hasOwnProperty(u)&&(a=l[u],"children"===u?"string"==typeof a?r.textContent!==a&&(e=["children",a]):"number"==typeof a&&r.textContent!==""+a&&(e=["children",""+a]):s.hasOwnProperty(u)&&null!=a&&"onScroll"===u&&Er("scroll",r));switch(n){case"input":X(r),re(r,l,!0);break;case"textarea":X(r),ce(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=Dr)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(u=9===a.nodeType?a:a.ownerDocument,e===fe&&(e=de(n)),e===fe?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(n,{is:r.is}):(e=u.createElement(n),"select"===n&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,n),e[Gr]=t,e[Kr]=r,Wi(e,t),t.stateNode=e,u=Ce(n,r),n){case"dialog":Er("cancel",e),Er("close",e),a=r;break;case"iframe":case"object":case"embed":Er("load",e),a=r;break;case"video":case"audio":for(a=0;a<wr.length;a++)Er(wr[a],e);a=r;break;case"source":Er("error",e),a=r;break;case"img":case"image":case"link":Er("error",e),Er("load",e),a=r;break;case"details":Er("toggle",e),a=r;break;case"input":ee(e,r),a=J(e,r),Er("invalid",e);break;case"option":a=ae(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=o({},r,{value:void 0}),Er("invalid",e);break;case"textarea":se(e,r),a=le(e,r),Er("invalid",e);break;default:a=r}Se(n,a);var c=a;for(l in c)if(c.hasOwnProperty(l)){var f=c[l];"style"===l?we(e,f):"dangerouslySetInnerHTML"===l?null!=(f=f?f.__html:void 0)&&ve(e,f):"children"===l?"string"==typeof f?("textarea"!==n||""!==f)&&ge(e,f):"number"==typeof f&&ge(e,""+f):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(s.hasOwnProperty(l)?null!=f&&"onScroll"===l&&Er("scroll",e):null!=f&&x(e,l,f,u))}switch(n){case"input":X(e),re(e,r,!1);break;case"textarea":X(e),ce(e);break;case"option":null!=r.value&&e.setAttribute("value",""+K(r.value));break;case"select":e.multiple=!!r.multiple,null!=(l=r.value)?ie(e,!!r.multiple,l,!1):null!=r.defaultValue&&ie(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Dr)}Fr(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)qi(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(i(166));n=Oa(Aa.current),Oa(Ea.current),Ua(t)?(r=t.stateNode,n=t.memoizedProps,r[Gr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Gr]=t,t.stateNode=r)}return null;case 13:return ao(za),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Ua(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&za.current)?0===Tl&&(Tl=3):(0!==Tl&&3!==Tl||(Tl=4),null===_l||0==(134217727&Ll)&&0==(134217727&Dl)||fs(_l,Ol))),(r||n)&&(t.flags|=4),null);case 4:return Ra(),null===e&&Ar(t.stateNode.containerInfo),null;case 10:return Jo(t),null;case 17:return po(t.type)&&ho(),null;case 19:if(ao(za),null===(r=t.memoizedState))return null;if(l=0!=(64&t.flags),null===(u=r.rendering))if(l)Ji(r,!1);else{if(0!==Tl||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(u=La(e))){for(t.flags|=64,Ji(r,!1),null!==(l=u.updateQueue)&&(t.updateQueue=l,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(l=n).flags&=2,l.nextEffect=null,l.firstEffect=null,l.lastEffect=null,null===(u=l.alternate)?(l.childLanes=0,l.lanes=e,l.child=null,l.memoizedProps=null,l.memoizedState=null,l.updateQueue=null,l.dependencies=null,l.stateNode=null):(l.childLanes=u.childLanes,l.lanes=u.lanes,l.child=u.child,l.memoizedProps=u.memoizedProps,l.memoizedState=u.memoizedState,l.updateQueue=u.updateQueue,l.type=u.type,e=u.dependencies,l.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return io(za,1&za.current|2),t.child}e=e.sibling}null!==r.tail&&No()>Nl&&(t.flags|=64,l=!0,Ji(r,!1),t.lanes=33554432)}else{if(!l)if(null!==(e=La(u))){if(t.flags|=64,l=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Ji(r,!0),null===r.tail&&"hidden"===r.tailMode&&!u.alternate&&!Ba)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*No()-r.renderingStartTime>Nl&&1073741824!==n&&(t.flags|=64,l=!0,Ji(r,!1),t.lanes=33554432);r.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=r.last)?n.sibling=u:t.child=u,r.last=u)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=No(),n.sibling=null,t=za.current,io(za,l?1&t|2:1&t),n):null;case 23:case 24:return hs(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(i(156,t.tag))}function tl(e){switch(e.tag){case 1:po(e.type)&&ho();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Ra(),ao(uo),ao(so),qa(),0!=(64&(t=e.flags)))throw Error(i(285));return e.flags=-4097&t|64,e;case 5:return Ma(e),null;case 13:return ao(za),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return ao(za),null;case 4:return Ra(),null;case 10:return Jo(e),null;case 23:case 24:return hs(),null;default:return null}}function nl(e,t){try{var n="",r=t;do{n+=$(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o}}function rl(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Wi=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Hi=function(e,t,n,r){var a=e.memoizedProps;if(a!==r){e=t.stateNode,Oa(Ea.current);var i,l=null;switch(n){case"input":a=J(e,a),r=J(e,r),l=[];break;case"option":a=ae(e,a),r=ae(e,r),l=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),l=[];break;case"textarea":a=le(e,a),r=le(e,r),l=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=Dr)}for(f in Se(n,r),n=null,a)if(!r.hasOwnProperty(f)&&a.hasOwnProperty(f)&&null!=a[f])if("style"===f){var u=a[f];for(i in u)u.hasOwnProperty(i)&&(n||(n={}),n[i]="")}else"dangerouslySetInnerHTML"!==f&&"children"!==f&&"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(s.hasOwnProperty(f)?l||(l=[]):(l=l||[]).push(f,null));for(f in r){var c=r[f];if(u=null!=a?a[f]:void 0,r.hasOwnProperty(f)&&c!==u&&(null!=c||null!=u))if("style"===f)if(u){for(i in u)!u.hasOwnProperty(i)||c&&c.hasOwnProperty(i)||(n||(n={}),n[i]="");for(i in c)c.hasOwnProperty(i)&&u[i]!==c[i]&&(n||(n={}),n[i]=c[i])}else n||(l||(l=[]),l.push(f,n)),n=c;else"dangerouslySetInnerHTML"===f?(c=c?c.__html:void 0,u=u?u.__html:void 0,null!=c&&u!==c&&(l=l||[]).push(f,c)):"children"===f?"string"!=typeof c&&"number"!=typeof c||(l=l||[]).push(f,""+c):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&(s.hasOwnProperty(f)?(null!=c&&"onScroll"===f&&Er("scroll",e),l||u===c||(l=[])):"object"==typeof c&&null!==c&&c.$$typeof===D?c.toString():(l=l||[]).push(f,c))}n&&(l=l||[]).push("style",n);var f=l;(t.updateQueue=f)&&(t.flags|=4)}},qi=function(e,t,n,r){n!==r&&(t.flags|=4)};var ol="function"==typeof WeakMap?WeakMap:Map;function al(e,t,n){(n=ia(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Wl||(Wl=!0,Hl=r),rl(0,t)},n}function il(e,t,n){(n=ia(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return rl(0,t),r(o)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===ql?ql=new Set([this]):ql.add(this),rl(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var ll="function"==typeof WeakSet?WeakSet:Set;function sl(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Ts(e,t)}else t.current=null}function ul(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Go(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Ur(t.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(i(163))}function cl(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var o=e;r=o.next,0!=(4&(o=o.tag))&&0!=(1&o)&&(Os(n,e),As(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Go(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&ca(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}ca(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&Fr(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&xt(n)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(i(163))}function fl(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=xe("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function dl(e,t){if(xo&&"function"==typeof xo.onCommitFiberUnmount)try{xo.onCommitFiberUnmount(bo,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,o=r.destroy;if(r=r.tag,void 0!==o)if(0!=(4&r))Os(t,n);else{r=t;try{o()}catch(e){Ts(r,e)}}n=n.next}while(n!==e)}break;case 1:if(sl(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Ts(t,e)}break;case 5:sl(t);break;case 4:yl(e,t)}}function pl(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function hl(e){return 5===e.tag||3===e.tag||4===e.tag}function ml(e){e:{for(var t=e.return;null!==t;){if(hl(t))break e;t=t.return}throw Error(i(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(i(161))}16&n.flags&&(ge(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||hl(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?vl(e,n,t):gl(e,n,t)}function vl(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Dr));else if(4!==r&&null!==(e=e.child))for(vl(e,t,n),e=e.sibling;null!==e;)vl(e,t,n),e=e.sibling}function gl(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(gl(e,t,n),e=e.sibling;null!==e;)gl(e,t,n),e=e.sibling}function yl(e,t){for(var n,r,o=t,a=!1;;){if(!a){a=o.return;e:for(;;){if(null===a)throw Error(i(160));switch(n=a.stateNode,a.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}a=a.return}a=!0}if(5===o.tag||6===o.tag){e:for(var l=e,s=o,u=s;;)if(dl(l,u),null!==u.child&&4!==u.tag)u.child.return=u,u=u.child;else{if(u===s)break e;for(;null===u.sibling;){if(null===u.return||u.return===s)break e;u=u.return}u.sibling.return=u.return,u=u.sibling}r?(l=n,s=o.stateNode,8===l.nodeType?l.parentNode.removeChild(s):l.removeChild(s)):n.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){n=o.stateNode.containerInfo,r=!0,o.child.return=o,o=o.child;continue}}else if(dl(e,o),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(a=!1)}o.sibling.return=o.return,o=o.sibling}}function bl(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var o=null!==e?e.memoizedProps:r;e=t.type;var a=t.updateQueue;if(t.updateQueue=null,null!==a){for(n[Kr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),Ce(e,o),t=Ce(e,r),o=0;o<a.length;o+=2){var l=a[o],s=a[o+1];"style"===l?we(n,s):"dangerouslySetInnerHTML"===l?ve(n,s):"children"===l?ge(n,s):x(n,l,s,t)}switch(e){case"input":ne(n,r);break;case"textarea":ue(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(a=r.value)?ie(n,!!r.multiple,a,!1):e!==!!r.multiple&&(null!=r.defaultValue?ie(n,!!r.multiple,r.defaultValue,!0):ie(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(i(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,xt(n.containerInfo)));case 12:return;case 13:return null!==t.memoizedState&&(Fl=No(),fl(t.child,!0)),void xl(t);case 19:return void xl(t);case 17:return;case 23:case 24:return void fl(t,null!==t.memoizedState)}throw Error(i(163))}function xl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new ll),t.forEach((function(t){var r=zs.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function wl(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var kl=Math.ceil,Sl=w.ReactCurrentDispatcher,Cl=w.ReactCurrentOwner,El=0,_l=null,Al=null,Ol=0,Pl=0,Rl=oo(0),Tl=0,Ml=null,zl=0,Ll=0,Dl=0,jl=0,Bl=null,Fl=0,Nl=1/0;function Il(){Nl=No()+500}var Vl,Ul=null,Wl=!1,Hl=null,ql=null,$l=!1,Gl=null,Kl=90,Ql=[],Xl=[],Yl=null,Zl=0,Jl=null,es=-1,ts=0,ns=0,rs=null,os=!1;function as(){return 0!=(48&El)?No():-1!==es?es:es=No()}function is(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Io()?1:2;if(0===ts&&(ts=zl),0!==$o.transition){0!==ns&&(ns=null!==Bl?Bl.pendingLanes:0),e=ts;var t=4186112&~ns;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=Io(),e=Ft(0!=(4&El)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),ts)}function ls(e,t,n){if(50<Zl)throw Zl=0,Jl=null,Error(i(185));if(null===(e=ss(e,t)))return null;Vt(e,t,n),e===_l&&(Dl|=t,4===Tl&&fs(e,Ol));var r=Io();1===t?0!=(8&El)&&0==(48&El)?ds(e):(us(e,n),0===El&&(Il(),Ho())):(0==(4&El)||98!==r&&99!==r||(null===Yl?Yl=new Set([e]):Yl.add(e)),us(e,n)),Bl=e}function ss(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function us(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,o=e.pingedLanes,a=e.expirationTimes,l=e.pendingLanes;0<l;){var s=31-Ut(l),u=1<<s,c=a[s];if(-1===c){if(0==(u&r)||0!=(u&o)){c=t,Dt(u);var f=Lt;a[s]=10<=f?c+250:6<=f?c+5e3:-1}}else c<=t&&(e.expiredLanes|=u);l&=~u}if(r=jt(e,e===_l?Ol:0),t=Lt,0===r)null!==n&&(n!==zo&&So(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==zo&&So(n)}15===t?(n=ds.bind(null,e),null===Do?(Do=[n],jo=ko(Oo,qo)):Do.push(n),n=zo):n=14===t?Wo(99,ds.bind(null,e)):Wo(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(i(358,e))}}(t),cs.bind(null,e)),e.callbackPriority=t,e.callbackNode=n}}function cs(e){if(es=-1,ns=ts=0,0!=(48&El))throw Error(i(327));var t=e.callbackNode;if(_s()&&e.callbackNode!==t)return null;var n=jt(e,e===_l?Ol:0);if(0===n)return null;var r=n,o=El;El|=16;var a=gs();for(_l===e&&Ol===r||(Il(),ms(e,r));;)try{xs();break}catch(t){vs(e,t)}if(Zo(),Sl.current=a,El=o,null!==Al?r=0:(_l=null,Ol=0,r=Tl),0!=(zl&Dl))ms(e,0);else if(0!==r){if(2===r&&(El|=64,e.hydrate&&(e.hydrate=!1,Ur(e.containerInfo)),0!==(n=Bt(e))&&(r=ys(e,n))),1===r)throw t=Ml,ms(e,0),fs(e,n),us(e,No()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(i(345));case 2:Ss(e);break;case 3:if(fs(e,n),(62914560&n)===n&&10<(r=Fl+500-No())){if(0!==jt(e,0))break;if(((o=e.suspendedLanes)&n)!==n){as(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=Ir(Ss.bind(null,e),r);break}Ss(e);break;case 4:if(fs(e,n),(4186112&n)===n)break;for(r=e.eventTimes,o=-1;0<n;){var l=31-Ut(n);a=1<<l,(l=r[l])>o&&(o=l),n&=~a}if(n=o,10<(n=(120>(n=No()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*kl(n/1960))-n)){e.timeoutHandle=Ir(Ss.bind(null,e),n);break}Ss(e);break;case 5:Ss(e);break;default:throw Error(i(329))}}return us(e,No()),e.callbackNode===t?cs.bind(null,e):null}function fs(e,t){for(t&=~jl,t&=~Dl,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Ut(t),r=1<<n;e[n]=-1,t&=~r}}function ds(e){if(0!=(48&El))throw Error(i(327));if(_s(),e===_l&&0!=(e.expiredLanes&Ol)){var t=Ol,n=ys(e,t);0!=(zl&Dl)&&(n=ys(e,t=jt(e,t)))}else n=ys(e,t=jt(e,0));if(0!==e.tag&&2===n&&(El|=64,e.hydrate&&(e.hydrate=!1,Ur(e.containerInfo)),0!==(t=Bt(e))&&(n=ys(e,t))),1===n)throw n=Ml,ms(e,0),fs(e,t),us(e,No()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Ss(e),us(e,No()),null}function ps(e,t){io(Rl,Pl),Pl|=t,zl|=t}function hs(){Pl=Rl.current,ao(Rl)}function ms(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Vr(n)),null!==Al)for(n=Al.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&ho();break;case 3:Ra(),ao(uo),ao(so),qa();break;case 5:Ma(r);break;case 4:Ra();break;case 13:case 19:ao(za);break;case 10:Jo(r);break;case 23:case 24:hs()}n=n.return}_l=e,Al=Bs(e.current,null),Ol=Pl=zl=t,Tl=0,Ml=null,jl=Dl=Ll=0}function vs(e,t){for(;;){var n=Al;try{if(Zo(),$a.current=Ai,Za){for(var r=Qa.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}Za=!1}if(Ka=0,Ya=Xa=Qa=null,Ja=!1,Cl.current=null,null===n||null===n.return){Tl=1,Ml=t,Al=null;break}e:{var a=e,i=n.return,l=n,s=t;if(t=Ol,l.flags|=2048,l.firstEffect=l.lastEffect=null,null!==s&&"object"==typeof s&&"function"==typeof s.then){var u=s;if(0==(2&l.mode)){var c=l.alternate;c?(l.updateQueue=c.updateQueue,l.memoizedState=c.memoizedState,l.lanes=c.lanes):(l.updateQueue=null,l.memoizedState=null)}var f=0!=(1&za.current),d=i;do{var p;if(p=13===d.tag){var h=d.memoizedState;if(null!==h)p=null!==h.dehydrated;else{var m=d.memoizedProps;p=void 0!==m.fallback&&(!0!==m.unstable_avoidThisFallback||!f)}}if(p){var v=d.updateQueue;if(null===v){var g=new Set;g.add(u),d.updateQueue=g}else v.add(u);if(0==(2&d.mode)){if(d.flags|=64,l.flags|=16384,l.flags&=-2981,1===l.tag)if(null===l.alternate)l.tag=17;else{var y=ia(-1,1);y.tag=2,la(l,y)}l.lanes|=1;break e}s=void 0,l=t;var b=a.pingCache;if(null===b?(b=a.pingCache=new ol,s=new Set,b.set(u,s)):void 0===(s=b.get(u))&&(s=new Set,b.set(u,s)),!s.has(l)){s.add(l);var x=Ms.bind(null,a,u,l);u.then(x,x)}d.flags|=4096,d.lanes=t;break e}d=d.return}while(null!==d);s=Error((G(l.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Tl&&(Tl=2),s=nl(s,l),d=i;do{switch(d.tag){case 3:a=s,d.flags|=4096,t&=-t,d.lanes|=t,sa(d,al(0,a,t));break e;case 1:a=s;var w=d.type,k=d.stateNode;if(0==(64&d.flags)&&("function"==typeof w.getDerivedStateFromError||null!==k&&"function"==typeof k.componentDidCatch&&(null===ql||!ql.has(k)))){d.flags|=4096,t&=-t,d.lanes|=t,sa(d,il(d,a,t));break e}}d=d.return}while(null!==d)}ks(n)}catch(e){t=e,Al===n&&null!==n&&(Al=n=n.return);continue}break}}function gs(){var e=Sl.current;return Sl.current=Ai,null===e?Ai:e}function ys(e,t){var n=El;El|=16;var r=gs();for(_l===e&&Ol===t||ms(e,t);;)try{bs();break}catch(t){vs(e,t)}if(Zo(),El=n,Sl.current=r,null!==Al)throw Error(i(261));return _l=null,Ol=0,Tl}function bs(){for(;null!==Al;)ws(Al)}function xs(){for(;null!==Al&&!Co();)ws(Al)}function ws(e){var t=Vl(e.alternate,e,Pl);e.memoizedProps=e.pendingProps,null===t?ks(e):Al=t,Cl.current=null}function ks(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=el(n,t,Pl)))return void(Al=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Pl)||0==(4&n.mode)){for(var r=0,o=n.child;null!==o;)r|=o.lanes|o.childLanes,o=o.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=tl(t)))return n.flags&=2047,void(Al=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Al=t);Al=t=e}while(null!==t);0===Tl&&(Tl=5)}function Ss(e){var t=Io();return Uo(99,Cs.bind(null,e,t)),null}function Cs(e,t){do{_s()}while(null!==Gl);if(0!=(48&El))throw Error(i(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(i(177));e.callbackNode=null;var r=n.lanes|n.childLanes,o=r,a=e.pendingLanes&~o;e.pendingLanes=o,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=o,e.mutableReadLanes&=o,e.entangledLanes&=o,o=e.entanglements;for(var l=e.eventTimes,s=e.expirationTimes;0<a;){var u=31-Ut(a),c=1<<u;o[u]=0,l[u]=-1,s[u]=-1,a&=~c}if(null!==Yl&&0==(24&r)&&Yl.has(e)&&Yl.delete(e),e===_l&&(Al=_l=null,Ol=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(o=El,El|=32,Cl.current=null,jr=Gt,dr(l=fr())){if("selectionStart"in l)s={start:l.selectionStart,end:l.selectionEnd};else e:if(s=(s=l.ownerDocument)&&s.defaultView||window,(c=s.getSelection&&s.getSelection())&&0!==c.rangeCount){s=c.anchorNode,a=c.anchorOffset,u=c.focusNode,c=c.focusOffset;try{s.nodeType,u.nodeType}catch(e){s=null;break e}var f=0,d=-1,p=-1,h=0,m=0,v=l,g=null;t:for(;;){for(var y;v!==s||0!==a&&3!==v.nodeType||(d=f+a),v!==u||0!==c&&3!==v.nodeType||(p=f+c),3===v.nodeType&&(f+=v.nodeValue.length),null!==(y=v.firstChild);)g=v,v=y;for(;;){if(v===l)break t;if(g===s&&++h===a&&(d=f),g===u&&++m===c&&(p=f),null!==(y=v.nextSibling))break;g=(v=g).parentNode}v=y}s=-1===d||-1===p?null:{start:d,end:p}}else s=null;s=s||{start:0,end:0}}else s=null;Br={focusedElem:l,selectionRange:s},Gt=!1,rs=null,os=!1,Ul=r;do{try{Es()}catch(e){if(null===Ul)throw Error(i(330));Ts(Ul,e),Ul=Ul.nextEffect}}while(null!==Ul);rs=null,Ul=r;do{try{for(l=e;null!==Ul;){var b=Ul.flags;if(16&b&&ge(Ul.stateNode,""),128&b){var x=Ul.alternate;if(null!==x){var w=x.ref;null!==w&&("function"==typeof w?w(null):w.current=null)}}switch(1038&b){case 2:ml(Ul),Ul.flags&=-3;break;case 6:ml(Ul),Ul.flags&=-3,bl(Ul.alternate,Ul);break;case 1024:Ul.flags&=-1025;break;case 1028:Ul.flags&=-1025,bl(Ul.alternate,Ul);break;case 4:bl(Ul.alternate,Ul);break;case 8:yl(l,s=Ul);var k=s.alternate;pl(s),null!==k&&pl(k)}Ul=Ul.nextEffect}}catch(e){if(null===Ul)throw Error(i(330));Ts(Ul,e),Ul=Ul.nextEffect}}while(null!==Ul);if(w=Br,x=fr(),b=w.focusedElem,l=w.selectionRange,x!==b&&b&&b.ownerDocument&&cr(b.ownerDocument.documentElement,b)){null!==l&&dr(b)&&(x=l.start,void 0===(w=l.end)&&(w=x),"selectionStart"in b?(b.selectionStart=x,b.selectionEnd=Math.min(w,b.value.length)):(w=(x=b.ownerDocument||document)&&x.defaultView||window).getSelection&&(w=w.getSelection(),s=b.textContent.length,k=Math.min(l.start,s),l=void 0===l.end?k:Math.min(l.end,s),!w.extend&&k>l&&(s=l,l=k,k=s),s=ur(b,k),a=ur(b,l),s&&a&&(1!==w.rangeCount||w.anchorNode!==s.node||w.anchorOffset!==s.offset||w.focusNode!==a.node||w.focusOffset!==a.offset)&&((x=x.createRange()).setStart(s.node,s.offset),w.removeAllRanges(),k>l?(w.addRange(x),w.extend(a.node,a.offset)):(x.setEnd(a.node,a.offset),w.addRange(x))))),x=[];for(w=b;w=w.parentNode;)1===w.nodeType&&x.push({element:w,left:w.scrollLeft,top:w.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<x.length;b++)(w=x[b]).element.scrollLeft=w.left,w.element.scrollTop=w.top}Gt=!!jr,Br=jr=null,e.current=n,Ul=r;do{try{for(b=e;null!==Ul;){var S=Ul.flags;if(36&S&&cl(b,Ul.alternate,Ul),128&S){x=void 0;var C=Ul.ref;if(null!==C){var E=Ul.stateNode;switch(Ul.tag){case 5:x=E;break;default:x=E}"function"==typeof C?C(x):C.current=x}}Ul=Ul.nextEffect}}catch(e){if(null===Ul)throw Error(i(330));Ts(Ul,e),Ul=Ul.nextEffect}}while(null!==Ul);Ul=null,Lo(),El=o}else e.current=n;if($l)$l=!1,Gl=e,Kl=t;else for(Ul=r;null!==Ul;)t=Ul.nextEffect,Ul.nextEffect=null,8&Ul.flags&&((S=Ul).sibling=null,S.stateNode=null),Ul=t;if(0===(r=e.pendingLanes)&&(ql=null),1===r?e===Jl?Zl++:(Zl=0,Jl=e):Zl=0,n=n.stateNode,xo&&"function"==typeof xo.onCommitFiberRoot)try{xo.onCommitFiberRoot(bo,n,void 0,64==(64&n.current.flags))}catch(e){}if(us(e,No()),Wl)throw Wl=!1,e=Hl,Hl=null,e;return 0!=(8&El)||Ho(),null}function Es(){for(;null!==Ul;){var e=Ul.alternate;os||null===rs||(0!=(8&Ul.flags)?Ze(Ul,rs)&&(os=!0):13===Ul.tag&&wl(e,Ul)&&Ze(Ul,rs)&&(os=!0));var t=Ul.flags;0!=(256&t)&&ul(e,Ul),0==(512&t)||$l||($l=!0,Wo(97,(function(){return _s(),null}))),Ul=Ul.nextEffect}}function _s(){if(90!==Kl){var e=97<Kl?97:Kl;return Kl=90,Uo(e,Ps)}return!1}function As(e,t){Ql.push(t,e),$l||($l=!0,Wo(97,(function(){return _s(),null})))}function Os(e,t){Xl.push(t,e),$l||($l=!0,Wo(97,(function(){return _s(),null})))}function Ps(){if(null===Gl)return!1;var e=Gl;if(Gl=null,0!=(48&El))throw Error(i(331));var t=El;El|=32;var n=Xl;Xl=[];for(var r=0;r<n.length;r+=2){var o=n[r],a=n[r+1],l=o.destroy;if(o.destroy=void 0,"function"==typeof l)try{l()}catch(e){if(null===a)throw Error(i(330));Ts(a,e)}}for(n=Ql,Ql=[],r=0;r<n.length;r+=2){o=n[r],a=n[r+1];try{var s=o.create;o.destroy=s()}catch(e){if(null===a)throw Error(i(330));Ts(a,e)}}for(s=e.current.firstEffect;null!==s;)e=s.nextEffect,s.nextEffect=null,8&s.flags&&(s.sibling=null,s.stateNode=null),s=e;return El=t,Ho(),!0}function Rs(e,t,n){la(e,t=al(0,t=nl(n,t),1)),t=as(),null!==(e=ss(e,1))&&(Vt(e,1,t),us(e,t))}function Ts(e,t){if(3===e.tag)Rs(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Rs(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===ql||!ql.has(r))){var o=il(n,e=nl(t,e),1);if(la(n,o),o=as(),null!==(n=ss(n,1)))Vt(n,1,o),us(n,o);else if("function"==typeof r.componentDidCatch&&(null===ql||!ql.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function Ms(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=as(),e.pingedLanes|=e.suspendedLanes&n,_l===e&&(Ol&n)===n&&(4===Tl||3===Tl&&(62914560&Ol)===Ol&&500>No()-Fl?ms(e,0):jl|=n),us(e,t)}function zs(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Io()?1:2:(0===ts&&(ts=zl),0===(t=Nt(62914560&~ts))&&(t=4194304))),n=as(),null!==(e=ss(e,t))&&(Vt(e,t,n),us(e,n))}function Ls(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Ds(e,t,n,r){return new Ls(e,t,n,r)}function js(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Bs(e,t){var n=e.alternate;return null===n?((n=Ds(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Fs(e,t,n,r,o,a){var l=2;if(r=e,"function"==typeof e)js(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case C:return Ns(n.children,o,a,t);case j:l=8,o|=16;break;case E:l=8,o|=1;break;case _:return(e=Ds(12,n,t,8|o)).elementType=_,e.type=_,e.lanes=a,e;case R:return(e=Ds(13,n,t,o)).type=R,e.elementType=R,e.lanes=a,e;case T:return(e=Ds(19,n,t,o)).elementType=T,e.lanes=a,e;case B:return Is(n,o,a,t);case F:return(e=Ds(24,n,t,o)).elementType=F,e.lanes=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case A:l=10;break e;case O:l=9;break e;case P:l=11;break e;case M:l=14;break e;case z:l=16,r=null;break e;case L:l=22;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=Ds(l,n,t,o)).elementType=e,t.type=r,t.lanes=a,t}function Ns(e,t,n,r){return(e=Ds(7,e,r,t)).lanes=n,e}function Is(e,t,n,r){return(e=Ds(23,e,r,t)).elementType=B,e.lanes=n,e}function Vs(e,t,n){return(e=Ds(6,e,null,t)).lanes=n,e}function Us(e,t,n){return(t=Ds(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Ws(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=It(0),this.expirationTimes=It(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=It(0),this.mutableSourceEagerHydrationData=null}function Hs(e,t,n,r){var o=t.current,a=as(),l=is(o);e:if(n){t:{if(Qe(n=n._reactInternals)!==n||1!==n.tag)throw Error(i(170));var s=n;do{switch(s.tag){case 3:s=s.stateNode.context;break t;case 1:if(po(s.type)){s=s.stateNode.__reactInternalMemoizedMergedChildContext;break t}}s=s.return}while(null!==s);throw Error(i(171))}if(1===n.tag){var u=n.type;if(po(u)){n=vo(n,u,s);break e}}n=s}else n=lo;return null===t.context?t.context=n:t.pendingContext=n,(t=ia(a,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),la(o,t),ls(o,l,a),l}function qs(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function $s(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Gs(e,t){$s(e,t),(e=e.alternate)&&$s(e,t)}function Ks(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new Ws(e,t,null!=n&&!0===n.hydrate),t=Ds(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,oa(t),e[Qr]=n.current,Ar(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var o=(t=r[e])._getVersion;o=o(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,o]:n.mutableSourceEagerHydrationData.push(t,o)}this._internalRoot=n}function Qs(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Xs(e,t,n,r,o){var a=n._reactRootContainer;if(a){var i=a._internalRoot;if("function"==typeof o){var l=o;o=function(){var e=qs(i);l.call(e)}}Hs(t,i,e,o)}else{if(a=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Ks(e,0,t?{hydrate:!0}:void 0)}(n,r),i=a._internalRoot,"function"==typeof o){var s=o;o=function(){var e=qs(i);s.call(e)}}!function(e,t){var n=El;El&=-2,El|=8;try{e(t)}finally{0===(El=n)&&(Il(),Ho())}}((function(){Hs(t,i,e,o)}))}return qs(i)}Vl=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||uo.current)Mi=!0;else{if(0==(n&r)){switch(Mi=!1,t.tag){case 3:Ui(t),Wa();break;case 5:Ta(t);break;case 1:po(t.type)&&go(t);break;case 4:Pa(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var o=t.type._context;io(Ko,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Gi(e,t,n):(io(za,1&za.current),null!==(t=Zi(e,t,n))?t.sibling:null);io(za,1&za.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return Yi(e,t,n);t.flags|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),io(za,za.current),r)break;return null;case 23:case 24:return t.lanes=0,Bi(e,t,n)}return Zi(e,t,n)}Mi=0!=(16384&e.flags)}else Mi=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=fo(t,so.current),ta(t,n),o=ni(null,t,r,e,o,n),t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,po(r)){var a=!0;go(t)}else a=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,oa(t);var l=r.getDerivedStateFromProps;"function"==typeof l&&da(t,r,l,e),o.updater=pa,t.stateNode=o,o._reactInternals=t,ga(t,r,e,n),t=Vi(null,t,r,!0,a,n)}else t.tag=0,zi(null,t,o,n),t=t.child;return t;case 16:o=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=(a=o._init)(o._payload),t.type=o,a=t.tag=function(e){if("function"==typeof e)return js(e)?1:0;if(null!=e){if((e=e.$$typeof)===P)return 11;if(e===M)return 14}return 2}(o),e=Go(o,e),a){case 0:t=Ni(null,t,o,e,n);break e;case 1:t=Ii(null,t,o,e,n);break e;case 11:t=Li(null,t,o,e,n);break e;case 14:t=Di(null,t,o,Go(o.type,e),r,n);break e}throw Error(i(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,Ni(e,t,r,o=t.elementType===r?o:Go(r,o),n);case 1:return r=t.type,o=t.pendingProps,Ii(e,t,r,o=t.elementType===r?o:Go(r,o),n);case 3:if(Ui(t),r=t.updateQueue,null===e||null===r)throw Error(i(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,aa(e,t),ua(t,r,null,n),(r=t.memoizedState.element)===o)Wa(),t=Zi(e,t,n);else{if((a=(o=t.stateNode).hydrate)&&(ja=Wr(t.stateNode.containerInfo.firstChild),Da=t,a=Ba=!0),a){if(null!=(e=o.mutableSourceEagerHydrationData))for(o=0;o<e.length;o+=2)(a=e[o])._workInProgressVersionPrimary=e[o+1],Ha.push(a);for(n=Sa(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else zi(e,t,r,n),Wa();t=t.child}return t;case 5:return Ta(t),null===e&&Ia(t),r=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,l=o.children,Nr(r,o)?l=null:null!==a&&Nr(r,a)&&(t.flags|=16),Fi(e,t),zi(e,t,l,n),t.child;case 6:return null===e&&Ia(t),null;case 13:return Gi(e,t,n);case 4:return Pa(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=ka(t,null,r,n):zi(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Li(e,t,r,o=t.elementType===r?o:Go(r,o),n);case 7:return zi(e,t,t.pendingProps,n),t.child;case 8:case 12:return zi(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,l=t.memoizedProps,a=o.value;var s=t.type._context;if(io(Ko,s._currentValue),s._currentValue=a,null!==l)if(s=l.value,0==(a=ar(s,a)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(s,a):1073741823))){if(l.children===o.children&&!uo.current){t=Zi(e,t,n);break e}}else for(null!==(s=t.child)&&(s.return=t);null!==s;){var u=s.dependencies;if(null!==u){l=s.child;for(var c=u.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&a)){1===s.tag&&((c=ia(-1,n&-n)).tag=2,la(s,c)),s.lanes|=n,null!==(c=s.alternate)&&(c.lanes|=n),ea(s.return,n),u.lanes|=n;break}c=c.next}}else l=10===s.tag&&s.type===t.type?null:s.child;if(null!==l)l.return=s;else for(l=s;null!==l;){if(l===t){l=null;break}if(null!==(s=l.sibling)){s.return=l.return,l=s;break}l=l.return}s=l}zi(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(a=t.pendingProps).children,ta(t,n),r=r(o=na(o,a.unstable_observedBits)),t.flags|=1,zi(e,t,r,n),t.child;case 14:return a=Go(o=t.type,t.pendingProps),Di(e,t,o,a=Go(o.type,a),r,n);case 15:return ji(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Go(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,po(r)?(e=!0,go(t)):e=!1,ta(t,n),ma(t,r,o),ga(t,r,o,n),Vi(null,t,r,!0,e,n);case 19:return Yi(e,t,n);case 23:case 24:return Bi(e,t,n)}throw Error(i(156,t.tag))},Ks.prototype.render=function(e){Hs(e,this._internalRoot,null,null)},Ks.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Hs(null,e,null,(function(){t[Qr]=null}))},Je=function(e){13===e.tag&&(ls(e,4,as()),Gs(e,4))},et=function(e){13===e.tag&&(ls(e,67108864,as()),Gs(e,67108864))},tt=function(e){if(13===e.tag){var t=as(),n=is(e);ls(e,n,t),Gs(e,n)}},nt=function(e,t){return t()},_e=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=eo(r);if(!o)throw Error(i(90));Y(r),ne(r,o)}}}break;case"textarea":ue(e,n);break;case"select":null!=(t=n.value)&&ie(e,!!n.multiple,t,!1)}},Me=function(e,t){var n=El;El|=1;try{return e(t)}finally{0===(El=n)&&(Il(),Ho())}},ze=function(e,t,n,r,o){var a=El;El|=4;try{return Uo(98,e.bind(null,t,n,r,o))}finally{0===(El=a)&&(Il(),Ho())}},Le=function(){0==(49&El)&&(function(){if(null!==Yl){var e=Yl;Yl=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,us(e,No())}))}Ho()}(),_s())},De=function(e,t){var n=El;El|=2;try{return e(t)}finally{0===(El=n)&&(Il(),Ho())}};var Ys={findFiberByHostInstance:Yr,bundleType:0,version:"17.0.1",rendererPackageName:"react-dom"},Zs={bundleType:Ys.bundleType,version:Ys.version,rendererPackageName:Ys.rendererPackageName,rendererConfig:Ys.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=function(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Qe(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){n=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===n)return Ye(o),e;if(a===r)return Ye(o),t;a=a.sibling}throw Error(i(188))}if(n.return!==r.return)n=o,r=a;else{for(var l=!1,s=o.child;s;){if(s===n){l=!0,n=o,r=a;break}if(s===r){l=!0,r=o,n=a;break}s=s.sibling}if(!l){for(s=a.child;s;){if(s===n){l=!0,n=a,r=o;break}if(s===r){l=!0,r=a,n=o;break}s=s.sibling}if(!l)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}(e))?null:e.stateNode},findFiberByHostInstance:Ys.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var Js=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!Js.isDisabled&&Js.supportsFiber)try{bo=Js.inject(Zs),xo=Js}catch(me){}}t.render=function(e,t,n){if(!Qs(t))throw Error(i(200));return Xs(null,e,t,!1,n)}},3935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(4448)},9590:e=>{var t="undefined"!=typeof Element,n="function"==typeof Map,r="function"==typeof Set,o="function"==typeof ArrayBuffer&&!!ArrayBuffer.isView;function a(e,i){if(e===i)return!0;if(e&&i&&"object"==typeof e&&"object"==typeof i){if(e.constructor!==i.constructor)return!1;var l,s,u,c;if(Array.isArray(e)){if((l=e.length)!=i.length)return!1;for(s=l;0!=s--;)if(!a(e[s],i[s]))return!1;return!0}if(n&&e instanceof Map&&i instanceof Map){if(e.size!==i.size)return!1;for(c=e.entries();!(s=c.next()).done;)if(!i.has(s.value[0]))return!1;for(c=e.entries();!(s=c.next()).done;)if(!a(s.value[1],i.get(s.value[0])))return!1;return!0}if(r&&e instanceof Set&&i instanceof Set){if(e.size!==i.size)return!1;for(c=e.entries();!(s=c.next()).done;)if(!i.has(s.value[0]))return!1;return!0}if(o&&ArrayBuffer.isView(e)&&ArrayBuffer.isView(i)){if((l=e.length)!=i.length)return!1;for(s=l;0!=s--;)if(e[s]!==i[s])return!1;return!0}if(e.constructor===RegExp)return e.source===i.source&&e.flags===i.flags;if(e.valueOf!==Object.prototype.valueOf)return e.valueOf()===i.valueOf();if(e.toString!==Object.prototype.toString)return e.toString()===i.toString();if((l=(u=Object.keys(e)).length)!==Object.keys(i).length)return!1;for(s=l;0!=s--;)if(!Object.prototype.hasOwnProperty.call(i,u[s]))return!1;if(t&&e instanceof Element)return!1;for(s=l;0!=s--;)if(("_owner"!==u[s]&&"__v"!==u[s]&&"__o"!==u[s]||!e.$$typeof)&&!a(e[u[s]],i[u[s]]))return!1;return!0}return e!=e&&i!=i}e.exports=function(e,t){try{return a(e,t)}catch(e){if((e.message||"").match(/stack|recursion/i))return console.warn("react-fast-compare cannot handle circular refs"),!1;throw e}}},2408:(e,t,n)=>{"use strict";var r=n(7418),o=60103,a=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var i=60109,l=60110,s=60112;t.Suspense=60113;var u=60115,c=60116;if("function"==typeof Symbol&&Symbol.for){var f=Symbol.for;o=f("react.element"),a=f("react.portal"),t.Fragment=f("react.fragment"),t.StrictMode=f("react.strict_mode"),t.Profiler=f("react.profiler"),i=f("react.provider"),l=f("react.context"),s=f("react.forward_ref"),t.Suspense=f("react.suspense"),u=f("react.memo"),c=f("react.lazy")}var d="function"==typeof Symbol&&Symbol.iterator;function p(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m={};function v(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}function g(){}function y(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=v.prototype;var b=y.prototype=new g;b.constructor=y,r(b,v.prototype),b.isPureReactComponent=!0;var x={current:null},w=Object.prototype.hasOwnProperty,k={key:!0,ref:!0,__self:!0,__source:!0};function S(e,t,n){var r,a={},i=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)w.call(t,r)&&!k.hasOwnProperty(r)&&(a[r]=t[r]);var s=arguments.length-2;if(1===s)a.children=n;else if(1<s){for(var u=Array(s),c=0;c<s;c++)u[c]=arguments[c+2];a.children=u}if(e&&e.defaultProps)for(r in s=e.defaultProps)void 0===a[r]&&(a[r]=s[r]);return{$$typeof:o,type:e,key:i,ref:l,props:a,_owner:x.current}}function C(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var E=/\/+/g;function _(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function A(e,t,n,r,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var s=!1;if(null===e)s=!0;else switch(l){case"string":case"number":s=!0;break;case"object":switch(e.$$typeof){case o:case a:s=!0}}if(s)return i=i(s=e),e=""===r?"."+_(s,0):r,Array.isArray(i)?(n="",null!=e&&(n=e.replace(E,"$&/")+"/"),A(i,t,n,"",(function(e){return e}))):null!=i&&(C(i)&&(i=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,n+(!i.key||s&&s.key===i.key?"":(""+i.key).replace(E,"$&/")+"/")+e)),t.push(i)),1;if(s=0,r=""===r?".":r+":",Array.isArray(e))for(var u=0;u<e.length;u++){var c=r+_(l=e[u],u);s+=A(l,t,n,c,i)}else if("function"==typeof(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e)))for(e=c.call(e),u=0;!(l=e.next()).done;)s+=A(l=l.value,t,n,c=r+_(l,u++),i);else if("object"===l)throw t=""+e,Error(p(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return s}function O(e,t,n){if(null==e)return e;var r=[],o=0;return A(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function P(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var R={current:null};function T(){var e=R.current;if(null===e)throw Error(p(321));return e}var M={ReactCurrentDispatcher:R,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:x,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:O,forEach:function(e,t,n){O(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return O(e,(function(){t++})),t},toArray:function(e){return O(e,(function(e){return e}))||[]},only:function(e){if(!C(e))throw Error(p(143));return e}},t.Component=v,t.PureComponent=y,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=M,t.cloneElement=function(e,t,n){if(null==e)throw Error(p(267,e));var a=r({},e.props),i=e.key,l=e.ref,s=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,s=x.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(c in t)w.call(t,c)&&!k.hasOwnProperty(c)&&(a[c]=void 0===t[c]&&void 0!==u?u[c]:t[c])}var c=arguments.length-2;if(1===c)a.children=n;else if(1<c){u=Array(c);for(var f=0;f<c;f++)u[f]=arguments[f+2];a.children=u}return{$$typeof:o,type:e.type,key:i,ref:l,props:a,_owner:s}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:l,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},t.createElement=S,t.createFactory=function(e){var t=S.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=C,t.lazy=function(e){return{$$typeof:c,_payload:{_status:-1,_result:e},_init:P}},t.memo=function(e,t){return{$$typeof:u,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return T().useCallback(e,t)},t.useContext=function(e,t){return T().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return T().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return T().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return T().useLayoutEffect(e,t)},t.useMemo=function(e,t){return T().useMemo(e,t)},t.useReducer=function(e,t,n){return T().useReducer(e,t,n)},t.useRef=function(e){return T().useRef(e)},t.useState=function(e){return T().useState(e)},t.version="17.0.1"},7294:(e,t,n)=>{"use strict";e.exports=n(2408)},53:(e,t)=>{"use strict";var n,r,o,a;if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var l=Date,s=l.now();t.unstable_now=function(){return l.now()-s}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var u=null,c=null,f=function(){if(null!==u)try{var e=t.unstable_now();u(!0,e),u=null}catch(e){throw setTimeout(f,0),e}};n=function(e){null!==u?setTimeout(n,0,e):(u=e,setTimeout(f,0))},r=function(e,t){c=setTimeout(e,t)},o=function(){clearTimeout(c)},t.unstable_shouldYield=function(){return!1},a=t.unstable_forceFrameRate=function(){}}else{var d=window.setTimeout,p=window.clearTimeout;if("undefined"!=typeof console){var h=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof h&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var m=!1,v=null,g=-1,y=5,b=0;t.unstable_shouldYield=function(){return t.unstable_now()>=b},a=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):y=0<e?Math.floor(1e3/e):5};var x=new MessageChannel,w=x.port2;x.port1.onmessage=function(){if(null!==v){var e=t.unstable_now();b=e+y;try{v(!0,e)?w.postMessage(null):(m=!1,v=null)}catch(e){throw w.postMessage(null),e}}else m=!1},n=function(e){v=e,m||(m=!0,w.postMessage(null))},r=function(e,n){g=d((function(){e(t.unstable_now())}),n)},o=function(){p(g),g=-1}}function k(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<E(o,t)))break e;e[r]=t,e[n]=o,n=r}}function S(e){return void 0===(e=e[0])?null:e}function C(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var a=2*(r+1)-1,i=e[a],l=a+1,s=e[l];if(void 0!==i&&0>E(i,n))void 0!==s&&0>E(s,i)?(e[r]=s,e[l]=n,r=l):(e[r]=i,e[a]=n,r=a);else{if(!(void 0!==s&&0>E(s,n)))break e;e[r]=s,e[l]=n,r=l}}}return t}return null}function E(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var _=[],A=[],O=1,P=null,R=3,T=!1,M=!1,z=!1;function L(e){for(var t=S(A);null!==t;){if(null===t.callback)C(A);else{if(!(t.startTime<=e))break;C(A),t.sortIndex=t.expirationTime,k(_,t)}t=S(A)}}function D(e){if(z=!1,L(e),!M)if(null!==S(_))M=!0,n(j);else{var t=S(A);null!==t&&r(D,t.startTime-e)}}function j(e,n){M=!1,z&&(z=!1,o()),T=!0;var a=R;try{for(L(n),P=S(_);null!==P&&(!(P.expirationTime>n)||e&&!t.unstable_shouldYield());){var i=P.callback;if("function"==typeof i){P.callback=null,R=P.priorityLevel;var l=i(P.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?P.callback=l:P===S(_)&&C(_),L(n)}else C(_);P=S(_)}if(null!==P)var s=!0;else{var u=S(A);null!==u&&r(D,u.startTime-n),s=!1}return s}finally{P=null,R=a,T=!1}}var B=a;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){M||T||(M=!0,n(j))},t.unstable_getCurrentPriorityLevel=function(){return R},t.unstable_getFirstCallbackNode=function(){return S(_)},t.unstable_next=function(e){switch(R){case 1:case 2:case 3:var t=3;break;default:t=R}var n=R;R=t;try{return e()}finally{R=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=B,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=R;R=e;try{return t()}finally{R=n}},t.unstable_scheduleCallback=function(e,a,i){var l=t.unstable_now();switch(i="object"==typeof i&&null!==i&&"number"==typeof(i=i.delay)&&0<i?l+i:l,e){case 1:var s=-1;break;case 2:s=250;break;case 5:s=1073741823;break;case 4:s=1e4;break;default:s=5e3}return e={id:O++,callback:a,priorityLevel:e,startTime:i,expirationTime:s=i+s,sortIndex:-1},i>l?(e.sortIndex=i,k(A,e),null===S(_)&&e===S(A)&&(z?o():z=!0,r(D,i-l))):(e.sortIndex=s,k(_,e),M||T||(M=!0,n(j))),e},t.unstable_wrapCallback=function(e){var t=R;return function(){var n=R;R=t;try{return e.apply(this,arguments)}finally{R=n}}}},3840:(e,t,n)=>{"use strict";e.exports=n(53)},7621:(e,t,n)=>{var r;!function(o){var a=/^\s+/,i=/\s+$/,l=0,s=o.round,u=o.min,c=o.max,f=o.random;function d(e,t){if(t=t||{},(e=e||"")instanceof d)return e;if(!(this instanceof d))return new d(e,t);var n=function(e){var t,n,r,l={r:0,g:0,b:0},s=1,f=null,d=null,p=null,h=!1,m=!1;return"string"==typeof e&&(e=function(e){e=e.replace(a,"").replace(i,"").toLowerCase();var t,n=!1;if(R[e])e=R[e],n=!0;else if("transparent"==e)return{r:0,g:0,b:0,a:0,format:"name"};return(t=W.rgb.exec(e))?{r:t[1],g:t[2],b:t[3]}:(t=W.rgba.exec(e))?{r:t[1],g:t[2],b:t[3],a:t[4]}:(t=W.hsl.exec(e))?{h:t[1],s:t[2],l:t[3]}:(t=W.hsla.exec(e))?{h:t[1],s:t[2],l:t[3],a:t[4]}:(t=W.hsv.exec(e))?{h:t[1],s:t[2],v:t[3]}:(t=W.hsva.exec(e))?{h:t[1],s:t[2],v:t[3],a:t[4]}:(t=W.hex8.exec(e))?{r:D(t[1]),g:D(t[2]),b:D(t[3]),a:N(t[4]),format:n?"name":"hex8"}:(t=W.hex6.exec(e))?{r:D(t[1]),g:D(t[2]),b:D(t[3]),format:n?"name":"hex"}:(t=W.hex4.exec(e))?{r:D(t[1]+""+t[1]),g:D(t[2]+""+t[2]),b:D(t[3]+""+t[3]),a:N(t[4]+""+t[4]),format:n?"name":"hex8"}:!!(t=W.hex3.exec(e))&&{r:D(t[1]+""+t[1]),g:D(t[2]+""+t[2]),b:D(t[3]+""+t[3]),format:n?"name":"hex"}}(e)),"object"==typeof e&&(H(e.r)&&H(e.g)&&H(e.b)?(t=e.r,n=e.g,r=e.b,l={r:255*z(t,255),g:255*z(n,255),b:255*z(r,255)},h=!0,m="%"===String(e.r).substr(-1)?"prgb":"rgb"):H(e.h)&&H(e.s)&&H(e.v)?(f=B(e.s),d=B(e.v),l=function(e,t,n){e=6*z(e,360),t=z(t,100),n=z(n,100);var r=o.floor(e),a=e-r,i=n*(1-t),l=n*(1-a*t),s=n*(1-(1-a)*t),u=r%6;return{r:255*[n,l,i,i,s,n][u],g:255*[s,n,n,l,i,i][u],b:255*[i,i,s,n,n,l][u]}}(e.h,f,d),h=!0,m="hsv"):H(e.h)&&H(e.s)&&H(e.l)&&(f=B(e.s),p=B(e.l),l=function(e,t,n){var r,o,a;function i(e,t,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?e+6*(t-e)*n:n<.5?t:n<2/3?e+(t-e)*(2/3-n)*6:e}if(e=z(e,360),t=z(t,100),n=z(n,100),0===t)r=o=a=n;else{var l=n<.5?n*(1+t):n+t-n*t,s=2*n-l;r=i(s,l,e+1/3),o=i(s,l,e),a=i(s,l,e-1/3)}return{r:255*r,g:255*o,b:255*a}}(e.h,f,p),h=!0,m="hsl"),e.hasOwnProperty("a")&&(s=e.a)),s=M(s),{ok:h,format:e.format||m,r:u(255,c(l.r,0)),g:u(255,c(l.g,0)),b:u(255,c(l.b,0)),a:s}}(e);this._originalInput=e,this._r=n.r,this._g=n.g,this._b=n.b,this._a=n.a,this._roundA=s(100*this._a)/100,this._format=t.format||n.format,this._gradientType=t.gradientType,this._r<1&&(this._r=s(this._r)),this._g<1&&(this._g=s(this._g)),this._b<1&&(this._b=s(this._b)),this._ok=n.ok,this._tc_id=l++}function p(e,t,n){e=z(e,255),t=z(t,255),n=z(n,255);var r,o,a=c(e,t,n),i=u(e,t,n),l=(a+i)/2;if(a==i)r=o=0;else{var s=a-i;switch(o=l>.5?s/(2-a-i):s/(a+i),a){case e:r=(t-n)/s+(t<n?6:0);break;case t:r=(n-e)/s+2;break;case n:r=(e-t)/s+4}r/=6}return{h:r,s:o,l}}function h(e,t,n){e=z(e,255),t=z(t,255),n=z(n,255);var r,o,a=c(e,t,n),i=u(e,t,n),l=a,s=a-i;if(o=0===a?0:s/a,a==i)r=0;else{switch(a){case e:r=(t-n)/s+(t<n?6:0);break;case t:r=(n-e)/s+2;break;case n:r=(e-t)/s+4}r/=6}return{h:r,s:o,v:l}}function m(e,t,n,r){var o=[j(s(e).toString(16)),j(s(t).toString(16)),j(s(n).toString(16))];return r&&o[0].charAt(0)==o[0].charAt(1)&&o[1].charAt(0)==o[1].charAt(1)&&o[2].charAt(0)==o[2].charAt(1)?o[0].charAt(0)+o[1].charAt(0)+o[2].charAt(0):o.join("")}function v(e,t,n,r){return[j(F(r)),j(s(e).toString(16)),j(s(t).toString(16)),j(s(n).toString(16))].join("")}function g(e,t){t=0===t?0:t||10;var n=d(e).toHsl();return n.s-=t/100,n.s=L(n.s),d(n)}function y(e,t){t=0===t?0:t||10;var n=d(e).toHsl();return n.s+=t/100,n.s=L(n.s),d(n)}function b(e){return d(e).desaturate(100)}function x(e,t){t=0===t?0:t||10;var n=d(e).toHsl();return n.l+=t/100,n.l=L(n.l),d(n)}function w(e,t){t=0===t?0:t||10;var n=d(e).toRgb();return n.r=c(0,u(255,n.r-s(-t/100*255))),n.g=c(0,u(255,n.g-s(-t/100*255))),n.b=c(0,u(255,n.b-s(-t/100*255))),d(n)}function k(e,t){t=0===t?0:t||10;var n=d(e).toHsl();return n.l-=t/100,n.l=L(n.l),d(n)}function S(e,t){var n=d(e).toHsl(),r=(n.h+t)%360;return n.h=r<0?360+r:r,d(n)}function C(e){var t=d(e).toHsl();return t.h=(t.h+180)%360,d(t)}function E(e){var t=d(e).toHsl(),n=t.h;return[d(e),d({h:(n+120)%360,s:t.s,l:t.l}),d({h:(n+240)%360,s:t.s,l:t.l})]}function _(e){var t=d(e).toHsl(),n=t.h;return[d(e),d({h:(n+90)%360,s:t.s,l:t.l}),d({h:(n+180)%360,s:t.s,l:t.l}),d({h:(n+270)%360,s:t.s,l:t.l})]}function A(e){var t=d(e).toHsl(),n=t.h;return[d(e),d({h:(n+72)%360,s:t.s,l:t.l}),d({h:(n+216)%360,s:t.s,l:t.l})]}function O(e,t,n){t=t||6,n=n||30;var r=d(e).toHsl(),o=360/n,a=[d(e)];for(r.h=(r.h-(o*t>>1)+720)%360;--t;)r.h=(r.h+o)%360,a.push(d(r));return a}function P(e,t){t=t||6;for(var n=d(e).toHsv(),r=n.h,o=n.s,a=n.v,i=[],l=1/t;t--;)i.push(d({h:r,s:o,v:a})),a=(a+l)%1;return i}d.prototype={isDark:function(){return this.getBrightness()<128},isLight:function(){return!this.isDark()},isValid:function(){return this._ok},getOriginalInput:function(){return this._originalInput},getFormat:function(){return this._format},getAlpha:function(){return this._a},getBrightness:function(){var e=this.toRgb();return(299*e.r+587*e.g+114*e.b)/1e3},getLuminance:function(){var e,t,n,r=this.toRgb();return e=r.r/255,t=r.g/255,n=r.b/255,.2126*(e<=.03928?e/12.92:o.pow((e+.055)/1.055,2.4))+.7152*(t<=.03928?t/12.92:o.pow((t+.055)/1.055,2.4))+.0722*(n<=.03928?n/12.92:o.pow((n+.055)/1.055,2.4))},setAlpha:function(e){return this._a=M(e),this._roundA=s(100*this._a)/100,this},toHsv:function(){var e=h(this._r,this._g,this._b);return{h:360*e.h,s:e.s,v:e.v,a:this._a}},toHsvString:function(){var e=h(this._r,this._g,this._b),t=s(360*e.h),n=s(100*e.s),r=s(100*e.v);return 1==this._a?"hsv("+t+", "+n+"%, "+r+"%)":"hsva("+t+", "+n+"%, "+r+"%, "+this._roundA+")"},toHsl:function(){var e=p(this._r,this._g,this._b);return{h:360*e.h,s:e.s,l:e.l,a:this._a}},toHslString:function(){var e=p(this._r,this._g,this._b),t=s(360*e.h),n=s(100*e.s),r=s(100*e.l);return 1==this._a?"hsl("+t+", "+n+"%, "+r+"%)":"hsla("+t+", "+n+"%, "+r+"%, "+this._roundA+")"},toHex:function(e){return m(this._r,this._g,this._b,e)},toHexString:function(e){return"#"+this.toHex(e)},toHex8:function(e){return function(e,t,n,r,o){var a=[j(s(e).toString(16)),j(s(t).toString(16)),j(s(n).toString(16)),j(F(r))];return o&&a[0].charAt(0)==a[0].charAt(1)&&a[1].charAt(0)==a[1].charAt(1)&&a[2].charAt(0)==a[2].charAt(1)&&a[3].charAt(0)==a[3].charAt(1)?a[0].charAt(0)+a[1].charAt(0)+a[2].charAt(0)+a[3].charAt(0):a.join("")}(this._r,this._g,this._b,this._a,e)},toHex8String:function(e){return"#"+this.toHex8(e)},toRgb:function(){return{r:s(this._r),g:s(this._g),b:s(this._b),a:this._a}},toRgbString:function(){return 1==this._a?"rgb("+s(this._r)+", "+s(this._g)+", "+s(this._b)+")":"rgba("+s(this._r)+", "+s(this._g)+", "+s(this._b)+", "+this._roundA+")"},toPercentageRgb:function(){return{r:s(100*z(this._r,255))+"%",g:s(100*z(this._g,255))+"%",b:s(100*z(this._b,255))+"%",a:this._a}},toPercentageRgbString:function(){return 1==this._a?"rgb("+s(100*z(this._r,255))+"%, "+s(100*z(this._g,255))+"%, "+s(100*z(this._b,255))+"%)":"rgba("+s(100*z(this._r,255))+"%, "+s(100*z(this._g,255))+"%, "+s(100*z(this._b,255))+"%, "+this._roundA+")"},toName:function(){return 0===this._a?"transparent":!(this._a<1)&&(T[m(this._r,this._g,this._b,!0)]||!1)},toFilter:function(e){var t="#"+v(this._r,this._g,this._b,this._a),n=t,r=this._gradientType?"GradientType = 1, ":"";if(e){var o=d(e);n="#"+v(o._r,o._g,o._b,o._a)}return"progid:DXImageTransform.Microsoft.gradient("+r+"startColorstr="+t+",endColorstr="+n+")"},toString:function(e){var t=!!e;e=e||this._format;var n=!1,r=this._a<1&&this._a>=0;return t||!r||"hex"!==e&&"hex6"!==e&&"hex3"!==e&&"hex4"!==e&&"hex8"!==e&&"name"!==e?("rgb"===e&&(n=this.toRgbString()),"prgb"===e&&(n=this.toPercentageRgbString()),"hex"!==e&&"hex6"!==e||(n=this.toHexString()),"hex3"===e&&(n=this.toHexString(!0)),"hex4"===e&&(n=this.toHex8String(!0)),"hex8"===e&&(n=this.toHex8String()),"name"===e&&(n=this.toName()),"hsl"===e&&(n=this.toHslString()),"hsv"===e&&(n=this.toHsvString()),n||this.toHexString()):"name"===e&&0===this._a?this.toName():this.toRgbString()},clone:function(){return d(this.toString())},_applyModification:function(e,t){var n=e.apply(null,[this].concat([].slice.call(t)));return this._r=n._r,this._g=n._g,this._b=n._b,this.setAlpha(n._a),this},lighten:function(){return this._applyModification(x,arguments)},brighten:function(){return this._applyModification(w,arguments)},darken:function(){return this._applyModification(k,arguments)},desaturate:function(){return this._applyModification(g,arguments)},saturate:function(){return this._applyModification(y,arguments)},greyscale:function(){return this._applyModification(b,arguments)},spin:function(){return this._applyModification(S,arguments)},_applyCombination:function(e,t){return e.apply(null,[this].concat([].slice.call(t)))},analogous:function(){return this._applyCombination(O,arguments)},complement:function(){return this._applyCombination(C,arguments)},monochromatic:function(){return this._applyCombination(P,arguments)},splitcomplement:function(){return this._applyCombination(A,arguments)},triad:function(){return this._applyCombination(E,arguments)},tetrad:function(){return this._applyCombination(_,arguments)}},d.fromRatio=function(e,t){if("object"==typeof e){var n={};for(var r in e)e.hasOwnProperty(r)&&(n[r]="a"===r?e[r]:B(e[r]));e=n}return d(e,t)},d.equals=function(e,t){return!(!e||!t)&&d(e).toRgbString()==d(t).toRgbString()},d.random=function(){return d.fromRatio({r:f(),g:f(),b:f()})},d.mix=function(e,t,n){n=0===n?0:n||50;var r=d(e).toRgb(),o=d(t).toRgb(),a=n/100;return d({r:(o.r-r.r)*a+r.r,g:(o.g-r.g)*a+r.g,b:(o.b-r.b)*a+r.b,a:(o.a-r.a)*a+r.a})},d.readability=function(e,t){var n=d(e),r=d(t);return(o.max(n.getLuminance(),r.getLuminance())+.05)/(o.min(n.getLuminance(),r.getLuminance())+.05)},d.isReadable=function(e,t,n){var r,o,a,i,l,s=d.readability(e,t);switch(o=!1,(a=n,"AA"!==(i=((a=a||{level:"AA",size:"small"}).level||"AA").toUpperCase())&&"AAA"!==i&&(i="AA"),"small"!==(l=(a.size||"small").toLowerCase())&&"large"!==l&&(l="small"),r={level:i,size:l}).level+r.size){case"AAsmall":case"AAAlarge":o=s>=4.5;break;case"AAlarge":o=s>=3;break;case"AAAsmall":o=s>=7}return o},d.mostReadable=function(e,t,n){var r,o,a,i,l=null,s=0;o=(n=n||{}).includeFallbackColors,a=n.level,i=n.size;for(var u=0;u<t.length;u++)(r=d.readability(e,t[u]))>s&&(s=r,l=d(t[u]));return d.isReadable(e,l,{level:a,size:i})||!o?l:(n.includeFallbackColors=!1,d.mostReadable(e,["#fff","#000"],n))};var R=d.names={aliceblue:"f0f8ff",antiquewhite:"faebd7",aqua:"0ff",aquamarine:"7fffd4",azure:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"000",blanchedalmond:"ffebcd",blue:"00f",blueviolet:"8a2be2",brown:"a52a2a",burlywood:"deb887",burntsienna:"ea7e5d",cadetblue:"5f9ea0",chartreuse:"7fff00",chocolate:"d2691e",coral:"ff7f50",cornflowerblue:"6495ed",cornsilk:"fff8dc",crimson:"dc143c",cyan:"0ff",darkblue:"00008b",darkcyan:"008b8b",darkgoldenrod:"b8860b",darkgray:"a9a9a9",darkgreen:"006400",darkgrey:"a9a9a9",darkkhaki:"bdb76b",darkmagenta:"8b008b",darkolivegreen:"556b2f",darkorange:"ff8c00",darkorchid:"9932cc",darkred:"8b0000",darksalmon:"e9967a",darkseagreen:"8fbc8f",darkslateblue:"483d8b",darkslategray:"2f4f4f",darkslategrey:"2f4f4f",darkturquoise:"00ced1",darkviolet:"9400d3",deeppink:"ff1493",deepskyblue:"00bfff",dimgray:"696969",dimgrey:"696969",dodgerblue:"1e90ff",firebrick:"b22222",floralwhite:"fffaf0",forestgreen:"228b22",fuchsia:"f0f",gainsboro:"dcdcdc",ghostwhite:"f8f8ff",gold:"ffd700",goldenrod:"daa520",gray:"808080",green:"008000",greenyellow:"adff2f",grey:"808080",honeydew:"f0fff0",hotpink:"ff69b4",indianred:"cd5c5c",indigo:"4b0082",ivory:"fffff0",khaki:"f0e68c",lavender:"e6e6fa",lavenderblush:"fff0f5",lawngreen:"7cfc00",lemonchiffon:"fffacd",lightblue:"add8e6",lightcoral:"f08080",lightcyan:"e0ffff",lightgoldenrodyellow:"fafad2",lightgray:"d3d3d3",lightgreen:"90ee90",lightgrey:"d3d3d3",lightpink:"ffb6c1",lightsalmon:"ffa07a",lightseagreen:"20b2aa",lightskyblue:"87cefa",lightslategray:"789",lightslategrey:"789",lightsteelblue:"b0c4de",lightyellow:"ffffe0",lime:"0f0",limegreen:"32cd32",linen:"faf0e6",magenta:"f0f",maroon:"800000",mediumaquamarine:"66cdaa",mediumblue:"0000cd",mediumorchid:"ba55d3",mediumpurple:"9370db",mediumseagreen:"3cb371",mediumslateblue:"7b68ee",mediumspringgreen:"00fa9a",mediumturquoise:"48d1cc",mediumvioletred:"c71585",midnightblue:"191970",mintcream:"f5fffa",mistyrose:"ffe4e1",moccasin:"ffe4b5",navajowhite:"ffdead",navy:"000080",oldlace:"fdf5e6",olive:"808000",olivedrab:"6b8e23",orange:"ffa500",orangered:"ff4500",orchid:"da70d6",palegoldenrod:"eee8aa",palegreen:"98fb98",paleturquoise:"afeeee",palevioletred:"db7093",papayawhip:"ffefd5",peachpuff:"ffdab9",peru:"cd853f",pink:"ffc0cb",plum:"dda0dd",powderblue:"b0e0e6",purple:"800080",rebeccapurple:"663399",red:"f00",rosybrown:"bc8f8f",royalblue:"4169e1",saddlebrown:"8b4513",salmon:"fa8072",sandybrown:"f4a460",seagreen:"2e8b57",seashell:"fff5ee",sienna:"a0522d",silver:"c0c0c0",skyblue:"87ceeb",slateblue:"6a5acd",slategray:"708090",slategrey:"708090",snow:"fffafa",springgreen:"00ff7f",steelblue:"4682b4",tan:"d2b48c",teal:"008080",thistle:"d8bfd8",tomato:"ff6347",turquoise:"40e0d0",violet:"ee82ee",wheat:"f5deb3",white:"fff",whitesmoke:"f5f5f5",yellow:"ff0",yellowgreen:"9acd32"},T=d.hexNames=function(e){var t={};for(var n in e)e.hasOwnProperty(n)&&(t[e[n]]=n);return t}(R);function M(e){return e=parseFloat(e),(isNaN(e)||e<0||e>1)&&(e=1),e}function z(e,t){(function(e){return"string"==typeof e&&-1!=e.indexOf(".")&&1===parseFloat(e)})(e)&&(e="100%");var n=function(e){return"string"==typeof e&&-1!=e.indexOf("%")}(e);return e=u(t,c(0,parseFloat(e))),n&&(e=parseInt(e*t,10)/100),o.abs(e-t)<1e-6?1:e%t/parseFloat(t)}function L(e){return u(1,c(0,e))}function D(e){return parseInt(e,16)}function j(e){return 1==e.length?"0"+e:""+e}function B(e){return e<=1&&(e=100*e+"%"),e}function F(e){return o.round(255*parseFloat(e)).toString(16)}function N(e){return D(e)/255}var I,V,U,W=(V="[\\s|\\(]+("+(I="(?:[-\\+]?\\d*\\.\\d+%?)|(?:[-\\+]?\\d+%?)")+")[,|\\s]+("+I+")[,|\\s]+("+I+")\\s*\\)?",U="[\\s|\\(]+("+I+")[,|\\s]+("+I+")[,|\\s]+("+I+")[,|\\s]+("+I+")\\s*\\)?",{CSS_UNIT:new RegExp(I),rgb:new RegExp("rgb"+V),rgba:new RegExp("rgba"+U),hsl:new RegExp("hsl"+V),hsla:new RegExp("hsla"+U),hsv:new RegExp("hsv"+V),hsva:new RegExp("hsva"+U),hex3:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex6:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,hex4:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex8:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/});function H(e){return!!W.CSS_UNIT.exec(e)}e.exports?e.exports=d:void 0===(r=function(){return d}.call(t,n,t,e))||(e.exports=r)}(Math)},2473:e=>{"use strict";e.exports=function(){}}},t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={id:r,loaded:!1,exports:{}};return e[r](o,o.exports,n),o.loaded=!0,o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{"use strict";var e=n(3935),t=n(7294);var r=n(7621),o=n.n(r),a=n(4686),i=(e,t,n)=>{var r=(0,a.memoizedGet)(e,"colors."+t,t);return o()(r).isValid()?r:n},l=(e,t)=>n=>{var r=i(n,e);return o()(r).setAlpha(t).toRgbString()};function s(e,t){return void 0===e&&(e="1rem"),void 0===t&&(t="rgba(255, 255, 255, 0.15)"),{backgroundImage:"linear-gradient(\n    45deg,\n    "+t+" 25%,\n    transparent 25%,\n    transparent 50%,\n    "+t+" 50%,\n    "+t+" 75%,\n    transparent 75%,\n    transparent\n  )",backgroundSize:e+" "+e}}function u(e,t){return n=>"dark"===n.colorMode?t:e}function c(e){var{orientation:t,vertical:n,horizontal:r}=e;return t?"vertical"===t?n:r:{}}function f(e){var{theme:t,colorScheme:n}=e;return u(i(t,n+".100",n),l(n+".200",.16)(t))(e)}const d={parts:["container","title","icon"],baseStyle:{container:{px:4,py:3},title:{fontWeight:"bold",lineHeight:6,mr:2},description:{lineHeight:6},icon:{mr:3,w:5,h:6}},variants:{subtle:function(e){var{colorScheme:t}=e;return{container:{bg:f(e)},icon:{color:u(t+".500",t+".200")(e)}}},"left-accent":function(e){var{colorScheme:t}=e;return{container:{pl:3,borderLeft:"4px solid",borderColor:u(t+".500",t+".200")(e),bg:f(e)},icon:{color:u(t+".500",t+".200")(e)}}},"top-accent":function(e){var{colorScheme:t}=e;return{container:{pt:2,borderTop:"4px solid",borderColor:u(t+".500",t+".200")(e),bg:f(e)},icon:{color:u(t+".500",t+".200")(e)}}},solid:function(e){var{colorScheme:t}=e;return{container:{bg:u(t+".500",t+".200")(e),color:u("white","gray.900")(e)}}}},defaultProps:{variant:"subtle"}};var p={px:"1px",0:"0",1:"0.25rem",2:"0.5rem",3:"0.75rem",4:"1rem",5:"1.25rem",6:"1.5rem",7:"1.75rem",8:"2rem",9:"2.25rem",10:"2.5rem",12:"3rem",14:"3.5rem",16:"4rem",20:"5rem",24:"6rem",28:"7rem",32:"8rem",36:"9rem",40:"10rem",44:"11rem",48:"12rem",52:"13rem",56:"14rem",60:"15rem",64:"16rem",72:"18rem",80:"20rem",96:"24rem"};function h(){return(h=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}const m=h({},p,{full:"100%","3xs":"14rem","2xs":"16rem",xs:"20rem",sm:"24rem",md:"28rem",lg:"32rem",xl:"36rem","2xl":"42rem","3xl":"48rem","4xl":"56rem","5xl":"64rem","6xl":"72rem","7xl":"80rem"},{container:{sm:"640px",md:"768px",lg:"1024px",xl:"1280px"}});function v(e){return{transform:"translate(25%, 25%)",borderRadius:"full",border:"0.2em solid",borderColor:u("white","gray.800")(e)}}function g(e){return{bg:u("gray.200","whiteAlpha.400")(e)}}function y(e){var t,n,r,{name:l,theme:s}=e,c=l?(t={string:l},r=o().random().toHexString(),!t||(0,a.isEmptyObject)(t)?r:t.string&&t.colors?function(e,t){var n=0;if(0===e.length)return t[0];for(var r=0;r<e.length;r+=1)n=e.charCodeAt(r)+((n<<5)-n),n&=n;return t[n=(n%t.length+t.length)%t.length]}(t.string,t.colors):t.string&&!t.colors?function(e){var t=0;if(0===e.length)return t.toString();for(var n=0;n<e.length;n+=1)t=e.charCodeAt(n)+((t<<5)-t),t&=t;for(var r="#",o=0;o<3;o+=1)r+=("00"+(t>>8*o&255).toString(16)).substr(-2);return r}(t.string):t.colors&&!t.string?(n=t.colors)[Math.floor(Math.random()*n.length)]:r):"gray.400",f=(e=>t=>"dark"===(e=>t=>{var n=i(t,e);return o()(n).isDark()?"dark":"light"})(e)(t))(c)(s),d="white";return f||(d="gray.800"),{bg:c,color:d,borderColor:u("white","gray.800")(e),verticalAlign:"top"}}function b(e){var t=m[e];return{container:{width:e,height:e,fontSize:"calc("+(null!=t?t:e)+" / 2.5)"},excessLabel:{width:e,height:e},label:{fontSize:"calc("+(null!=t?t:e)+" / 2.5)",lineHeight:"100%"!==e?null!=t?t:e:void 0}}}const x={parts:["container","excessLabel","badge","label"],baseStyle:e=>({badge:v(e),excessLabel:g(e),container:y(e)}),sizes:{"2xs":b("4"),xs:b("6"),sm:b("8"),md:b("12"),lg:b("16"),xl:b("24"),"2xl":b("32"),full:b("100%")},defaultProps:{size:"md"}},w={baseStyle:{px:1,textTransform:"uppercase",fontSize:"xs",borderRadius:"sm",fontWeight:"bold"},variants:{solid:function(e){var{colorScheme:t,theme:n}=e;return{bg:u(t+".500",l(t+".500",.6)(n))(e),color:u("white","whiteAlpha.800")(e)}},subtle:function(e){var{colorScheme:t,theme:n}=e;return{bg:u(t+".100",l(t+".200",.16)(n))(e),color:u(t+".800",t+".200")(e)}},outline:function(e){var{colorScheme:t,theme:n}=e,r=l(t+".200",.8)(n),o=u(i(n,t+".500"),r)(e);return{color:o,boxShadow:"inset 0 0 0px 1px "+o}}},defaultProps:{variant:"subtle",colorScheme:"gray"}};function k(){return(k=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function S(e){var{colorScheme:t,theme:n}=e;if("gray"===t)return{color:u("inherit","whiteAlpha.900")(e),_hover:{bg:u("gray.100","whiteAlpha.200")(e)},_active:{bg:u("gray.200","whiteAlpha.300")(e)}};var r=l(t+".200",.12)(n),o=l(t+".200",.24)(n);return{color:u(t+".600",t+".200")(e),bg:"transparent",_hover:{bg:u(t+".50",r)(e)},_active:{bg:u(t+".100",o)(e)}}}var C={yellow:{bg:"yellow.400",color:"black",hoverBg:"yellow.500",activeBg:"yellow.600"},cyan:{bg:"cyan.400",color:"black",hoverBg:"cyan.500",activeBg:"cyan.600"}};const E={baseStyle:{lineHeight:"1.2",borderRadius:"md",fontWeight:"semibold",_focus:{boxShadow:"outline"},_disabled:{opacity:.4,cursor:"not-allowed",boxShadow:"none"},_hover:{_disabled:{bg:"initial"}}},variants:{ghost:S,outline:function(e){var{colorScheme:t}=e,n=u("gray.200","whiteAlpha.300")(e);return k({border:"1px solid",borderColor:"gray"===t?n:"currentColor"},S(e))},solid:function(e){var{colorScheme:t}=e;if("gray"===t){var n=u("gray.100","whiteAlpha.200")(e);return{bg:n,_hover:{bg:u("gray.200","whiteAlpha.300")(e),_disabled:{bg:n}},_active:{bg:u("gray.300","whiteAlpha.400")(e)}}}var{bg:r=t+".500",color:o="white",hoverBg:a=t+".600",activeBg:i=t+".700"}=C[t]||{},l=u(r,t+".200")(e);return{bg:l,color:u(o,"gray.800")(e),_hover:{bg:u(a,t+".300")(e),_disabled:{bg:l}},_active:{bg:u(i,t+".400")(e)}}},link:function(e){var{colorScheme:t}=e;return{padding:0,height:"auto",lineHeight:"normal",color:u(t+".500",t+".200")(e),_hover:{textDecoration:"underline",_disabled:{textDecoration:"none"}},_active:{color:u(t+".700",t+".500")(e)}}},unstyled:{bg:"none",color:"inherit",display:"inline",lineHeight:"inherit",m:0,p:0}},sizes:{lg:{h:12,minW:12,fontSize:"lg",px:6},md:{h:10,minW:10,fontSize:"md",px:4},sm:{h:8,minW:8,fontSize:"sm",px:3},xs:{h:6,minW:6,fontSize:"xs",px:2}},defaultProps:{variant:"solid",size:"md",colorScheme:"gray"}};function _(e){var{colorScheme:t}=e;return{w:"100%",transition:"box-shadow 250ms",border:"2px solid",borderRadius:"sm",borderColor:"inherit",color:"white",_checked:{bg:u(t+".500",t+".200")(e),borderColor:u(t+".500",t+".200")(e),color:u("white","gray.900")(e),_hover:{bg:u(t+".600",t+".300")(e),borderColor:u(t+".600",t+".300")(e)},_disabled:{borderColor:u("gray.200","transparent")(e),bg:u("gray.200","whiteAlpha.300")(e),color:u("gray.500","whiteAlpha.500")(e)}},_indeterminate:{bg:u(t+".500",t+".200")(e),borderColor:u(t+".500",t+".200")(e),color:u("white","gray.900")(e)},_disabled:{bg:u("gray.100","whiteAlpha.100")(e),borderColor:u("gray.100","transparent")(e)},_focus:{boxShadow:"outline"},_invalid:{borderColor:u("red.500","red.300")(e)}}}var A={userSelect:"none",_disabled:{opacity:.4}};const O={parts:["control","label","description","icon"],baseStyle:e=>({control:_(e),label:A}),sizes:{sm:{control:{h:3,w:3},label:{fontSize:"sm"},icon:{fontSize:"0.45rem"}},md:{control:{w:4,h:4},label:{fontSize:"md"},icon:{fontSize:"0.625rem"}},lg:{control:{w:5,h:5},label:{fontSize:"lg"},icon:{fontSize:"0.625rem"}}},defaultProps:{size:"md",colorScheme:"blue"}},P={baseStyle:function(e){return{borderRadius:"md",transition:"all 0.2s",_disabled:{opacity:.4,cursor:"not-allowed",boxShadow:"none"},_hover:{bg:u("blackAlpha.100","whiteAlpha.100")(e)},_active:{bg:u("blackAlpha.200","whiteAlpha.200")(e)},_focus:{boxShadow:"outline"}}},sizes:{lg:{w:"40px",h:"40px",fontSize:"16px"},md:{w:"32px",h:"32px",fontSize:"12px"},sm:{w:"24px",h:"24px",fontSize:"10px"}},defaultProps:{size:"md"}};var{variants:R,defaultProps:T}=w;const M={baseStyle:{fontFamily:"mono",fontSize:"sm",px:"0.2em",borderRadius:"sm"},variants:R,defaultProps:T};var z={bg:"blackAlpha.600",zIndex:"modal"};function L(e){var{isCentered:t,scrollBehavior:n}=e;return{display:"flex",zIndex:"modal",justifyContent:"center",alignItems:t?"center":"flex-start",overflow:"inside"===n?"hidden":"auto"}}function D(e){var{scrollBehavior:t}=e;return{borderRadius:"md",bg:u("white","gray.700")(e),color:"inherit",my:"3.75rem",zIndex:"modal",maxH:"inside"===t?"calc(100vh - 7.5rem)":void 0,boxShadow:u("lg","dark-lg")(e)}}var j={px:6,py:4,fontSize:"xl",fontWeight:"semibold"};function B(e){var{scrollBehavior:t}=e;return{px:6,py:2,flex:1,overflow:"inside"===t?"auto":void 0}}var F={px:6,py:4};function N(e){return"full"===e?{dialog:{maxW:"100vw",h:"100vh"}}:{dialog:{maxW:e}}}const I={parts:["overlay","dialogContainer","dialog","header","body","footer"],baseStyle:e=>({overlay:z,dialogContainer:L(e),dialog:D(e),header:j,body:B(e),footer:F}),sizes:{xs:N("xs"),sm:N("sm"),md:N("md"),lg:N("lg"),xl:N("xl"),"2xl":N("2xl"),"3xl":N("3xl"),"4xl":N("4xl"),"5xl":N("5xl"),"6xl":N("6xl"),full:N("full")},defaultProps:{size:"md"}};function V(){return(V=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function U(e){return"full"===e?{dialog:{maxW:"100vw",h:"100vh"}}:{dialog:{maxW:e}}}var W={bg:"blackAlpha.600",zIndex:"overlay"},H={display:"flex",zIndex:"modal",justifyContent:"center"};function q(e){var{isFullHeight:t}=e;return V({},t&&{height:"100vh"},{zIndex:"modal",maxH:"100vh",bg:u("white","gray.700")(e),color:"inherit",boxShadow:u("lg","dark-lg")(e)})}var $={px:6,py:4,fontSize:"xl",fontWeight:"semibold"},G={px:6,py:2,flex:1,overflow:"auto"},K={px:6,py:4};const Q={parts:I.parts,baseStyle:e=>({overlay:W,dialogContainer:H,dialog:q(e),header:$,body:G,footer:K}),sizes:{xs:U("xs"),sm:U("md"),md:U("lg"),lg:U("2xl"),xl:U("4xl"),full:U("full")},defaultProps:{size:"xs"}};function X(e){return{color:u("red.500","red.300")(e),mt:2,fontSize:"sm"}}function Y(e){return{ml:1,color:u("red.500","red.300")(e)}}function Z(e){return{mt:2,color:u("gray.500","whiteAlpha.600")(e),lineHeight:"normal",fontSize:"sm"}}function J(e){return{mr:"0.5em",color:u("red.500","red.300")(e)}}const ee={parts:["errorText","errorIcon","requiredIndicator","helperText"],baseStyle:e=>({errorText:X(e),requiredIndicator:Y(e),helperText:Z(e),errorIcon:J(e)})};var te={lg:{fontSize:"lg",pl:4,pr:4,h:12,borderRadius:"md"},md:{fontSize:"md",pl:4,pr:4,h:10,borderRadius:"md"},sm:{fontSize:"sm",pl:3,pr:3,h:8,borderRadius:"sm"}};function ne(e){var{focusBorderColor:t,errorBorderColor:n}=e;return{focusBorderColor:t||u("blue.500","blue.300")(e),errorBorderColor:n||u("red.500","red.300")(e)}}const re={parts:["field","addon"],baseStyle:{field:{width:"100%",outline:0,position:"relative",appearance:"none",transition:"all 0.2s"}},sizes:{lg:{field:te.lg,addon:te.lg},md:{field:te.md,addon:te.md},sm:{field:te.sm,addon:te.sm}},variants:{outline:function(e){var{theme:t}=e,{focusBorderColor:n,errorBorderColor:r}=ne(e);return{field:{border:"1px solid",borderColor:"inherit",bg:"inherit",_hover:{borderColor:u("gray.300","whiteAlpha.400")(e)},_readOnly:{boxShadow:"none !important",userSelect:"all"},_disabled:{opacity:.4,cursor:"not-allowed"},_focus:{zIndex:1,borderColor:i(t,n),boxShadow:"0 0 0 1px "+i(t,n)},_invalid:{borderColor:i(t,r),boxShadow:"0 0 0 1px "+i(t,r)}},addon:{border:"1px solid",borderColor:u("inherit","whiteAlpha.50")(e),bg:u("gray.100","whiteAlpha.300")(e)}}},filled:function(e){var{theme:t}=e,{focusBorderColor:n,errorBorderColor:r}=ne(e);return{field:{border:"2px solid",borderColor:"transparent",bg:u("gray.100","whiteAlpha.50")(e),_hover:{bg:u("gray.200","whiteAlpha.100")(e)},_readOnly:{boxShadow:"none !important",userSelect:"all"},_disabled:{opacity:.4,cursor:"not-allowed"},_focus:{bg:"transparent",borderColor:i(t,n)},_invalid:{borderColor:i(t,r)}},addon:{border:"2px solid",borderColor:"transparent",bg:u("gray.100","whiteAlpha.50")(e)}}},flushed:function(e){var{theme:t}=e,{focusBorderColor:n,errorBorderColor:r}=ne(e);return{field:{borderBottom:"1px solid",borderColor:"inherit",borderRadius:0,pl:0,pr:0,bg:"transparent",_readOnly:{boxShadow:"none !important",userSelect:"all"},_focus:{borderColor:i(t,n),boxShadow:"0px 1px 0px 0px "+i(t,n)},_invalid:{borderColor:i(t,r)}},addon:{borderBottom:"2px solid",borderColor:"inherit",borderRadius:0,paddingX:0,bg:"transparent"}}},unstyled:{field:{bg:"transparent",pl:0,pr:0,height:"auto"},addon:{bg:"transparent",pl:0,pr:0,height:"auto"}}},defaultProps:{size:"md",variant:"outline"}},oe={baseStyle:function(e){return{bg:u("gray.100","whiteAlpha")(e),borderRadius:"md",borderWidth:"1px",borderBottomWidth:"3px",fontSize:"0.8em",fontWeight:"bold",lineHeight:"normal",px:"0.4em",whiteSpace:"nowrap"}}};function ae(e){return{bg:u("#fff","gray.700")(e),boxShadow:u("sm","dark-lg")(e),color:"inherit",minW:"3xs",py:"2",zIndex:1,borderRadius:"md",borderWidth:"1px"}}function ie(e){return{py:"0.4rem",px:"0.8rem",transition:"background 50ms ease-in 0s",_focus:{bg:u("gray.100","whiteAlpha.100")(e)},_active:{bg:u("gray.200","whiteAlpha.200")(e)},_expanded:{bg:u("gray.100","whiteAlpha.100")(e)},_disabled:{opacity:.4,cursor:"not-allowed"}}}var le={mx:4,my:2,fontWeight:"semibold",fontSize:"sm"},se={opacity:.6},ue={border:0,borderBottom:"1px solid",borderColor:"inherit",my:"0.5rem",opacity:.6};const ce={parts:["item","command","list","button","groupTitle","divider"],baseStyle:e=>({list:ae(e),item:ie(e),groupTitle:le,command:se,divider:ue})};var fe,{variants:de,defaultProps:pe}=re,he=null==(fe=re.baseStyle)?void 0:fe.field,me={width:"24px"};function ve(e){return{borderLeft:"1px solid",borderColor:u("inherit","whiteAlpha.300")(e),color:u("inherit","whiteAlpha.800")(e),_active:{bg:u("gray.200","whiteAlpha.300")(e)},_disabled:{opacity:.4,cursor:"not-allowed"}}}function ge(e){var t,n=null==(t=re.sizes)?void 0:t[e],r={lg:"md",md:"md",sm:"sm"};return{field:null==n?void 0:n.field,stepper:{fontSize:"lg"===e?"14px":"10px",_first:{borderTopRightRadius:r[e]},_last:{borderBottomRightRadius:r[e],mt:"-1px",borderTopWidth:1}}}}const ye={parts:["field","stepper","stepperGroup"],baseStyle:e=>({field:he,stepperGroup:me,stepper:ve(e)}),sizes:{sm:ge("sm"),md:ge("md"),lg:ge("lg")},variants:de,defaultProps:pe};function be(){return(be=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}const xe={baseStyle:be({},re.baseStyle.field,{textAlign:"center"}),sizes:{lg:{fontSize:"lg",w:12,h:12,borderRadius:"md"},md:{fontSize:"md",w:10,h:10,borderRadius:"md"},sm:{fontSize:"sm",w:8,h:8,borderRadius:"sm"}},variants:{outline:e=>re.variants.outline(e).field,flushed:e=>re.variants.flushed(e).field,filled:e=>re.variants.filled(e).field,unstyled:re.variants.unstyled.field},defaultProps:re.defaultProps};var we={w:"100%",maxW:"xs",zIndex:10};function ke(e){return{bg:u("white","gray.700")(e),border:"1px solid",borderColor:"inherit",borderRadius:"md",boxShadow:"sm",zIndex:"inherit",_focus:{outline:0,boxShadow:"outline"}}}function Se(e){return{bg:u("white","gray.700")(e)}}var Ce={px:3,py:2,borderBottomWidth:"1px"},Ee={px:3,py:2},_e={px:3,py:2,borderTopWidth:"1px"};const Ae={parts:["popper","content","header","body","footer","arrow"],baseStyle:e=>({popper:we,content:ke(e),header:Ce,body:Ee,footer:_e,arrow:Se(e)})};function Oe(){return(Oe=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var Pe={lineHeight:"1",fontSize:"0.25em",fontWeight:"bold",color:"white"};function Re(e){return{bg:u("gray.100","whiteAlpha.300")(e)}}function Te(e){return Oe({transition:"all 0.3s"},function(e){var{colorScheme:t,theme:n,isIndeterminate:r,hasStripe:o}=e,a=u(s(),s("1rem","rgba(0,0,0,0.1)"))(e),l=u(t+".500",t+".200")(e),c="linear-gradient(\n    to right,\n    transparent 0%,\n    "+i(n,l)+" 50%,\n    transparent 100%\n  )";return Oe({},!r&&o&&a,r?{bgImage:c}:{bgColor:l})}(e))}const Me={parts:["track","filledTrack","panel"],sizes:{xs:{track:{h:"0.25rem"}},sm:{track:{h:"0.5rem"}},md:{track:{h:"0.75rem"}},lg:{track:{h:"1rem"}}},baseStyle:e=>({label:Pe,filledTrack:Te(e),track:Re(e)}),defaultProps:{size:"md",colorScheme:"blue"}};function ze(){return(ze=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function Le(e){var{control:t}=O.baseStyle(e);return ze({},t,{borderRadius:"full",_checked:ze({},t._checked,{_before:{content:'""',display:"inline-block",pos:"relative",w:"50%",h:"50%",borderRadius:"50%",bg:"currentColor"}})})}const De={parts:["control","label"],baseStyle:e=>({label:O.baseStyle(e).label,control:Le(e)}),sizes:{md:{control:{w:4,h:4},label:{fontSize:"md"}},lg:{control:{w:5,h:5},label:{fontSize:"lg"}},sm:{control:{width:3,height:3},label:{fontSize:"sm"}}},defaultProps:{size:"md",colorScheme:"blue"}};function je(){return(je=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var{sizes:Be,defaultProps:Fe,variants:Ne}=re;function Ie(e){return je({},re.baseStyle.field,{appearance:"none",paddingBottom:"1px",lineHeight:"normal","> option":{bg:u("white","gray.700")(e)}})}var Ve={color:"currentColor",fontSize:"1.25rem",_disabled:{opacity:.5}};const Ue={parts:["field","icon"],baseStyle:e=>({field:Ie(e),icon:Ve}),sizes:Be,variants:Ne,defaultProps:Fe};var We=n(6418);function He(e,t){return(0,We.F4)({from:{borderColor:e,background:e},to:{borderColor:t,background:t}})}const qe={baseStyle:e=>{var t=u("gray.100","gray.800")(e),n=u("gray.400","gray.600")(e),{startColor:r=t,endColor:o=n,speed:a,theme:l}=e,s=i(l,r),c=i(l,o);return{opacity:.7,borderRadius:"2px",borderColor:s,background:c,animation:a+"s linear infinite alternate "+He(s,c)}}},$e={baseStyle:e=>({borderRadius:"md",fontWeight:"semibold",_focus:{boxShadow:"outline",padding:"1rem",position:"fixed",top:"1.5rem",left:"1.5rem",bg:u("white","gray.700")(e)}})};function Ge(){return(Ge=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var Ke=e=>{var{orientation:t}=e;return Ge({_disabled:{opacity:.6,cursor:"default",pointerEvents:"none"}},c({orientation:t,vertical:{h:"100%"},horizontal:{w:"100%"}}))};function Qe(e){return{borderRadius:"sm",bg:u("gray.200","whiteAlpha.200")(e),_disabled:{bg:u("gray.300","whiteAlpha.300")(e)}}}function Xe(e){return Ge({zIndex:1,borderRadius:"full",bg:"white",boxShadow:"base",border:"1px solid",borderColor:"transparent",transition:"transform 0.2s",_focus:{boxShadow:"outline"},_disabled:{bg:"gray.300"}},function(e){return c({orientation:e.orientation,vertical:{left:"50%",transform:"translateX(-50%)",_active:{transform:"translateX(-50%) scale(1.15)"}},horizontal:{top:"50%",transform:"translateY(-50%)",_active:{transform:"translateY(-50%) scale(1.15)"}}})}(e))}function Ye(e){var{colorScheme:t}=e;return{bg:u(t+".500",t+".200")(e)}}const Ze={parts:["container","thumb","track","filledTrack"],sizes:{lg:function(e){return{thumb:{w:"16px",h:"16px"},track:c({orientation:e.orientation,horizontal:{h:"4px"},vertical:{w:"4px"}})}},md:function(e){return{thumb:{w:"14px",h:"14px"},track:c({orientation:e.orientation,horizontal:{h:"4px"},vertical:{w:"4px"}})}},sm:function(e){return{thumb:{w:"10px",h:"10px"},track:c({orientation:e.orientation,horizontal:{h:"2px"},vertical:{w:"2px"}})}}},baseStyle:e=>({container:Ke(e),track:Qe(e),thumb:Xe(e),filledTrack:Ye(e)}),defaultProps:{size:"md",colorScheme:"blue"}};function Je(e){var{colorScheme:t}=e;return{borderRadius:"full",p:"2px",transition:"all 120ms",bg:u("gray.300","whiteAlpha.400")(e),_focus:{boxShadow:"outline"},_disabled:{opacity:.4,cursor:"not-allowed"},_checked:{bg:u(t+".500",t+".200")(e)}}}var et={bg:"white",transition:"transform 250ms",borderRadius:"full",transform:"translateX(0)"};const tt={parts:["track","thumb"],baseStyle:e=>({track:Je(e),thumb:et}),sizes:{sm:{track:{w:"1.375rem",h:"0.75rem"},thumb:{w:"0.75rem",h:"0.75rem",_checked:{transform:"translateX(0.625rem)"}}},md:{track:{w:"1.875rem",h:"1rem"},thumb:{w:"1rem",h:"1rem",_checked:{transform:"translateX(0.875rem)"}}},lg:{track:{w:"2.875rem",h:"1.5rem"},thumb:{w:"1.5rem",h:"1.5rem",_checked:{transform:"translateX(1.375rem)"}}}},defaultProps:{size:"md",colorScheme:"blue"}};function nt(e){var{isFitted:t}=e;return{flex:t?1:void 0,transition:"all 0.2s",_focus:{zIndex:1,boxShadow:"outline"}}}function rt(e){var{align:t="start",orientation:n}=e;return{justifyContent:{end:"flex-end",center:"center",start:"flex-start"}[t],flexDirection:"vertical"===n?"column":"row"}}var ot={p:4};const at={parts:["tablist","tab","tabpanel","indicator"],baseStyle:e=>({tab:nt(e),tablist:rt(e),tabpanel:ot}),sizes:{sm:{tab:{py:"0.25rem",px:"1rem",fontSize:"0.85rem"}},md:{tab:{fontSize:"1rem",py:"0.5rem",px:"1rem"}},lg:{tab:{fontSize:"1.15rem",py:"0.75rem",px:"1rem"}}},variants:{line:function(e){var{colorScheme:t,orientation:n}=e,r="vertical"===n?"borderLeft":"borderBottom";return{tablist:{[r]:"2px solid",borderColor:"inherit"},tab:{[r]:"2px solid",borderColor:"transparent",mb:"-2px",_selected:{color:u(t+".600",t+".300")(e),borderColor:"currentColor"},_active:{bg:u("gray.200","whiteAlpha.300")(e)},_disabled:{opacity:.4,cursor:"not-allowed"}}}},enclosed:function(e){var{colorScheme:t}=e;return{tab:{borderTopRadius:"md",border:"1px solid",borderColor:"transparent",mb:"-1px",_selected:{color:u(t+".600",t+".300")(e),borderColor:"inherit",borderBottomColor:u("white","gray.800")(e)}},tablist:{mb:"-1px",borderBottom:"1px solid",borderColor:"inherit"}}},"enclosed-colored":function(e){var{colorScheme:t}=e;return{tab:{border:"1px solid",borderColor:"inherit",bg:u("gray.50","whiteAlpha.50")(e),mb:"-1px",_notLast:{mr:"-1px"},_selected:{bg:u("#fff","gray.800")(e),color:u(t+".600",t+".300")(e),borderColor:"inherit",borderTopColor:"currentColor",borderBottomColor:"transparent"}},tablist:{mb:"-1px",borderBottom:"1px solid",borderColor:"inherit"}}},"soft-rounded":function(e){var{colorScheme:t,theme:n}=e;return{tab:{borderRadius:"full",fontWeight:"semibold",color:"gray.600",_selected:{color:i(n,t+".700"),bg:i(n,t+".100")}}}},"solid-rounded":function(e){var{colorScheme:t}=e;return{tab:{borderRadius:"full",fontWeight:"semibold",color:u("gray.600","inherit")(e),_selected:{color:u("#fff","gray.800")(e),bg:u(t+".600",t+".300")(e)}}}},unstyled:{}},defaultProps:{size:"md",variant:"line",colorScheme:"blue"}},it={parts:["container","label","closeButton"],variants:{subtle:e=>({container:w.variants.subtle(e)}),solid:e=>({container:w.variants.solid(e)}),outline:e=>({container:w.variants.outline(e)})},baseStyle:{container:{fontWeight:"medium",lineHeight:1.2,outline:0,_focus:{boxShadow:"outline"}},label:{lineHeight:1.2},closeButton:{fontSize:"18px",w:"1.25rem",h:"1.25rem",borderRadius:"sm",ml:"0.375rem",mr:"-1",opacity:.5,_disabled:{opacity:.4},_focus:{boxShadow:"outline",bg:"rgba(0, 0, 0, 0.14)"},_hover:{opacity:.8},_active:{opacity:1}}},sizes:{sm:{container:{minH:"1.25rem",minW:"1.25rem",fontSize:"xs",px:1,borderRadius:"sm"}},md:{container:{minH:"1.5rem",minW:"1.5rem",fontSize:"sm",borderRadius:"md",px:2}},lg:{container:{minH:8,minW:8,fontSize:"md",borderRadius:"md",px:3}}},defaultProps:{size:"md",variant:"subtle",colorScheme:"gray"}};function lt(){return(lt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var st=lt({},re.baseStyle.field,{paddingY:"8px",minHeight:"80px",lineHeight:"short"}),ut={outline:e=>re.variants.outline(e).field,flushed:e=>re.variants.flushed(e).field,filled:e=>re.variants.filled(e).field,unstyled:re.variants.unstyled.field},ct={sm:re.sizes.sm.field,md:re.sizes.md.field,lg:re.sizes.lg.field};const ft={Accordion:{parts:["container","button","panel"],baseStyle:{container:{borderTopWidth:"1px",borderColor:"inherit",_last:{borderBottomWidth:"1px"}},button:{fontSize:"1rem",_focus:{boxShadow:"outline"},_hover:{bg:"blackAlpha.50"},_disabled:{opacity:.4,cursor:"not-allowed"},px:4,py:2},panel:{pt:2,px:4,pb:5}}},Alert:d,Avatar:x,Badge:w,Breadcrumb:{parts:["link","separator"],baseStyle:{link:{transition:"all 0.15s ease-out",cursor:"pointer",textDecoration:"none",outline:"none",color:"inherit",_hover:{textDecoration:"underline"},_focus:{boxShadow:"outline"}}}},Button:E,Checkbox:O,CloseButton:P,Code:M,Drawer:Q,Editable:{parts:["preview","input"],baseStyle:{preview:{borderRadius:"md",py:"3px",transition:"all 0.2s"},input:{borderRadius:"md",py:"3px",transition:"all 0.2s",width:"full",_focus:{boxShadow:"outline"},_placeholder:{opacity:.6}}}},Form:ee,FormLabel:{baseStyle:{fontSize:"md",mr:3,mb:2,fontWeight:"medium",transition:"all 0.2s",opacity:1,_disabled:{opacity:.4}}},Heading:{baseStyle:{fontFamily:"heading",fontWeight:"bold"},sizes:{"4xl":{fontSize:["6xl",null,"7xl"],lineHeight:1},"3xl":{fontSize:["5xl",null,"6xl"],lineHeight:1},"2xl":{fontSize:["4xl",null,"5xl"],lineHeight:["2.5rem",null,"1"]},xl:{fontSize:["3xl",null,"4xl"],lineHeight:["2.25rem",null,"2.5rem"]},lg:{fontSize:["2xl",null,"3xl"],lineHeight:["2rem",null,"2.25rem"]},md:{fontSize:"xl",lineHeight:"1.75rem"},sm:{fontSize:"md",lineHeight:"1.5rem"},xs:{fontSize:"sm",lineHeight:"1.25rem"}},defaultProps:{size:"xl"}},Input:re,Kbd:oe,Link:{baseStyle:{transition:"all 0.15s ease-out",cursor:"pointer",textDecoration:"none",outline:"none",color:"inherit",_hover:{textDecoration:"underline"},_focus:{boxShadow:"outline"}}},Menu:ce,Modal:I,NumberInput:ye,PinInput:xe,Popover:Ae,Progress:Me,Radio:De,Select:Ue,Skeleton:qe,SkipLink:$e,Slider:Ze,Spinner:{sizes:{xs:{w:"0.75rem",h:"0.75rem"},sm:{w:"1rem",h:"1rem"},md:{w:"1.5rem",h:"1.5rem"},lg:{w:"2rem",h:"2rem"},xl:{w:"3rem",h:"3rem"}},defaultProps:{size:"md"}},Stat:{parts:["label","number","icon","helpText"],baseStyle:{label:{fontWeight:"medium"},helpText:{opacity:.8,marginBottom:2},number:{verticalAlign:"baseline",fontWeight:"semibold"},icon:{mr:1,w:"14px",h:"14px",verticalAlign:"middle"}},sizes:{md:{label:{fontSize:"sm"},helpText:{fontSize:"sm"},number:{fontSize:"2xl"}}},defaultProps:{size:"md"}},Switch:tt,Tabs:at,Tag:it,Textarea:{baseStyle:st,sizes:ct,variants:ut,defaultProps:{size:"md",variant:"outline"}},Tooltip:{baseStyle:function(e){return{px:"8px",py:"2px",bg:u("gray.700","gray.300")(e),color:u("whiteAlpha.900","gray.900")(e),borderRadius:"sm",fontWeight:"medium",pointerEvents:"none",fontSize:"sm",boxShadow:"md",maxW:"320px",zIndex:"tooltip"}}}};function dt(){return(dt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var pt;function ht(){return(ht=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function mt(){return(mt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}const vt=mt({},ht({breakpoints:(pt=(0,a.fromEntries)(Object.entries(dt({base:"0em"},{sm:"30em",md:"48em",lg:"62em",xl:"80em"})).sort(((e,t)=>parseInt(e[1],10)>parseInt(t[1],10)?1:-1))),Object.assign(Object.values(pt),pt)),zIndices:{hide:-1,auto:"auto",base:0,docked:10,dropdown:1e3,sticky:1100,banner:1200,overlay:1300,modal:1400,popover:1500,skipLink:1600,toast:1700,tooltip:1800},radii:{none:"0",sm:"0.125rem",base:"0.25rem",md:"0.375rem",lg:"0.5rem",xl:"0.75rem","2xl":"1rem","3xl":"1.5rem",full:"9999px"},colors:{transparent:"transparent",current:"currentColor",black:"#000000",white:"#FFFFFF",whiteAlpha:{50:"rgba(255, 255, 255, 0.04)",100:"rgba(255, 255, 255, 0.06)",200:"rgba(255, 255, 255, 0.08)",300:"rgba(255, 255, 255, 0.16)",400:"rgba(255, 255, 255, 0.24)",500:"rgba(255, 255, 255, 0.36)",600:"rgba(255, 255, 255, 0.48)",700:"rgba(255, 255, 255, 0.64)",800:"rgba(255, 255, 255, 0.80)",900:"rgba(255, 255, 255, 0.92)"},blackAlpha:{50:"rgba(0, 0, 0, 0.04)",100:"rgba(0, 0, 0, 0.06)",200:"rgba(0, 0, 0, 0.08)",300:"rgba(0, 0, 0, 0.16)",400:"rgba(0, 0, 0, 0.24)",500:"rgba(0, 0, 0, 0.36)",600:"rgba(0, 0, 0, 0.48)",700:"rgba(0, 0, 0, 0.64)",800:"rgba(0, 0, 0, 0.80)",900:"rgba(0, 0, 0, 0.92)"},gray:{50:"#F7FAFC",100:"#EDF2F7",200:"#E2E8F0",300:"#CBD5E0",400:"#A0AEC0",500:"#718096",600:"#4A5568",700:"#2D3748",800:"#1A202C",900:"#171923"},red:{50:"#FFF5F5",100:"#FED7D7",200:"#FEB2B2",300:"#FC8181",400:"#F56565",500:"#E53E3E",600:"#C53030",700:"#9B2C2C",800:"#822727",900:"#63171B"},orange:{50:"#FFFAF0",100:"#FEEBC8",200:"#FBD38D",300:"#F6AD55",400:"#ED8936",500:"#DD6B20",600:"#C05621",700:"#9C4221",800:"#7B341E",900:"#652B19"},yellow:{50:"#FFFFF0",100:"#FEFCBF",200:"#FAF089",300:"#F6E05E",400:"#ECC94B",500:"#D69E2E",600:"#B7791F",700:"#975A16",800:"#744210",900:"#5F370E"},green:{50:"#F0FFF4",100:"#C6F6D5",200:"#9AE6B4",300:"#68D391",400:"#48BB78",500:"#38A169",600:"#2F855A",700:"#276749",800:"#22543D",900:"#1C4532"},teal:{50:"#E6FFFA",100:"#B2F5EA",200:"#81E6D9",300:"#4FD1C5",400:"#38B2AC",500:"#319795",600:"#2C7A7B",700:"#285E61",800:"#234E52",900:"#1D4044"},blue:{50:"#ebf8ff",100:"#bee3f8",200:"#90cdf4",300:"#63b3ed",400:"#4299e1",500:"#3182ce",600:"#2b6cb0",700:"#2c5282",800:"#2a4365",900:"#1A365D"},cyan:{50:"#EDFDFD",100:"#C4F1F9",200:"#9DECF9",300:"#76E4F7",400:"#0BC5EA",500:"#00B5D8",600:"#00A3C4",700:"#0987A0",800:"#086F83",900:"#065666"},purple:{50:"#FAF5FF",100:"#E9D8FD",200:"#D6BCFA",300:"#B794F4",400:"#9F7AEA",500:"#805AD5",600:"#6B46C1",700:"#553C9A",800:"#44337A",900:"#322659"},pink:{50:"#FFF5F7",100:"#FED7E2",200:"#FBB6CE",300:"#F687B3",400:"#ED64A6",500:"#D53F8C",600:"#B83280",700:"#97266D",800:"#702459",900:"#521B41"},linkedin:{50:"#E8F4F9",100:"#CFEDFB",200:"#9BDAF3",300:"#68C7EC",400:"#34B3E4",500:"#00A0DC",600:"#008CC9",700:"#0077B5",800:"#005E93",900:"#004471"},facebook:{50:"#E8F4F9",100:"#D9DEE9",200:"#B7C2DA",300:"#6482C0",400:"#4267B2",500:"#385898",600:"#314E89",700:"#29487D",800:"#223B67",900:"#1E355B"},messenger:{50:"#D0E6FF",100:"#B9DAFF",200:"#A2CDFF",300:"#7AB8FF",400:"#2E90FF",500:"#0078FF",600:"#0063D1",700:"#0052AC",800:"#003C7E",900:"#002C5C"},whatsapp:{50:"#E2F7F4",100:"#C3F0E9",200:"#A0E7DC",300:"#76DCCD",400:"#43CFBA",500:"#00BFA5",600:"#00AC92",700:"#009780",800:"#007D6A",900:"#005A4C"},twitter:{50:"#E5F4FD",100:"#C8E9FB",200:"#A8DCFA",300:"#83CDF7",400:"#57BBF5",500:"#1DA1F2",600:"#1A94DA",700:"#1681BF",800:"#136B9E",900:"#0D4D71"},telegram:{50:"#E3F2F9",100:"#C5E4F3",200:"#A2D4EC",300:"#7AC1E4",400:"#47A9DA",500:"#0088CC",600:"#007AB8",700:"#006BA1",800:"#005885",900:"#003F5E"}}},{letterSpacings:{tighter:"-0.05em",tight:"-0.025em",normal:"0",wide:"0.025em",wider:"0.05em",widest:"0.1em"},lineHeights:{normal:"normal",none:1,shorter:1.25,short:1.375,base:1.5,tall:1.625,taller:"2",3:".75rem",4:"1rem",5:"1.25rem",6:"1.5rem",7:"1.75rem",8:"2rem",9:"2.25rem",10:"2.5rem"},fontWeights:{hairline:100,thin:200,light:300,normal:400,medium:500,semibold:600,bold:700,extrabold:800,black:900},fonts:{heading:'-apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',body:'-apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',mono:'SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace'},fontSizes:{xs:"0.75rem",sm:"0.875rem",md:"1rem",lg:"1.125rem",xl:"1.25rem","2xl":"1.5rem","3xl":"1.875rem","4xl":"2.25rem","5xl":"3rem","6xl":"3.75rem","7xl":"4.5rem","8xl":"6rem","9xl":"8rem"}},{sizes:m,shadows:{xs:"0 0 0 1px rgba(0, 0, 0, 0.05)",sm:"0 1px 2px 0 rgba(0, 0, 0, 0.05)",base:"0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)",md:"0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)",lg:"0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)",xl:"0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)","2xl":"0 25px 50px -12px rgba(0, 0, 0, 0.25)",outline:"0 0 0 3px rgba(66, 153, 225, 0.6)",inner:"inset 0 2px 4px 0 rgba(0,0,0,0.06)",none:"none","dark-lg":"rgba(0, 0, 0, 0.1) 0px 0px 0px 1px, rgba(0, 0, 0, 0.2) 0px 5px 10px, rgba(0, 0, 0, 0.4) 0px 15px 40px"},space:p,borders:{none:0,"1px":"1px solid","2px":"2px solid","4px":"4px solid","8px":"8px solid"},transition:{property:{common:"background-color, border-color, color, fill, stroke, opacity, box-shadow, transform",colors:"background-color, border-color, color, fill, stroke",dimensions:"width, height",position:"left, right, top, bottom",background:"background-color, background-image, background-position"},easing:{"ease-in":"cubic-bezier(0.4, 0, 1, 1)","ease-out":"cubic-bezier(0, 0, 0.2, 1)","ease-in-out":"cubic-bezier(0.4, 0, 0.2, 1)"},duration:{"ultra-fast":"50ms",faster:"100ms",fast:"150ms",normal:"200ms",slow:"300ms",slower:"400ms","ultra-slow":"500ms"}}}),{components:ft,styles:{global:e=>({body:{fontFamily:"body",color:u("gray.800","whiteAlpha.900")(e),bg:u("white","gray.800")(e),transition:"background-color 0.2s",lineHeight:"base"},"*::placeholder":{color:u("gray.400","whiteAlpha.400")(e)},"*, *::before, &::after":{borderColor:u("gray.200","whiteAlpha.300")(e),wordWrap:"break-word"}})},config:{useSystemColorMode:!1,initialColorMode:"light"}}),gt=()=>t.createElement(We.xB,{styles:'\n      html {\n        line-height: 1.5;\n        -webkit-text-size-adjust: 100%;\n        font-family: system-ui, sans-serif;\n        -webkit-font-smoothing: antialiased;\n        text-rendering: optimizeLegibility;      \n        -moz-osx-font-smoothing: grayscale; \n        touch-action: manipulation; \n      }\n\n      body {\n        position: relative;\n        min-height: 100%;\n        font-feature-settings: \'kern\';\n      }\n\n      *,\n      *::before,\n      *::after {\n        border-width: 0;\n        border-style: solid;\n        box-sizing: border-box;\n      }\n\n      main {\n        display: block;\n      }\n\n      hr {\n        border-top-width: 1px;\n        box-sizing: content-box;\n        height: 0;\n        overflow: visible;\n      }\n\n      pre,\n      code,\n      kbd,\n      samp {\n        font-family: SFMono-Regular,  Menlo, Monaco, Consolas, monospace;\n        font-size: 1em;\n      }\n\n      a {\n        background-color: transparent;\n        color: inherit;\n        text-decoration: inherit;\n      }\n\n      abbr[title] {\n        border-bottom: none;\n        text-decoration: underline;\n        -webkit-text-decoration: underline dotted;\n        text-decoration: underline dotted;\n      }\n\n      b,\n      strong {\n        font-weight: bold;\n      }\n\n      small {\n        font-size: 80%;\n      }\n\n      sub,\n      sup {\n        font-size: 75%;\n        line-height: 0;\n        position: relative;\n        vertical-align: baseline;\n      }\n\n      sub {\n        bottom: -0.25em;\n      }\n\n      sup {\n        top: -0.5em;\n      }\n\n      img {\n        border-style: none;\n      }\n\n      button,\n      input,\n      optgroup,\n      select,\n      textarea {\n        font-family: inherit;\n        font-size: 100%;\n        line-height: 1.15;\n        margin: 0;\n      }\n\n      button,\n      input {\n        overflow: visible;\n      }\n\n      button,\n      select {\n        text-transform: none;\n      }\n\n      button::-moz-focus-inner,\n      [type="button"]::-moz-focus-inner,\n      [type="reset"]::-moz-focus-inner,\n      [type="submit"]::-moz-focus-inner {\n        border-style: none;\n        padding: 0;\n      }\n\n      fieldset {\n        padding: 0.35em 0.75em 0.625em;\n      }\n\n      legend {\n        box-sizing: border-box;\n        color: inherit;\n        display: table;\n        max-width: 100%;\n        padding: 0;\n        white-space: normal;\n      }\n\n      progress {\n        vertical-align: baseline;\n      }\n\n      textarea {\n        overflow: auto;\n      }\n\n      [type="checkbox"],\n      [type="radio"] {\n        box-sizing: border-box;\n        padding: 0;\n      }\n\n      [type="number"]::-webkit-inner-spin-button,\n      [type="number"]::-webkit-outer-spin-button {\n        -webkit-appearance: none !important;\n      }\n\n      input[type="number"] {\n        -moz-appearance: textfield;\n      }\n\n      [type="search"] {\n        -webkit-appearance: textfield;\n        outline-offset: -2px;\n      }\n\n      [type="search"]::-webkit-search-decoration {\n        -webkit-appearance: none !important;\n      }\n\n      ::-webkit-file-upload-button {\n        -webkit-appearance: button;\n        font: inherit;\n      }\n\n      details {\n        display: block;\n      }\n\n      summary {\n        display: list-item;\n      }\n\n      template {\n        display: none;\n      }\n\n      [hidden] {\n        display: none !important;\n      }\n\n      body,\n      blockquote,\n      dl,\n      dd,\n      h1,\n      h2,\n      h3,\n      h4,\n      h5,\n      h6,\n      hr,\n      figure,\n      p,\n      pre {\n        margin: 0;\n      }\n\n      button {\n        background: transparent;\n        padding: 0;\n      }\n\n      fieldset {\n        margin: 0;\n        padding: 0;\n      }\n\n      ol,\n      ul {\n        margin: 0;\n        padding: 0;\n      }\n\n      textarea {\n        resize: vertical;\n      }\n\n      button,\n      [role="button"] {\n        cursor: pointer;\n      }\n\n      button::-moz-focus-inner {\n        border: 0 !important;\n      }\n\n      table {\n        border-collapse: collapse;\n      }\n\n      h1,\n      h2,\n      h3,\n      h4,\n      h5,\n      h6 {\n        font-size: inherit;\n        font-weight: inherit;\n      }\n\n      button,\n      input,\n      optgroup,\n      select,\n      textarea {\n        padding: 0;\n        line-height: inherit;\n        color: inherit;\n      }\n\n      img,\n      svg,\n      video,\n      canvas,\n      audio,\n      iframe,\n      embed,\n      object {\n        display: block;\n        vertical-align: middle;\n      }\n\n      img,\n      video {\n        max-width: 100%;\n        height: auto;\n      }\n\n      [data-js-focus-visible] :focus:not([data-focus-visible-added]) {\n        outline: none;\n        box-shadow: none;\n      }\n\n      select::-ms-expand {\n        display: none;\n      }\n    '});function yt(){var e,n,r=t.useRef(!1),[o,a]=t.useState(0);return e=()=>{r.current=!0},void 0===n&&(n=[]),t.useEffect((()=>()=>e()),n),t.useCallback((()=>{r.current||a(o+1)}),[o])}var bt=a.isBrowser?t.useLayoutEffect:t.useEffect,[xt,wt]=(0,a.createContext)({strict:!1,name:"PortalManagerContext"}),kt=e=>{var{children:n,zIndex:r}=e,o=t.useRef(null),a=yt();bt((()=>{a()}),[]);var i=wt(),l={node:(null==i?void 0:i.node)||o.current,zIndex:r};return t.createElement(xt,{value:l},n,t.createElement("div",{className:"chakra-portal-manager",ref:o}))};a.__DEV__&&(kt.displayName="PortalManager");var St=n(1180),Ct=e=>{var{children:n,colorModeManager:r,portalZIndex:o,resetCSS:a=!0,theme:i=vt}=e;return t.createElement(St.ThemeProvider,{theme:i},t.createElement(St.ColorModeProvider,{colorModeManager:r,options:i.config},a&&t.createElement(gt,null),t.createElement(St.GlobalStyle,null),o?t.createElement(kt,{zIndex:o},n):n))},Et=n(4442);function _t(e){void 0===e&&(e=!1);var[n,r]=(0,t.useState)(e);return[n,{on:(0,t.useCallback)((()=>{r(!0)}),[]),off:(0,t.useCallback)((()=>{r(!1)}),[]),toggle:(0,t.useCallback)((()=>{r((e=>!e))}),[])}]}var At=n(658);function Ot(e,n){var{current:r}=t.useRef(void 0!==e);return[r,r&&void 0!==e?e:n]}var Pt={border:"0px",clip:"rect(0px, 0px, 0px, 0px)",height:"1px",width:"1px",margin:"-1px",padding:"0px",overflow:"hidden",whiteSpace:"nowrap",position:"absolute"},Rt=(0,St.chakra)("span",{baseStyle:Pt});a.__DEV__&&(Rt.displayName="VisuallyHidden");var Tt=(0,St.chakra)("input",{baseStyle:Pt});function Mt(){return(Mt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function zt(e){e.preventDefault(),e.stopPropagation()}a.__DEV__&&(Tt.displayName="VisuallyHiddenInput");var Lt=n(5284);function Dt(){return(Dt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var jt=(0,St.forwardRef)(((e,n)=>{var r=(0,St.useMultiStyleConfig)("Switch",e),o=(0,Lt.Lr)(e),{state:i,getInputProps:l,getCheckboxProps:s,htmlProps:u}=function(e){void 0===e&&(e={});var{defaultIsChecked:n,isChecked:r,isFocusable:o,isDisabled:i,isReadOnly:l,isRequired:s,onChange:u,isIndeterminate:c,isInvalid:f,name:d,value:p,id:h}=e,m=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,["defaultIsChecked","isChecked","isFocusable","isDisabled","isReadOnly","isRequired","onChange","isIndeterminate","isInvalid","name","value","id"]),[v,g]=_t(),[y,b]=_t(),[x,w]=_t(),k=(0,t.useRef)(null),[S,C]=(0,t.useState)(!!n),[E,_]=Ot(r,S),A=(0,t.useCallback)((e=>{l||i?e.preventDefault():(E||C(_?e.target.checked:!!c||e.target.checked),null==u||u(e))}),[l,i,_,E,c,u]);bt((()=>{k.current&&(k.current.indeterminate=Boolean(c))}),[c]);var O=i&&!o,P=(0,t.useCallback)((e=>{" "===e.key&&w.on()}),[w]),R=(0,t.useCallback)((e=>{" "===e.key&&w.off()}),[w]);return{state:{isInvalid:f,isFocused:v,isChecked:_,isActive:x,isHovered:y,isIndeterminate:c,isDisabled:i,isReadOnly:l,isRequired:s},getCheckboxProps:function(e,t){return void 0===e&&(e={}),void 0===t&&(t=null),Mt({},e,{ref:t,"data-active":(0,a.dataAttr)(x),"data-hover":(0,a.dataAttr)(y),"data-checked":(0,a.dataAttr)(_),"data-focus":(0,a.dataAttr)(v),"data-indeterminate":(0,a.dataAttr)(c),"data-disabled":(0,a.dataAttr)(i),"data-invalid":(0,a.dataAttr)(f),"data-readonly":(0,a.dataAttr)(l),"aria-hidden":!0,onMouseDown:(0,At.v0)(e.onMouseDown,(e=>{e.preventDefault(),w.on()})),onMouseUp:(0,At.v0)(e.onMouseUp,w.off),onMouseEnter:(0,At.v0)(e.onMouseEnter,b.on),onMouseLeave:(0,At.v0)(e.onMouseLeave,b.off)})},getInputProps:function(e,t){return void 0===e&&(e={}),void 0===t&&(t=null),Mt({},e,{ref:(0,a.mergeRefs)(k,t),type:"checkbox",name:d,value:p,id:h,onChange:(0,At.v0)(e.onChange,A),onBlur:(0,At.v0)(e.onBlur,g.off),onFocus:(0,At.v0)(e.onFocus,g.on),onKeyDown:(0,At.v0)(e.onKeyDown,P),onKeyUp:(0,At.v0)(e.onKeyUp,R),required:s,checked:_,disabled:O,readOnly:l,"aria-invalid":f,"aria-disabled":i,style:Pt})},getLabelProps:function(e,t){return void 0===e&&(e={}),void 0===t&&(t=null),Mt({},e,{ref:t,onMouseDown:(0,At.v0)(e.onMouseDown,zt),onTouchStart:(0,At.v0)(e.onTouchStart,zt),"data-disabled":(0,a.dataAttr)(i),"data-checked":(0,a.dataAttr)(_),"data-invalid":(0,a.dataAttr)(f)})},htmlProps:m}}(o),c=l({},n),f=s(),d=Dt({display:"inline-flex",flexShrink:0,justifyContent:"flex-start",boxSizing:"content-box",cursor:"pointer"},r.track);return t.createElement(St.chakra.label,Dt({},u,{className:(0,a.cx)("chakra-switch",e.className),__css:{display:"inline-block",verticalAlign:"middle",lineHeight:"normal"}}),t.createElement("input",Dt({className:"chakra-switch__input"},c)),t.createElement(St.chakra.span,Dt({},f,{className:"chakra-switch__track",__css:d}),t.createElement(St.chakra.span,{__css:r.thumb,className:"chakra-switch__thumb","data-checked":(0,a.dataAttr)(i.isChecked),"data-hover":(0,a.dataAttr)(i.isHovered)})))}));a.__DEV__&&(jt.displayName="Switch");const Bt=function(){var e=(0,Et.useColorMode)(),n=e.colorMode,r=e.toggleColorMode,o="dark"===n;return t.createElement(jt,{position:"fixed",top:"1rem",right:"1rem",color:"green",isChecked:o,onChange:r})};function Ft(){return(Ft=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var Nt=(0,St.forwardRef)((function(e,n){var{direction:r,align:o,justify:a,wrap:i,basis:l,grow:s,shrink:u}=e,c=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,["direction","align","justify","wrap","basis","grow","shrink"]),f={display:"flex",flexDirection:r,alignItems:o,justifyContent:a,flexWrap:i,flexBasis:l,flexGrow:s,flexShrink:u};return t.createElement(St.chakra.div,Ft({ref:n,__css:f},c))}));function It(){return(It=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}a.__DEV__&&(Nt.displayName="Flex");var Vt=(0,St.forwardRef)((function(e,n){var r=(0,St.useStyleConfig)("Heading",e),o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}((0,Lt.Lr)(e),["className"]);return t.createElement(St.chakra.h2,It({ref:n,className:(0,a.cx)("chakra-heading",e.className)},o,{__css:r}))}));a.__DEV__&&(Vt.displayName="Heading");var Ut=n(5697),Wt=function(e){return t.createElement(Nt,{justifyContent:"center",alignItems:"center",height:"100vh"},t.createElement(Vt,{fontSize:"50px"},e.children))};Wt.propTypes={children:n.n(Ut)().object.isRequired};const Ht=Wt;var qt=function(e,t){return(qt=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)};function $t(e,t){function n(){this.constructor=e}qt(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var Gt=function(){return(Gt=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};function Kt(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n}function Qt(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,a=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=a.next()).done;)i.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=a.return)&&n.call(a)}finally{if(o)throw o.error}}return i}function Xt(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(Qt(arguments[t]));return e}var Yt=0,Zt="undefined"!=typeof window&&void 0!==window.requestAnimationFrame?function(e){return window.requestAnimationFrame(e)}:function(e){var t=Date.now(),n=Math.max(0,16.7-(t-Yt));Yt=t+n,setTimeout((function(){return e(Yt)}),n)},Jt=1/60*1e3,en=!0,tn=!1,nn=!1,rn={delta:0,timestamp:0},on=["read","update","preRender","render","postRender"],an=function(e){return tn=e},ln=on.reduce((function(e,t){return e[t]=function(e){var t=[],n=[],r=0,o=!1,a=0,i=new WeakSet,l=new WeakSet,s={cancel:function(e){var t=n.indexOf(e);i.add(e),-1!==t&&n.splice(t,1)},process:function(u){var c,f;if(o=!0,t=(c=[n,t])[0],(n=c[1]).length=0,r=t.length)for(a=0;a<r;a++)(f=t[a])(u),!0!==l.has(f)||i.has(f)||(s.schedule(f),e(!0));o=!1},schedule:function(e,a,s){void 0===a&&(a=!1),void 0===s&&(s=!1);var u=s&&o,c=u?t:n;i.delete(e),a&&l.add(e),-1===c.indexOf(e)&&(c.push(e),u&&(r=t.length))}};return s}(an),e}),{}),sn=on.reduce((function(e,t){var n=ln[t];return e[t]=function(e,t,r){return void 0===t&&(t=!1),void 0===r&&(r=!1),tn||dn(),n.schedule(e,t,r),e},e}),{}),un=on.reduce((function(e,t){return e[t]=ln[t].cancel,e}),{}),cn=function(e){return ln[e].process(rn)},fn=function(e){tn=!1,rn.delta=en?Jt:Math.max(Math.min(e-rn.timestamp,40),1),en||(Jt=rn.delta),rn.timestamp=e,nn=!0,on.forEach(cn),nn=!1,tn&&(en=!1,Zt(fn))},dn=function(){tn=!0,en=!0,nn||Zt(fn)},pn=function(){return rn};const hn=sn;var mn=function(e,t){return function(n){return Math.max(Math.min(n,t),e)}},vn=function(e){return e%1?Number(e.toFixed(5)):e},gn=/(-)?(\d[\d\.]*)/g,yn=/(#[0-9a-f]{6}|#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2,3}\s*\/*\s*[\d\.]+%?\))/gi,bn=/^(#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2,3}\s*\/*\s*[\d\.]+%?\))$/i,xn={test:function(e){return"number"==typeof e},parse:parseFloat,transform:function(e){return e}},wn=Gt(Gt({},xn),{transform:mn(0,1)}),kn=Gt(Gt({},xn),{default:1}),Sn=function(e){return{test:function(t){return"string"==typeof t&&t.endsWith(e)&&1===t.split(" ").length},parse:parseFloat,transform:function(t){return""+t+e}}},Cn=Sn("deg"),En=Sn("%"),_n=Sn("px"),An=Sn("vh"),On=Sn("vw"),Pn=Gt(Gt({},En),{parse:function(e){return En.parse(e)/100},transform:function(e){return En.transform(100*e)}}),Rn=mn(0,255),Tn=function(e){return void 0!==e.red},Mn=function(e){return void 0!==e.hue},zn=function(e){return function(t){if("string"!=typeof t)return t;for(var n={},r=(a=t,a.substring(a.indexOf("(")+1,a.lastIndexOf(")"))).replace(/(,|\/)/g," ").split(/ \s*/),o=0;o<4;o++)n[e[o]]=void 0!==r[o]?parseFloat(r[o]):1;var a;return n}},Ln=Gt(Gt({},xn),{transform:function(e){return Math.round(Rn(e))}});function Dn(e,t){return e.startsWith(t)&&bn.test(e)}var jn={test:function(e){return"string"==typeof e?Dn(e,"rgb"):Tn(e)},parse:zn(["red","green","blue","alpha"]),transform:function(e){var t=e.red,n=e.green,r=e.blue,o=e.alpha,a=void 0===o?1:o;return function(e){var t=e.alpha;return"rgba("+e.red+", "+e.green+", "+e.blue+", "+(void 0===t?1:t)+")"}({red:Ln.transform(t),green:Ln.transform(n),blue:Ln.transform(r),alpha:vn(wn.transform(a))})}},Bn={test:function(e){return"string"==typeof e?Dn(e,"hsl"):Mn(e)},parse:zn(["hue","saturation","lightness","alpha"]),transform:function(e){var t=e.hue,n=e.saturation,r=e.lightness,o=e.alpha,a=void 0===o?1:o;return function(e){var t=e.alpha;return"hsla("+e.hue+", "+e.saturation+", "+e.lightness+", "+(void 0===t?1:t)+")"}({hue:Math.round(t),saturation:En.transform(vn(n)),lightness:En.transform(vn(r)),alpha:vn(wn.transform(a))})}},Fn=Gt(Gt({},jn),{test:function(e){return"string"==typeof e&&Dn(e,"#")},parse:function(e){var t="",n="",r="";return e.length>4?(t=e.substr(1,2),n=e.substr(3,2),r=e.substr(5,2)):(t=e.substr(1,1),n=e.substr(2,1),r=e.substr(3,1),t+=t,n+=n,r+=r),{red:parseInt(t,16),green:parseInt(n,16),blue:parseInt(r,16),alpha:1}}}),Nn={test:function(e){return"string"==typeof e&&bn.test(e)||Tn(e)||Mn(e)},parse:function(e){return jn.test(e)?jn.parse(e):Bn.test(e)?Bn.parse(e):Fn.test(e)?Fn.parse(e):e},transform:function(e){return Tn(e)?jn.transform(e):Mn(e)?Bn.transform(e):e}},In="${c}",Vn="${n}",Un=function(e){return"number"==typeof e?0:e},Wn={test:function(e){if("string"!=typeof e||!isNaN(e))return!1;var t=0,n=e.match(gn),r=e.match(yn);return n&&(t+=n.length),r&&(t+=r.length),t>0},parse:function(e){var t=e,n=[],r=t.match(yn);r&&(t=t.replace(yn,In),n.push.apply(n,r.map(Nn.parse)));var o=t.match(gn);return o&&n.push.apply(n,o.map(xn.parse)),n},createTransformer:function(e){var t=e,n=0,r=e.match(yn),o=r?r.length:0;if(r)for(var a=0;a<o;a++)t=t.replace(r[a],In),n++;var i=t.match(gn),l=i?i.length:0;if(i)for(a=0;a<l;a++)t=t.replace(i[a],Vn),n++;return function(e){for(var r=t,a=0;a<n;a++)r=r.replace(a<o?In:Vn,a<o?Nn.transform(e[a]):vn(e[a]));return r}},getAnimatableNone:function(e){var t=Wn.parse(e);return Wn.createTransformer(e)(t.map(Un))}},Hn=function(e,t,n){return Math.min(Math.max(n,e),t)};function qn(e,t){return e*Math.sqrt(1-t*t)}var $n=["duration","bounce"],Gn=["stiffness","damping","mass"];function Kn(e,t){return t.some((function(t){return void 0!==e[t]}))}function Qn(e){var t=e.from,n=void 0===t?0:t,r=e.to,o=void 0===r?1:r,a=e.restSpeed,i=void 0===a?2:a,l=e.restDelta,s=Kt(e,["from","to","restSpeed","restDelta"]),u={done:!1,value:n},c=function(e){var t=Gt({velocity:0,stiffness:100,damping:10,mass:1,isResolvedFromDuration:!1},e);if(!Kn(e,Gn)&&Kn(e,$n)){var n=function(e){var t,n,r=e.duration,o=void 0===r?800:r,a=e.bounce,i=void 0===a?.25:a,l=e.velocity,s=void 0===l?0:l,u=e.mass,c=void 0===u?1:u,f=1-i;f=Hn(.05,1,f),o=Hn(.01,10,o/1e3),f<1?(t=function(e){var t=e*f,n=t*o;return.001-(t-s)/qn(e,f)*Math.exp(-n)},n=function(e){var n=e*f*o,r=n*s+s,a=Math.pow(f,2)*Math.pow(e,2)*o,i=Math.exp(-n),l=qn(Math.pow(e,2),f);return(.001-t(e)>0?-1:1)*((r-a)*i)/l}):(t=function(e){return Math.exp(-e*o)*((e-s)*o+1)-.001},n=function(e){return Math.exp(-e*o)*(o*o*(s-e))});var d=function(e,t,n){for(var r=n,o=1;o<12;o++)r-=e(r)/t(r);return r}(t,n,5/o);if(isNaN(d))return{stiffness:100,damping:10};var p=Math.pow(d,2)*c;return{stiffness:p,damping:2*f*Math.sqrt(c*p)}}(e);(t=Gt(Gt(Gt({},t),n),{velocity:0,mass:1})).isResolvedFromDuration=!0}return t}(s),f=c.stiffness,d=c.damping,p=c.mass,h=c.velocity,m=c.isResolvedFromDuration,v=Xn,g=Xn;function y(){var e=h?-h/1e3:0,t=o-n,r=d/(2*Math.sqrt(f*p)),a=Math.sqrt(f/p)/1e3;if(null!=l||(l=Math.abs(o-n)<=1?.01:.4),r<1){var i=qn(a,r);v=function(n){var l=Math.exp(-r*a*n);return o-l*((e+r*a*t)/i*Math.sin(i*n)+t*Math.cos(i*n))},g=function(n){var o=Math.exp(-r*a*n);return r*a*o*(Math.sin(i*n)*(e+r*a*t)/i+t*Math.cos(i*n))-o*(Math.cos(i*n)*(e+r*a*t)-i*t*Math.sin(i*n))}}else if(1===r)v=function(n){return o-Math.exp(-a*n)*(t+(e+a*t)*n)};else{var s=a*Math.sqrt(r*r-1);v=function(n){var i=Math.exp(-r*a*n),l=Math.min(s*n,300);return o-i*((e+r*a*t)*Math.sinh(l)+s*t*Math.cosh(l))/s}}}return y(),{next:function(e){var t=v(e);if(m)u.done=e>=s.duration;else{var n=1e3*g(e),r=Math.abs(n)<=i,a=Math.abs(o-t)<=l;u.done=r&&a}return u.value=u.done?o:t,u},flipTarget:function(){var e;h=-h,n=(e=[o,n])[0],o=e[1],y()}}}Qn.needsInterpolation=function(e,t){return"string"==typeof e||"string"==typeof t};var Xn=function(e){return 0},Yn=function(e,t,n){var r=t-e;return 0===r?1:(n-e)/r},Zn=function(e,t,n){return-n*e+n*t+e},Jn=function(e,t,n){var r=e*e,o=t*t;return Math.sqrt(Math.max(0,n*(o-r)+r))},er=[Fn,jn,Bn],tr=function(e){return er.find((function(t){return t.test(e)}))},nr=function(e){return"'"+e+"' is not an animatable color. Use the equivalent color code instead."},rr=function(e,t){var n=tr(e),r=tr(t);nr(e),nr(t),n.transform,r.transform;var o=n.parse(e),a=r.parse(t),i=Gt({},o),l=n===Bn?Zn:Jn;return function(e){for(var t in i)"alpha"!==t&&(i[t]=l(o[t],a[t],e));return i.alpha=Zn(o.alpha,a.alpha,e),n.transform(i)}},or=function(e){return"number"==typeof e},ar=function(e,t){return function(n){return t(e(n))}},ir=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return e.reduce(ar)};function lr(e,t){return or(e)?function(n){return Zn(e,t,n)}:Nn.test(e)?rr(e,t):fr(e,t)}var sr=function(e,t){var n=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var a=arguments[t],i=0,l=a.length;i<l;i++,o++)r[o]=a[i];return r}(e),r=n.length,o=e.map((function(e,n){return lr(e,t[n])}));return function(e){for(var t=0;t<r;t++)n[t]=o[t](e);return n}},ur=function(e,t){var n=Gt(Gt({},e),t),r={};for(var o in n)void 0!==e[o]&&void 0!==t[o]&&(r[o]=lr(e[o],t[o]));return function(e){for(var t in r)n[t]=r[t](e);return n}};function cr(e){for(var t=Wn.parse(e),n=t.length,r=0,o=0,a=0,i=0;i<n;i++)r||"number"==typeof t[i]?r++:void 0!==t[i].hue?a++:o++;return{parsed:t,numNumbers:r,numRGB:o,numHSL:a}}var fr=function(e,t){var n=Wn.createTransformer(t),r=cr(e),o=cr(t);return r.numHSL===o.numHSL&&r.numRGB===o.numRGB&&(r.numNumbers,o.numNumbers),ir(sr(r.parsed,o.parsed),n)},dr=function(e,t){return function(n){return Zn(e,t,n)}};function pr(e,t,n){var r=void 0===n?{}:n,o=r.clamp,a=void 0===o||o,i=r.ease,l=r.mixer,s=e.length;t.length,!i||!Array.isArray(i)||i.length,e[0]>e[s-1]&&(e=[].concat(e),t=[].concat(t),e.reverse(),t.reverse());var u=function(e,t,n){for(var r,o=[],a=n||("number"==typeof(r=e[0])?dr:"string"==typeof r?Nn.test(r)?rr:fr:Array.isArray(r)?sr:"object"==typeof r?ur:void 0),i=e.length-1,l=0;l<i;l++){var s=a(e[l],e[l+1]);if(t){var u=Array.isArray(t)?t[l]:t;s=ir(u,s)}o.push(s)}return o}(t,i,l),c=2===s?function(e,t){var n=e[0],r=e[1],o=t[0];return function(e){return o(Yn(n,r,e))}}(e,u):function(e,t){var n=e.length,r=n-1;return function(o){var a=0,i=!1;if(o<=e[0]?i=!0:o>=e[r]&&(a=r-1,i=!0),!i){for(var l=1;l<n&&!(e[l]>o||l===r);l++);a=l-1}var s=Yn(e[a],e[a+1],o);return t[a](s)}}(e,u);return a?function(t){return c(Hn(e[0],e[s-1],t))}:c}var hr=function(e){return function(t){return 1-e(1-t)}},mr=function(e){return function(t){return t<=.5?e(2*t)/2:(2-e(2*(1-t)))/2}},vr=function(e){return function(t){return t*t*((e+1)*t-e)}},gr=function(e){var t=vr(e);return function(e){return(e*=2)<1?.5*t(e):.5*(2-Math.pow(2,-10*(e-1)))}},yr=function(e){return e},br=function(e){return function(e){return Math.pow(e,2)}}(),xr=hr(br),wr=mr(br),kr=function(e){return 1-Math.sin(Math.acos(e))},Sr=hr(kr),Cr=mr(Sr),Er=vr(1.525),_r=hr(Er),Ar=mr(Er),Or=gr(1.525),Pr=function(e){if(1===e||0===e)return e;var t=e*e;return e<.36363636363636365?7.5625*t:e<.7272727272727273?9.075*t-9.9*e+3.4:e<.9?12.066481994459833*t-19.63545706371191*e+8.898060941828255:10.8*e*e-20.52*e+10.72},Rr=hr(Pr);function Tr(e,t){return e.map((function(){return t||wr})).splice(0,e.length-1)}function Mr(e){var t=e.from,n=void 0===t?0:t,r=e.to,o=void 0===r?1:r,a=e.ease,i=e.offset,l=e.duration,s=void 0===l?300:l,u={done:!1,value:n},c=Array.isArray(o)?o:[n,o],f=function(e,t){return e.map((function(e){return e*t}))}(null!=i?i:function(e){var t=e.length;return e.map((function(e,n){return 0!==n?n/(t-1):0}))}(c),s);function d(){return pr(f,c,{ease:Array.isArray(a)?a:Tr(c,a)})}var p=d();return{next:function(e){return u.value=p(e),u.done=e>=s,u},flipTarget:function(){c.reverse(),p=d()}}}var zr={keyframes:Mr,spring:Qn,decay:function(e){var t=e.velocity,n=void 0===t?0:t,r=e.from,o=void 0===r?0:r,a=e.power,i=void 0===a?.8:a,l=e.timeConstant,s=void 0===l?350:l,u=e.restDelta,c=void 0===u?.5:u,f=e.modifyTarget,d={done:!1,value:o},p=i*n,h=o+p,m=void 0===f?h:f(h);return m!==h&&(p=m-o),{next:function(e){var t=-p*Math.exp(-e/s);return d.done=!(t>c||t<-c),d.value=d.done?m:m+t,d},flipTarget:function(){}}}};function Lr(e,t,n){return void 0===n&&(n=0),e-t-n}var Dr=function(e){var t=function(t){var n=t.delta;return e(n)};return{start:function(){return hn.update(t,!0,!0)},stop:function(){return un.update(t)}}};function jr(e){var t,n,r,o,a,i=e.from,l=e.autoplay,s=void 0===l||l,u=e.driver,c=void 0===u?Dr:u,f=e.elapsed,d=void 0===f?0:f,p=e.repeat,h=void 0===p?0:p,m=e.repeatType,v=void 0===m?"loop":m,g=e.repeatDelay,y=void 0===g?0:g,b=e.onPlay,x=e.onStop,w=e.onComplete,k=e.onRepeat,S=e.onUpdate,C=Kt(e,["from","autoplay","driver","elapsed","repeat","repeatType","repeatDelay","onPlay","onStop","onComplete","onRepeat","onUpdate"]),E=C.to,_=0,A=C.duration,O=!1,P=!0,R=function(e){if(Array.isArray(e.to))return Mr;if(zr[e.type])return zr[e.type];var t=new Set(Object.keys(e));return t.has("ease")||t.has("duration")&&!t.has("dampingRatio")?Mr:t.has("dampingRatio")||t.has("stiffness")||t.has("mass")||t.has("damping")||t.has("restSpeed")||t.has("restDelta")?Qn:Mr}(C);(null===(n=(t=R).needsInterpolation)||void 0===n?void 0:n.call(t,i,E))&&(a=pr([0,100],[i,E],{clamp:!1}),i=0,E=100);var T=R(Gt(Gt({},C),{from:i,to:E}));return s&&(null==b||b(),(r=c((function(e){if(P||(e=-e),d+=e,!O){var t=T.next(Math.max(0,d));o=t.value,a&&(o=a(o)),O=P?t.done:d<=0}null==S||S(o),O&&(0===_&&(null!=A||(A=d)),_<h?function(e,t,n,r){return r?e>=t+n:e<=-n}(d,A,y,P)&&(_++,"reverse"===v?d=function(e,t,n,r){return void 0===n&&(n=0),void 0===r&&(r=!0),r?Lr(t+-e,t,n):t-(e-t)+n}(d,A,y,P=_%2==0):(d=Lr(d,A,y),"mirror"===v&&T.flipTarget()),O=!1,k&&k()):(r.stop(),w&&w()))}))).start()),{stop:function(){null==x||x(),r.stop()}}}function Br(e,t){return t?e*(1e3/t):0}var Fr=(Math.sqrt,function(e){return e.hasOwnProperty("x")&&e.hasOwnProperty("y")}),Nr=function(e){return Fr(e)&&e.hasOwnProperty("z")},Ir=function(e,t){return Math.abs(e-t)};function Vr(e,t){if(or(e)&&or(t))return Ir(e,t);if(Fr(e)&&Fr(t)){var n=Ir(e.x,t.x),r=Ir(e.y,t.y),o=Nr(e)&&Nr(t)?Ir(e.z,t.z):0;return Math.sqrt(Math.pow(n,2)+Math.pow(r,2)+Math.pow(o,2))}}var Ur=function(e,t){return 1-3*t+3*e},Wr=function(e,t){return 3*t-6*e},Hr=function(e){return 3*e},qr=function(e,t,n){return((Ur(t,n)*e+Wr(t,n))*e+Hr(t))*e},$r=function(e,t,n){return 3*Ur(t,n)*e*e+2*Wr(t,n)*e+Hr(t)},Gr=.1;function Kr(e,t,n,r){if(e===t&&n===r)return yr;for(var o=new Float32Array(11),a=0;a<11;++a)o[a]=qr(a*Gr,e,n);return function(a){return 0===a||1===a?a:qr(function(t){for(var r=0,a=1;10!==a&&o[a]<=t;++a)r+=Gr;--a;var i=r+(t-o[a])/(o[a+1]-o[a])*Gr,l=$r(i,e,n);return l>=.001?function(e,t,n,r){for(var o=0;o<8;++o){var a=$r(t,n,r);if(0===a)return t;t-=(qr(t,n,r)-e)/a}return t}(t,i,e,n):0===l?i:function(e,t,n,r,o){var a,i,l=0;do{(a=qr(i=t+(n-t)/2,r,o)-e)>0?n=i:t=i}while(Math.abs(a)>1e-7&&++l<10);return i}(t,r,r+Gr,e,n)}(a),t,r)}}var Qr=function(e){return"object"==typeof e&&e.hasOwnProperty("current")},Xr=function(){function e(){this.subscriptions=new Set}return e.prototype.add=function(e){var t=this;return this.subscriptions.add(e),function(){t.subscriptions.delete(e)}},e.prototype.notify=function(e,t,n){var r,o;if(this.subscriptions.size)try{for(var a=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}(this.subscriptions),i=a.next();!i.done;i=a.next())(0,i.value)(e,t,n)}catch(e){r={error:e}}finally{try{i&&!i.done&&(o=a.return)&&o.call(a)}finally{if(r)throw r.error}}},e.prototype.clear=function(){this.subscriptions.clear()},e}(),Yr=function(){function e(e){var t,n=this;this.timeDelta=0,this.lastUpdated=0,this.updateSubscribers=new Xr,this.renderSubscribers=new Xr,this.canTrackVelocity=!1,this.updateAndNotify=function(e,t){void 0===t&&(t=!0),n.prev=n.current,n.current=e,n.prev!==n.current&&n.updateSubscribers.notify(n.current),t&&n.renderSubscribers.notify(n.current);var r=pn(),o=r.delta,a=r.timestamp;n.lastUpdated!==a&&(n.timeDelta=o,n.lastUpdated=a,hn.postRender(n.scheduleVelocityCheck))},this.scheduleVelocityCheck=function(){return hn.postRender(n.velocityCheck)},this.velocityCheck=function(e){e.timestamp!==n.lastUpdated&&(n.prev=n.current)},this.set(e,!1),this.canTrackVelocity=(t=this.current,!isNaN(parseFloat(t)))}return e.prototype.onChange=function(e){return this.updateSubscribers.add(e)},e.prototype.clearListeners=function(){this.updateSubscribers.clear()},e.prototype.onRenderRequest=function(e){return e(this.get()),this.renderSubscribers.add(e)},e.prototype.attach=function(e){this.passiveEffect=e},e.prototype.set=function(e,t){void 0===t&&(t=!0),t&&this.passiveEffect?this.passiveEffect(e,this.updateAndNotify):this.updateAndNotify(e,t)},e.prototype.get=function(){return this.current},e.prototype.getPrevious=function(){return this.prev},e.prototype.getVelocity=function(){return this.canTrackVelocity?Br(parseFloat(this.current)-parseFloat(this.prev),this.timeDelta):0},e.prototype.start=function(e){var t=this;return this.stop(),new Promise((function(n){t.stopAnimation=e(n)})).then((function(){return t.clearAnimation()}))},e.prototype.stop=function(){this.stopAnimation&&this.stopAnimation(),this.clearAnimation()},e.prototype.isAnimating=function(){return!!this.stopAnimation},e.prototype.clearAnimation=function(){this.stopAnimation=null},e.prototype.destroy=function(){this.updateSubscribers.clear(),this.renderSubscribers.clear(),this.stop()},e}();function Zr(e){return new Yr(e)}var Jr=function(e){return 1e3*e},eo={linear:yr,easeIn:br,easeInOut:wr,easeOut:xr,circIn:kr,circInOut:Cr,circOut:Sr,backIn:Er,backInOut:Ar,backOut:_r,anticipate:Or,bounceIn:Rr,bounceInOut:function(e){return e<.5?.5*(1-Pr(1-2*e)):.5*Pr(2*e-1)+.5},bounceOut:Pr},to=function(e){if(Array.isArray(e)){e.length;var t=Qt(e,4);return Kr(t[0],t[1],t[2],t[3])}return"string"==typeof e?eo[e]:e},no=function(e,t){return!("zIndex"===e||"number"!=typeof t&&!Array.isArray(t)&&("string"!=typeof t||!Wn.test(t)||t.startsWith("url(")))},ro=function(e){return Array.isArray(e)},oo=function(){return{type:"spring",stiffness:500,damping:25,restDelta:.5,restSpeed:10}},ao=function(e){return{type:"spring",stiffness:550,damping:0===e?100:30,restDelta:.01,restSpeed:10}},io=function(){return{type:"keyframes",ease:"linear",duration:.3}},lo=function(e){return{type:"keyframes",duration:.8,values:e}},so={x:oo,y:oo,z:oo,rotate:oo,rotateX:oo,rotateY:oo,rotateZ:oo,scaleX:ao,scaleY:ao,scale:ao,opacity:io,backgroundColor:io,color:io,default:ao};function uo(e,t,n){var r,o,a,i;return Array.isArray(t.to)&&(null!==(r=e.duration)&&void 0!==r||(e.duration=.8)),function(e){Array.isArray(e.to)&&null===e.to[0]&&(e.to=Xt(e.to),e.to[0]=e.from)}(t),function(e){e.when,e.delay,e.delayChildren,e.staggerChildren,e.staggerDirection,e.repeat,e.repeatType,e.repeatDelay,e.from;var t=Kt(e,["when","delay","delayChildren","staggerChildren","staggerDirection","repeat","repeatType","repeatDelay","from"]);return!!Object.keys(t).length}(e)||(e=Gt(Gt({},e),(o=n,a=t.to,i=ro(a)?lo:so[o]||so.default,Gt({to:a},i(a))))),Gt(Gt({},t),function(e){var t=e.yoyo,n=e.loop,r=e.flip,o=e.ease,a=e.times,i=Kt(e,["yoyo","loop","flip","ease","times"]),l=Gt({},i);return a&&(l.offset=a),i.duration&&(l.duration=Jr(i.duration)),i.repeatDelay&&(l.repeatDelay=Jr(i.repeatDelay)),o&&(l.ease=function(e){return Array.isArray(e)&&"number"!=typeof e[0]}(o)?o.map(to):to(o)),"tween"===i.type&&(l.type="keyframes"),t?l.repeatType="reverse":n?l.repeatType="loop":r&&(l.repeatType="mirror"),l.repeat=n||t||r||i.repeat,"spring"!==i.type&&(l.type="keyframes"),l}(e))}function co(e,t,n,r){return void 0===r&&(r={}),t.start((function(o){var a,i,l=function(e,t,n,r,o){var a,i=function(e,t){return e[t]||e.default||e}(r,e),l=null!==(a=i.from)&&void 0!==a?a:t.get(),s=no(e,n);return"none"===l&&s&&"string"==typeof n&&(l=Wn.getAnimatableNone(n)),no(e,l)&&s&&!1!==i.type?function(){var r={from:l,to:n,velocity:t.getVelocity(),onComplete:o,onUpdate:function(e){return t.set(e)}};return"inertia"===i.type||"decay"===i.type?function(e){var t,n=e.from,r=void 0===n?0:n,o=e.velocity,a=void 0===o?0:o,i=e.min,l=e.max,s=e.power,u=void 0===s?.8:s,c=e.timeConstant,f=void 0===c?750:c,d=e.bounceStiffness,p=void 0===d?500:d,h=e.bounceDamping,m=void 0===h?10:h,v=e.restDelta,g=void 0===v?1:v,y=e.modifyTarget,b=e.driver,x=e.onUpdate,w=e.onComplete;function k(e){return void 0!==i&&e<i||void 0!==l&&e>l}function S(e){return void 0===i?l:void 0===l||Math.abs(i-e)<Math.abs(l-e)?i:l}function C(e){null==t||t.stop(),t=jr(Gt(Gt({},e),{driver:b,onUpdate:function(t){var n;null==x||x(t),null===(n=e.onUpdate)||void 0===n||n.call(e,t)},onComplete:w}))}function E(e){C(Gt({type:"spring",stiffness:p,damping:m,restDelta:g},e))}if(k(r))E({from:r,velocity:a,to:S(r)});else{var _=u*a+r;void 0!==y&&(_=y(_));var A,O,P=S(_),R=P===i?-1:1;C({type:"decay",from:r,velocity:a,timeConstant:f,power:u,restDelta:g,modifyTarget:y,onUpdate:k(_)?function(e){A=O,O=e,a=Br(e-A,pn().delta),(1===R&&e>P||-1===R&&e<P)&&E({from:e,to:P,velocity:a})}:void 0})}return{stop:function(){return null==t?void 0:t.stop()}}}(Gt(Gt({},r),i)):jr(Gt(Gt({},uo(i,r,e)),{onUpdate:function(e){var t;r.onUpdate(e),null===(t=i.onUpdate)||void 0===t||t.call(i,e)},onComplete:function(){var e;r.onComplete(),null===(e=i.onComplete)||void 0===e||e.call(i)}}))}:function(){var e;return t.set(n),o(),null===(e=null==i?void 0:i.onComplete)||void 0===e||e.call(i),{stop:function(){}}}}(e,t,n,r,o),s=function(e,t){var n,r,o,a,i;return null!==(i=null!==(a=null!==(r=null===(n=e[t])||void 0===n?void 0:n.delay)&&void 0!==r?r:null===(o=e.default)||void 0===o?void 0:o.delay)&&void 0!==a?a:e.delay)&&void 0!==i?i:0}(r,e),u=function(){return i=l()};return s?a=setTimeout(u,Jr(s)):u(),function(){clearTimeout(a),null==i||i.stop()}}))}var fo=function(e){return ro(e)?e[e.length-1]||0:e},po=Gt(Gt({},xn),{transform:Math.round}),ho={color:Nn,backgroundColor:Nn,outlineColor:Nn,fill:Nn,stroke:Nn,borderColor:Nn,borderTopColor:Nn,borderRightColor:Nn,borderBottomColor:Nn,borderLeftColor:Nn,borderWidth:_n,borderTopWidth:_n,borderRightWidth:_n,borderBottomWidth:_n,borderLeftWidth:_n,borderRadius:_n,radius:_n,borderTopLeftRadius:_n,borderTopRightRadius:_n,borderBottomRightRadius:_n,borderBottomLeftRadius:_n,width:_n,maxWidth:_n,height:_n,maxHeight:_n,size:_n,top:_n,right:_n,bottom:_n,left:_n,padding:_n,paddingTop:_n,paddingRight:_n,paddingBottom:_n,paddingLeft:_n,margin:_n,marginTop:_n,marginRight:_n,marginBottom:_n,marginLeft:_n,rotate:Cn,rotateX:Cn,rotateY:Cn,rotateZ:Cn,scale:kn,scaleX:kn,scaleY:kn,scaleZ:kn,skew:Cn,skewX:Cn,skewY:Cn,distance:_n,translateX:_n,translateY:_n,translateZ:_n,x:_n,y:_n,z:_n,perspective:_n,transformPerspective:_n,opacity:wn,originX:Pn,originY:Pn,originZ:_n,zIndex:po,fillOpacity:wn,strokeOpacity:wn,numOctaves:po},mo=[xn,_n,En,Cn,On,An,{test:function(e){return"auto"===e},parse:function(e){return e}}],vo=function(e){return function(t){return t.test(e)}},go=function(e){return mo.find(vo(e))},yo=Xt(mo,[Nn,Wn]),bo=function(e){return ho[e]},xo=function(e,t){return t&&"number"==typeof e?t.transform(e):e};function wo(e){return Array.isArray(e)}function ko(e){return"string"==typeof e||wo(e)}function So(e,t,n){var r={};return t?(r=function(e){return"function"==typeof e}(t)?t(null!=n?n:e.getVariantPayload(),function(e){var t={};return e.forEachValue((function(e,n){return t[n]=e.get()})),t}(e),function(e){var t={};return e.forEachValue((function(e,n){return t[n]=e.getVelocity()})),t}(e)):t,Gt({transition:e.getDefaultTransition()},r)):r}function Co(e,t,n){e.hasValue(t)?e.getValue(t).set(n):e.addValue(t,Zr(n))}function Eo(e,t,n){var r=(void 0===n?{}:n).priority,o=e.makeTargetAnimatable(So(e,t),!1),a=o.transitionEnd,i=void 0===a?{}:a,l=(o.transition,Kt(o,["transitionEnd","transition"]));for(var s in l=Gt(Gt({},l),i)){var u=fo(l[s]);Co(e,s,u),r||(e.baseTarget[s]=u)}}function _o(e,t){Xt(t).reverse().forEach((function(n){var r;Eo(e,e.getVariant(n)),null===(r=e.variantChildren)||void 0===r||r.forEach((function(e){_o(e,t)}))}))}function Ao(e,t){return Array.isArray(t)?_o(e,t):"string"==typeof t?_o(e,[t]):void Eo(e,t)}function Oo(e,t,n){var r,o,a,i,l=Object.keys(t).filter((function(t){return!e.hasValue(t)})),s=l.length;if(s)for(var u=0;u<s;u++){var c=l[u],f=t[c],d=null;if(Array.isArray(f)&&(d=f[0]),null===d){var p=null!==(r=n[c])&&void 0!==r?r:e.readNativeValue(c);d=void 0!==p?p:t[c]}"string"==typeof d&&/^\-?\d*\.?\d+$/.test(d)?d=parseFloat(d):(i=d,!yo.find(vo(i))&&Wn.test(f)&&(d=Wn.getAnimatableNone(f))),e.addValue(c,Zr(d)),null!==(o=(a=n)[c])&&void 0!==o||(a[c]=d),e.baseTarget[c]=d}}function Po(e,t){if(t)return(t[e]||t.default||t).from}function Ro(e,t,n){var r,o,a={};for(var i in e)a[i]=null!==(r=Po(i,t))&&void 0!==r?r:null===(o=n.getValue(i))||void 0===o?void 0:o.get();return a}function To(e,t,n){var r;return void 0===n&&(n={}),n.priority&&e.activeOverrides.add(n.priority),e.resetIsAnimating(n.priority),r=wo(t)?function(e,t,n){var r=Xt(t).reverse().map((function(t){return Mo(e,t,n)}));return Promise.all(r)}(e,t,n):ko(t)?Mo(e,t,n):zo(e,t,n),e.onAnimationStart(),r.then((function(){return e.onAnimationComplete()}))}function Mo(e,t,n){var r,o=n&&n.priority||0,a=e.getVariant(t),i=So(e,a,n&&n.custom),l=i.transition||{},s=a?function(){return zo(e,i,n)}:function(){return Promise.resolve()},u=(null===(r=e.variantChildrenOrder)||void 0===r?void 0:r.size)?function(r){void 0===r&&(r=0);var a=l.delayChildren;return function(e,t,n,r,o,a,i){void 0===n&&(n=0),void 0===r&&(r=0),void 0===o&&(o=1),void 0===a&&(a=0);var l=[],s=(e.variantChildrenOrder.size-1)*r,u=1===o?function(e){return e*r}:function(e){return s-e*r};return Array.from(e.variantChildrenOrder).forEach((function(e,r){var o=Mo(e,t,{priority:a,delay:n+u(r),custom:i});l.push(o)})),Promise.all(l)}(e,t,(void 0===a?0:a)+r,l.staggerChildren,l.staggerDirection,o,null==n?void 0:n.custom)}:function(){return Promise.resolve()},c=l.when;if(c){var f=Qt("beforeChildren"===c?[s,u]:[u,s],2),d=f[0],p=f[1];return d().then(p)}return Promise.all([s(),u(null==n?void 0:n.delay)])}function zo(e,t,n){var r=void 0===n?{}:n,o=r.delay,a=void 0===o?0:o,i=r.priority,l=void 0===i?0:i,s=r.transitionOverride,u=r.custom,c=So(e,t,u);s&&(c.transition=s);var f=e.makeTargetAnimatable(c),d=f.transitionEnd,p=f.transition,h=Kt(f,["transitionEnd","transition"]);l&&(e.resolvedOverrides[l]=h);var m=[];for(var v in h){var g=e.getValue(v);if(g&&h&&void 0!==h[v]){var y=h[v];l||(e.baseTarget[v]=fo(y)),e.isAnimating.has(v)||(e.isAnimating.add(v),m.push(co(v,g,y,Gt({delay:a},p))))}}var b=Promise.all(m);return d?b.then((function(){return Eo(e,d,{priority:l})})):b}function Lo(e,t,n){var r;e.overrides[n]=t,null===(r=e.variantChildren)||void 0===r||r.forEach((function(e){Lo(e,t,n)}))}function Do(e,t){var n=e.overrides[t];if(n)return To(e,n,{priority:t})}function jo(e,t){var n;if(null===(n=e.variantChildrenOrder)||void 0===n||n.forEach((function(e){jo(e,t)})),e.overrides[t]){e.activeOverrides.delete(t);var r=Bo(e);e.resetIsAnimating(),r&&e.overrides[r]&&Do(e,r);var o=e.resolvedOverrides[t];if(o){var a={};for(var i in e.baseTarget)void 0!==o[i]&&(a[i]=e.baseTarget[i]);e.onAnimationStart(),zo(e,a).then((function(){e.onAnimationComplete()}))}}}function Bo(e){return e.activeOverrides.size?Math.max.apply(Math,Xt(Array.from(e.activeOverrides))):0}var Fo=function(){function e(e,t){var n=this;this.children=new Set,this.baseTarget={},this.overrides=[],this.resolvedOverrides=[],this.activeOverrides=new Set,this.isAnimating=new Set,this.latest={},this.values=new Map,this.valueSubscriptions=new Map,this.config={},this.isMounted=!1,this.update=function(){return n.config.onUpdate(n.latest)},this.triggerRender=function(){return n.render()},this.ref=function(e){e?n.mount(e):n.unmount(),n.externalRef&&("function"==typeof n.externalRef?n.externalRef(e):Qr(n.externalRef)&&(n.externalRef.current=e))},this.parent=e,this.rootParent=e?e.rootParent:this,this.treePath=e?Xt(e.treePath,[e]):[],this.depth=e?e.depth+1:0,this.externalRef=t}return e.prototype.getVariantPayload=function(){return this.config.custom},e.prototype.getVariant=function(e){var t;return null===(t=this.config.variants)||void 0===t?void 0:t[e]},e.prototype.addVariantChild=function(e){this.variantChildren||(this.variantChildren=new Set),this.variantChildren.add(e)},e.prototype.addVariantChildOrder=function(e){this.variantChildrenOrder||(this.variantChildrenOrder=new Set),this.variantChildrenOrder.add(e)},e.prototype.onAnimationStart=function(){var e,t;null===(t=(e=this.config).onAnimationStart)||void 0===t||t.call(e)},e.prototype.onAnimationComplete=function(){var e,t;this.isMounted&&(null===(t=(e=this.config).onAnimationComplete)||void 0===t||t.call(e))},e.prototype.getDefaultTransition=function(){return this.config.transition},e.prototype.resetIsAnimating=function(e){var t;void 0===e&&(e=0),this.isAnimating.clear(),e<Bo(this)&&this.checkOverrideIsAnimating(e),null===(t=this.variantChildren)||void 0===t||t.forEach((function(t){return t.resetIsAnimating(e)}))},e.prototype.checkOverrideIsAnimating=function(e){for(var t=this.overrides.length,n=e+1;n<t;n++){var r=this.resolvedOverrides[n];if(r)for(var o in r)this.isAnimating.add(o)}},e.prototype.subscribe=function(e){var t=this;return this.children.add(e),function(){return t.children.delete(e)}},e.prototype.hasValue=function(e){return this.values.has(e)},e.prototype.addValue=function(e,t){this.hasValue(e)&&this.removeValue(e),this.values.set(e,t),this.setSingleStaticValue(e,t.get()),this.subscribeToValue(e,t)},e.prototype.removeValue=function(e){var t;null===(t=this.valueSubscriptions.get(e))||void 0===t||t(),this.valueSubscriptions.delete(e),this.values.delete(e),delete this.latest[e]},e.prototype.getValue=function(e,t){var n=this.values.get(e);return void 0===n&&void 0!==t&&(n=new Yr(t),this.addValue(e,n)),n},e.prototype.forEachValue=function(e){this.values.forEach(e)},e.prototype.getInstance=function(){return this.element},e.prototype.updateConfig=function(e){void 0===e&&(e={}),this.config=Gt({},e)},e.prototype.setSingleStaticValue=function(e,t){this.latest[e]=t},e.prototype.setStaticValues=function(e,t){if("string"==typeof e)this.setSingleStaticValue(e,t);else for(var n in e)this.setSingleStaticValue(n,e[n])},e.prototype.scheduleRender=function(){hn.render(this.triggerRender,!1,!0)},e.prototype.scheduleUpdateLayoutDelta=function(){hn.preRender(this.rootParent.updateLayoutDelta,!1,!0)},e.prototype.subscribeToValue=function(e,t){var n=this,r=t.onChange((function(t){n.setSingleStaticValue(e,t),n.element&&n.config.onUpdate&&hn.update(n.update,!1,!0)})),o=t.onRenderRequest((function(){n.element&&n.scheduleRender()}));this.valueSubscriptions.set(e,(function(){r(),o()}))},e.prototype.mount=function(e){this.parent&&(this.removeFromParent=this.parent.subscribe(this)),this.element=this.current=e},e.prototype.unmount=function(){var e=this;this.forEachValue((function(t,n){return e.removeValue(n)})),un.update(this.update),un.render(this.render),this.removeFromParent&&this.removeFromParent()},e}();function No(e){return e}function Io(e){var t=e.top;return{x:{min:e.left,max:e.right},y:{min:t,max:e.bottom}}}function Vo(e){return{x:Gt({},e.x),y:Gt({},e.y)}}var Uo={translate:0,scale:1,origin:0,originPoint:0};function Wo(){return{x:Gt({},Uo),y:Gt({},Uo)}}var Ho=["","X","Y","Z"],qo=new Set,$o=["transformPerspective","x","y","z"];function Go(e,t){return $o.indexOf(e)-$o.indexOf(t)}["perspective","translate","scale","rotate","skew"].forEach((function(e){var t=new Set(["rotate","skew"]).has(e);Ho.forEach((function(n){var r=e+n;$o.push(r),t&&qo.add(r)}))}));var Ko=new Set($o);function Qo(e){return Ko.has(e)}var Xo=new Set(["originX","originY","originZ"]);function Yo(e){return Xo.has(e)}var Zo={x:"translateX",y:"translateY",z:"translateZ",transformPerspective:"perspective"};function Jo(e,t){var n=e.x,r=e.y;return"translate3d("+n.translate/t.x+"px, "+r.translate/t.y+"px, 0) scale("+n.scale+", "+r.scale+")"}var ea=Jo(Wo(),{x:1,y:1});function ta(e){return e.startsWith("--")}function na(e){return"string"==typeof e&&e.startsWith("var(--")}var ra=/var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;function oa(e,t,n){void 0===n&&(n=1);var r=Qt(function(e){var t=ra.exec(e);if(!t)return[,];var n=Qt(t,3);return[n[1],n[2]]}(e),2),o=r[0],a=r[1];if(o){var i=window.getComputedStyle(t).getPropertyValue(o);return i?i.trim():na(a)?oa(a,t,n+1):a}}function aa(e,t){return e/(t.max-t.min)*100}var ia="_$css",la={process:function(e,t){if("string"==typeof e){if(!_n.test(e))return e;e=parseFloat(e)}return aa(e,t.x)+"% "+aa(e,t.y)+"%"}},sa={borderRadius:Gt(Gt({},la),{applyTo:["borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius"]}),borderTopLeftRadius:la,borderTopRightRadius:la,borderBottomLeftRadius:la,borderBottomRightRadius:la,boxShadow:{process:function(e,t,n,r){var o=e,a=e.includes("var("),i=[];a&&(e=e.replace(ra,(function(e){return i.push(e),ia})));var l=Wn.parse(e);if(l.length>5)return o;var s=Wn.createTransformer(e),u="number"!=typeof l[0]?1:0,c=n.x.scale*r.x,f=n.y.scale*r.y;l[0+u]/=c,l[1+u]/=f;var d=Zn(c,f,.5);"number"==typeof l[2+u]&&(l[2+u]/=d),"number"==typeof l[3+u]&&(l[3+u]/=d);var p=s(l);if(a){var h=0;p=p.replace(ia,(function(){var e=i[h];return h++,e}))}return p}}};function ua(e,t,n,r,o,a,i,l,s,u,c,f){var d=i.enableHardwareAcceleration,p=i.transformTemplate,h=i.allowTransformNone;a.length=0;var m=!1,v=!1,g=!0;for(var y in e){var b=e[y],x=bo(y),w=xo(b,x);if(Qo(y)){if(m=!0,r[y]=w,a.push(y),!g)continue;b!==(void 0!==x.default?x.default:0)&&(g=!1)}else if(Yo(y))o[y]=w,v=!0;else if("transform"!==y||"function"!=typeof b){var k=ta(y)?n:t;if(l&&sa[y]){var S=sa[y].process(b,f,s,c),C=sa[y].applyTo;if(C)for(var E=C.length,_=0;_<E;_++)k[C[_]]=S;else k[y]=S}else k[y]=w}}l?(t.transform=Jo(u,c),t.transform===ea&&(t.transform=""),m&&(t.transform+=" "+function(e,t){var n="";t.sort(Go);for(var r=t.length,o=0;o<r;o++){var a=t[o];qo.has(a)&&(n+=a+"("+e[a]+") ")}return n}(r,a),t.transform=t.transform.trim()),p&&(t.transform=p(r,t.transform)),t.transformOrigin=function(e){var t=e.x,n=e.y;return 100*t.origin+"% "+100*n.origin+"% 0"}(u)):(m&&(t.transform=function(e,t,n,r,o,a){void 0===o&&(o=!0),void 0===a&&(a=!0);var i="";t.sort(Go);for(var l=!1,s=t.length,u=0;u<s;u++){var c=t[u];i+=(Zo[c]||c)+"("+e[c]+") ","z"===c&&(l=!0)}return!l&&o?i+="translateZ(0)":i=i.trim(),n?i=n(e,r?"":i):a&&r&&(i="none"),i}(r,a,p,g,d,h)),v&&(t.transformOrigin=function(e){var t=e.originX,n=void 0===t?"50%":t,r=e.originY,o=void 0===r?"50%":r,a=e.originZ;return n+" "+o+" "+(void 0===a?0:a)}(o)))}function ca(e,t){e.min=t.min,e.max=t.max}function fa(e,t,n){return n+t*(e-n)}function da(e,t,n,r,o){return void 0!==o&&(e=fa(e,o,r)),fa(e,n,r)+t}function pa(e,t,n,r,o){void 0===t&&(t=0),void 0===n&&(n=1),e.min=da(e.min,t,n,r,o),e.max=da(e.max,t,n,r,o)}function ha(e,t){var n=t.x,r=t.y;pa(e.x,n.translate,n.scale,n.originPoint),pa(e.y,r.translate,r.scale,r.originPoint)}function ma(e,t,n,r){var o=Qt(r,3),a=o[0],i=o[1],l=o[2];e.min=t.min,e.max=t.max;var s=void 0!==n[l]?n[l]:.5,u=Zn(t.min,t.max,s);pa(e,n[a],n[i],u,n.scale)}var va=["x","scaleX","originX"],ga=["y","scaleY","originY"];function ya(e,t,n,r,o){return e=fa(e-=t,1/n,r),void 0!==o&&(e=fa(e,1/o,r)),e}function ba(e,t,n){var r=Qt(n,3),o=r[0],a=r[1],i=r[2];!function(e,t,n,r,o){void 0===t&&(t=0),void 0===n&&(n=1),void 0===r&&(r=.5);var a=Zn(e.min,e.max,r)-t;e.min=ya(e.min,t,n,a,o),e.max=ya(e.max,t,n,a,o)}(e,t[o],t[a],t[i],t.scale)}function xa(e,t,n){return void 0===t&&(t=0),void 0===n&&(n=.01),Vr(e,t)<n}function wa(e){return e.max-e.min}function ka(e,t){var n=.5,r=wa(e),o=wa(t);return o>r?n=Yn(t.min,t.max-r,e.min):r>o&&(n=Yn(e.min,e.max-o,t.min)),Hn(0,1,n)}function Sa(e,t,n,r){e.origin=void 0===r?ka(t,n):r,e.originPoint=Zn(t.min,t.max,e.origin),e.scale=wa(n)/wa(t),xa(e.scale,1,1e-4)&&(e.scale=1),e.translate=Zn(n.min,n.max,e.origin)-e.originPoint,xa(e.translate)&&(e.translate=0)}function Ca(e,t,n,r){Sa(e.x,t.x,n.x,r),Sa(e.y,t.y,n.y,r)}function Ea(e){return[e("x"),e("y")]}function _a(e,t){return Io(function(e,t){var n=e.top,r=e.left,o=e.bottom,a=e.right;void 0===t&&(t=No);var i=t({x:r,y:n}),l=t({x:a,y:o});return{top:i.y,left:i.x,bottom:l.y,right:l.x}}(e.getBoundingClientRect(),t))}var Aa,Oa=new Set(["width","height","top","left","right","bottom","x","y"]),Pa=function(e){return Oa.has(e)},Ra=function(e,t){e.set(t,!1),e.set(t)},Ta=function(e){return e===xn||e===_n};!function(e){e.width="width",e.height="height",e.left="left",e.right="right",e.top="top",e.bottom="bottom"}(Aa||(Aa={}));var Ma=function(e,t){return parseFloat(e.split(", ")[t])},za=function(e,t){return function(n,r){var o=r.transform;if("none"===o||!o)return 0;var a=o.match(/^matrix3d\((.+)\)$/);if(a)return Ma(a[1],t);var i=o.match(/^matrix\((.+)\)$/);return i?Ma(i[1],e):0}},La=new Set(["x","y","z"]),Da=$o.filter((function(e){return!La.has(e)})),ja={width:function(e){var t=e.x;return t.max-t.min},height:function(e){var t=e.y;return t.max-t.min},top:function(e,t){var n=t.top;return parseFloat(n)},left:function(e,t){var n=t.left;return parseFloat(n)},bottom:function(e,t){var n=e.y,r=t.top;return parseFloat(r)+(n.max-n.min)},right:function(e,t){var n=e.x,r=t.left;return parseFloat(r)+(n.max-n.min)},x:za(4,13),y:za(5,14)};function Ba(e,t,n,r){return function(e){return Object.keys(e).some(Pa)}(t)?function(e,t,n,r){void 0===n&&(n={}),void 0===r&&(r={}),t=Gt({},t),r=Gt({},r);var o=Object.keys(t).filter(Pa),a=[],i=!1,l=[];if(o.forEach((function(o){var s=e.getValue(o);if(e.hasValue(o)){var u,c=n[o],f=t[o],d=go(c);if(ro(f))for(var p=f.length,h=null===f[0]?1:0;h<p;h++)u?go(f[h]):(u=go(f[h]))===d||Ta(d)&&Ta(u);else u=go(f);if(d!==u)if(Ta(d)&&Ta(u)){var m=s.get();"string"==typeof m&&s.set(parseFloat(m)),"string"==typeof f?t[o]=parseFloat(f):Array.isArray(f)&&u===_n&&(t[o]=f.map(parseFloat))}else(null==d?void 0:d.transform)&&(null==u?void 0:u.transform)&&(0===c||0===f)?0===c?s.set(u.transform(c)):t[o]=d.transform(f):(i||(a=function(e){var t=[];return Da.forEach((function(n){var r=e.getValue(n);void 0!==r&&(t.push([n,r.get()]),r.set(n.startsWith("scale")?1:0))})),t.length&&e.render(),t}(e),i=!0),l.push(o),r[o]=void 0!==r[o]?r[o]:t[o],Ra(s,f))}})),l.length){var s=function(e,t,n){var r=t.getBoundingBox(),o=t.getComputedStyle(),a=o.display,i={top:o.top,left:o.left,bottom:o.bottom,right:o.right,transform:o.transform};"none"===a&&t.setStaticValues("display",e.display||"block"),t.render();var l=t.getBoundingBox();return n.forEach((function(n){var a=t.getValue(n);Ra(a,ja[n](r,i)),e[n]=ja[n](l,o)})),e}(t,e,l);return a.length&&a.forEach((function(t){var n=Qt(t,2),r=n[0],o=n[1];e.getValue(r).set(o)})),e.render(),{target:s,transitionEnd:r}}return{target:t,transitionEnd:r}}(e,t,n,r):{target:t,transitionEnd:r}}var Fa=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.defaultConfig={enableHardwareAcceleration:!0,allowTransformNone:!0},t.style={},t.reactStyle={},t.vars={},t.transform={},t.transformOrigin={},t.transformKeys=[],t.config=t.defaultConfig,t.isLayoutProjectionEnabled=!1,t.layoutUpdateListeners=new Xr,t.layoutMeasureListeners=new Xr,t.viewportBoxUpdateListeners=new Xr,t.hasViewportBoxUpdated=!1,t.targetBoxFinal={x:{min:0,max:1},y:{min:0,max:1}},t.treeScale={x:1,y:1},t.prevTreeScale={x:1,y:1},t.delta=Wo(),t.deltaFinal=Wo(),t.deltaTransform=ea,t.stopLayoutAxisAnimation={x:function(){},y:function(){}},t.isTargetBoxLocked=!1,t.axisProgress={x:Zr(0),y:Zr(0)},t.updateLayoutDelta=function(){t.isLayoutProjectionEnabled&&t.box&&t.updateLayoutDeltas(),t.children.forEach(Na)},t}return $t(t,e),t.prototype.removeValue=function(t){e.prototype.removeValue.call(this,t),delete this.vars[t],delete this.style[t]},t.prototype.clean=function(){this.style={},this.vars={},this.transform={}},t.prototype.updateConfig=function(e){void 0===e&&(e={}),this.config=Gt(Gt({},this.defaultConfig),e)},t.prototype.read=function(e){return this.getComputedStyle()[e]||0},t.prototype.addValue=function(t,n){e.prototype.addValue.call(this,t,n),t.startsWith("rotate")&&(this.layoutOrigin=.5)},t.prototype.readNativeValue=function(e){if(Qo(e)){var t=bo(e);return t&&t.default||0}return this.read(e)},t.prototype.makeTargetAnimatable=function(e,t){void 0===t&&(t=!0);var n=e.transition,r=e.transitionEnd,o=Kt(e,["transition","transitionEnd"]),a=this.config.transformValues,i=Ro(o,n||{},this);if(a&&(r&&(r=a(r)),o&&(o=a(o)),i&&(i=a(i))),t){Oo(this,o,i);var l=function(e,t,n,r){var o=function(e,t,n){var r,o=Kt(t,[]),a=e.getInstance();if(!(a instanceof HTMLElement))return{target:o,transitionEnd:n};for(var i in n&&(n=Gt({},n)),e.forEachValue((function(e){var t=e.get();if(na(t)){var n=oa(t,a);n&&e.set(n)}})),o){var l=o[i];if(na(l)){var s=oa(l,a);s&&(o[i]=s,n&&(null!==(r=n[i])&&void 0!==r||(n[i]=l)))}}return{target:o,transitionEnd:n}}(e,t,r);return Ba(e,t=o.target,n,r=o.transitionEnd)}(this,o,i,r);r=l.transitionEnd,o=l.target}return Gt({transition:n,transitionEnd:r},o)},t.prototype.enableLayoutProjection=function(){this.isLayoutProjectionEnabled=!0},t.prototype.hide=function(){!1!==this.isVisible&&(this.isVisible=!1,this.scheduleRender())},t.prototype.show=function(){!0!==this.isVisible&&(this.isVisible=!0,this.scheduleRender())},t.prototype.onLayoutUpdate=function(e){return this.layoutUpdateListeners.add(e)},t.prototype.onLayoutMeasure=function(e){return this.layoutMeasureListeners.add(e)},t.prototype.onViewportBoxUpdate=function(e){return this.viewportBoxUpdateListeners.add(e)},t.prototype.layoutReady=function(e){this.layoutUpdateListeners.notify(this.box,this.prevViewportBox||this.box,e)},t.prototype.getBoundingBox=function(){var e=this.config.transformPagePoint;return _a(this.element,e)},t.prototype.getBoundingBoxWithoutTransforms=function(){var e,t,n=this.getBoundingBox();return e=n,t=this.latest,ba(e.x,t,va),ba(e.y,t,ga),n},t.prototype.getComputedStyle=function(){return window.getComputedStyle(this.element)},t.prototype.snapshotBoundingBox=function(){this.prevViewportBox=this.getBoundingBoxWithoutTransforms(),this.rebaseTargetBox(!1,this.prevViewportBox)},t.prototype.rebaseTargetBox=function(e,t){var n=this;void 0===e&&(e=!1),void 0===t&&(t=this.box);var r=this.axisProgress,o=r.x,a=r.y,i=this.box&&!this.isTargetBoxLocked&&!o.isAnimating()&&!a.isAnimating();(e||i)&&Ea((function(e){var r=t[e],o=r.min,a=r.max;n.setAxisTarget(e,o,a)}))},t.prototype.measureLayout=function(){var e=this;this.box=this.getBoundingBox(),this.boxCorrected=Vo(this.box),this.targetBox||(this.targetBox=Vo(this.box)),this.layoutMeasureListeners.notify(this.box,this.prevViewportBox||this.box),hn.update((function(){return e.rebaseTargetBox()}))},t.prototype.lockTargetBox=function(){this.isTargetBoxLocked=!0},t.prototype.unlockTargetBox=function(){this.stopLayoutAnimation(),this.isTargetBoxLocked=!1},t.prototype.resetTransform=function(){var e=this.config.transformTemplate;this.element.style.transform=e?e({},""):"none",this.scheduleRender()},t.prototype.setAxisTarget=function(e,t,n){var r=this.targetBox[e];r.min=t,r.max=n,this.hasViewportBoxUpdated=!0,this.rootParent.scheduleUpdateLayoutDelta()},t.prototype.startLayoutAxisAnimation=function(e,t){var n,r=this,o=this.axisProgress[e],a=this.targetBox[e],i=a.min,l=a.max-i;return o.clearListeners(),o.set(i),o.set(i),o.onChange((function(t){return r.setAxisTarget(e,t,t+l)})),null===(n=this.animateMotionValue)||void 0===n?void 0:n.call(this,e,o,0,t)},t.prototype.stopLayoutAnimation=function(){var e=this;Ea((function(t){return e.axisProgress[t].stop()}))},t.prototype.updateLayoutDeltas=function(){var e,t,n,r,o;e=this.boxCorrected,t=this.box,ca(e.x,t.x),ca(e.y,t.y),this.parent&&(this.prevTreeScale.x=this.treeScale.x,this.prevTreeScale.y=this.treeScale.y,n=this.treeScale,r=this.parent.treeScale,o=this.parent.delta,n.x=r.x*o.x.scale,n.y=r.y*o.y.scale),function(e,t){for(var n=t.length,r=0;r<n;r++)ha(e,t[r].delta)}(this.boxCorrected,this.treePath),Ca(this.delta,this.boxCorrected,this.targetBox,this.layoutOrigin),this.hasViewportBoxUpdated&&this.viewportBoxUpdateListeners.notify(this.targetBox,this.delta),this.hasViewportBoxUpdated=!1;var a=Jo(this.delta,this.treeScale);a===this.deltaTransform&&this.prevTreeScale.x===this.treeScale.x&&this.prevTreeScale.y===this.treeScale.y||this.scheduleRender(),this.deltaTransform=a},t.prototype.updateTransformDeltas=function(){var e,t,n;this.isLayoutProjectionEnabled&&this.box&&(e=this.targetBoxFinal,t=this.targetBox,n=this.latest,ma(e.x,t.x,n,va),ma(e.y,t.y,n,ga),Ca(this.deltaFinal,this.boxCorrected,this.targetBoxFinal,this.layoutOrigin))},t.prototype.build=function(){this.updateTransformDeltas(),void 0!==this.isVisible&&(this.style.visibility=this.isVisible?"visible":"hidden"),ua(this.latest,this.style,this.vars,this.transform,this.transformOrigin,this.transformKeys,this.config,this.isLayoutProjectionEnabled&&!!this.box,this.delta,this.deltaFinal,this.treeScale,this.targetBoxFinal)},t.prototype.render=function(){for(var e in this.build(),Object.assign(this.element.style,this.style),this.vars)this.element.style.setProperty(e,this.vars[e])},t}(Fo),Na=function(e){return e.updateLayoutDelta()};function Ia(e){var n=(0,t.useRef)(null);return null===n.current&&(n.current=e()),n.current}function Va(e,t,n){return"string"==typeof e?e:_n.transform(t+n*e)}var Ua=function(e,t){return _n.transform(e*t)},Wa={offset:"stroke-dashoffset",array:"stroke-dasharray"},Ha={offset:"strokeDashoffset",array:"strokeDasharray"},qa={x:0,y:0,width:0,height:0};var $a=new Set(["baseFrequency","diffuseConstant","kernelMatrix","kernelUnitLength","keySplines","keyTimes","limitingConeAngle","markerHeight","markerWidth","numOctaves","targetX","targetY","surfaceScale","specularConstant","specularExponent","stdDeviation","tableValues","viewBox"]),Ga=/([a-z])([A-Z])/g,Ka=function(e){return e.replace(Ga,"$1-$2").toLowerCase()},Qa=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.attrs={},t.defaultConfig={enableHardwareAcceleration:!1},t.config=t.defaultConfig,t}return $t(t,e),t.prototype.mount=function(t){e.prototype.mount.call(this,t),this.measure()},t.prototype.measure=function(){try{this.dimensions="function"==typeof this.element.getBBox?this.element.getBBox():this.element.getBoundingClientRect()}catch(e){this.dimensions={x:0,y:0,width:0,height:0}}"path"===this.element.tagName&&(this.totalPathLength=this.element.getTotalLength())},t.prototype.clean=function(){e.prototype.clean.call(this),this.attrs={}},t.prototype.read=function(e){return e=$a.has(e)?e:Ka(e),this.element.getAttribute(e)},t.prototype.build=function(){this.updateTransformDeltas(),function(e,t,n,r,o,a,i,l,s,u,c,f,d,p,h){var m=e.attrX,v=e.attrY,g=e.originX,y=e.originY,b=e.pathLength,x=e.pathSpacing,w=void 0===x?1:x,k=e.pathOffset,S=void 0===k?0:k;ua(Kt(e,["attrX","attrY","originX","originY","pathLength","pathSpacing","pathOffset"]),r,n,o,a,i,l,c,f,d,p,h),r.transform&&(t.transform=r.transform,delete r.transform),(void 0!==g||void 0!==y||t.transform)&&(t.transformOrigin=function(e,t,n){return Va(t,e.x,e.width)+" "+Va(n,e.y,e.height)}(s||qa,void 0!==g?g:.5,void 0!==y?y:.5)),void 0!==m&&(r.x=m),void 0!==v&&(r.y=v),void 0!==u&&void 0!==b&&function(e,t,n,r,o,a){void 0===r&&(r=1),void 0===o&&(o=0),void 0===a&&(a=!0);var i=a?Wa:Ha;e[i.offset]=Ua(-o,t);var l=Ua(n,t),s=Ua(r,t);e[i.array]=l+" "+s}(r,u,b,w,S,!1)}(this.latest,this.style,this.vars,this.attrs,this.transform,this.transformOrigin,this.transformKeys,this.config,this.dimensions,this.totalPathLength,this.isLayoutProjectionEnabled&&!!this.box,this.delta,this.deltaFinal,this.treeScale,this.targetBoxFinal)},t.prototype.render=function(){for(var t in e.prototype.render.call(this),this.attrs)this.element.setAttribute($a.has(t)?t:Ka(t),this.attrs[t])},t}(Fa),Xa=new Set(["animate","circle","clipPath","defs","desc","ellipse","feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feDropShadow","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence","filter","foreignObject","g","image","line","linearGradient","marker","mask","metadata","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","switch","symbol","text","textPath","tspan","use","view"]);function Ya(e){return"string"==typeof e&&Xa.has(e)}var Za=(0,t.createContext)(null),Ja=(0,t.createContext)({variantContext:{}});function ei(){return(0,t.useContext)(Ja).variantContext}var ti=new Set(["initial","animate","exit","style","variants","transition","transformTemplate","transformValues","custom","inherit","layout","layoutId","onLayoutAnimationComplete","onViewportBoxUpdate","onAnimationStart","onAnimationComplete","onUpdate","onDragStart","onDrag","onDragEnd","onMeasureDragConstraints","onDirectionLock","onDragTransitionEnd","drag","dragControls","dragListener","dragConstraints","dragDirectionLock","_dragX","_dragY","dragElastic","dragMomentum","dragPropagation","dragTransition","onPan","onPanStart","onPanEnd","onPanSessionStart","onTap","onTapStart","onTapCancel","whileHover","whileTap","onHoverEnd","onHoverStart"]);function ni(e){return ti.has(e)}var ri=function(e){return!ni(e)};try{var oi=n(3804).Z;ri=function(e){return e.startsWith("on")?!ni(e):oi(e)}}catch(e){}var ai=function(e){return e instanceof Yr};function ii(e,t){var n=t.layout,r=t.layoutId;return Qo(e)||Yo(e)||(n||void 0!==r)&&!!sa[e]}function li(e,t,n,r,o){for(var a in void 0===r&&(r=!1),r&&(e.reactStyle={}),n){var i=n[a],l=!1;ai(i)?ci.has(a)||(e.addValue(a,i),l=!0):ii(a,o)?(e.hasValue(a)?i!==t[a]&&(ai(t[a])?e.addValue(a,Zr(i)):e.getValue(a).set(i)):e.addValue(a,Zr(i)),l=!0):r&&(e.reactStyle[a]=i),l&&(t[a]=i)}}var si,ui,ci=new Set([]),fi=function(){return{}},di=(0,t.createContext)({transformPagePoint:function(e){return e},features:[],isStatic:!1});function pi(e){var t=e.animate,n=e.variants,r=e.inherit;return void 0===r?!!n&&!t:r}!function(e){e[e.Entering=0]="Entering",e[e.Present=1]="Present",e[e.Exiting=2]="Exiting"}(si||(si={})),function(e){e[e.Hide=0]="Hide",e[e.Show=1]="Show"}(ui||(ui={}));var hi={measureLayout:function(e){return e.measureLayout()},layoutReady:function(e){return e.layoutReady()}},mi=function(e,t){return e.depth-t.depth};function vi(){var e=new Set;return{add:function(t){return e.add(t)},flush:function(t){var n=void 0===t?hi:t,r=n.measureLayout,o=n.layoutReady,a=Array.from(e).sort(mi);a.forEach((function(e){return e.resetTransform()})),a.forEach(r),a.forEach(o),a.forEach((function(e){e.isPresent&&(e.presence=si.Present)})),e.clear()}}}function gi(e){return!!e.forceUpdate}var yi=(0,t.createContext)(vi()),bi="undefined"!=typeof window?t.useLayoutEffect:t.useEffect;function xi(){var e=(0,t.useContext)(Za);if(null===e)return[!0,null];var n=e.isPresent,r=e.onExitComplete,o=e.register,a=Si();return(0,t.useEffect)((function(){return o(a)}),[]),!n&&r?[!1,function(){return null==r?void 0:r(a)}]:[!0]}var wi=0,ki=function(){return wi++},Si=function(){return Ia(ki)};function Ci(e,n){void 0===n&&(n=!1);var r=(0,t.useRef)(!0);(!n||n&&r.current)&&e(),r.current=!1}function Ei(e){return"string"==typeof e||Array.isArray(e)}function _i(e){return"object"==typeof e&&"function"==typeof e.start}function Ai(e,n){var r=n.defaultFeatures,o=n.useVisualElement,a=n.render;return(0,t.forwardRef)((function(n,i){var l=(0,t.useContext)(di).isStatic,s=o(e,n,l,i);!function(e,t){var n=Ia(fi);for(var r in n){var o=ii(r,t),a=void 0!==t[r],i=t.style&&void 0!==t.style[r],l=a&&ai(t[r]),s=i&&ai(t.style[r]);(o&&!a&&!i||!o&&!l&&!s)&&(e.removeValue(r),delete n[r])}li(e,n,t,!1,t),t.style&&li(e,n,t.style,!0,t),t.transformValues&&(e.reactStyle=t.transformValues(e.reactStyle))}(s,n);var u=function(e,n,r){var o,a,i=n.variants,l=n.initial,s=n.animate,u=n.whileTap,c=n.whileHover,f=ei(),d=f.parent,p=f.initial,h=f.animate,m=(0,t.useContext)(Za),v=Ei(s)||Ei(u)||Ei(c)||_i(s),g=i||v;!1!==(l=null!==(o=null==m?void 0:m.initial)&&void 0!==o?o:l)||_i(s)||(l=s);var y=(0,t.useMemo)((function(){return{parent:g?e:d,initial:Ei(l)?l:p,animate:Ei(s)?s:h}}),[r?l:null]);return Ci((function(){var t=l||p;t&&Ao(e,t)}),!r),g&&!v&&(null==d||d.addVariantChild(e)),function(e){return null===e||e.isPresent}(m)&&(null===(a=e.variantChildrenOrder)||void 0===a||a.clear()),(0,t.useEffect)((function(){g&&(null==d||d.addVariantChildOrder(e))})),(0,t.useEffect)((function(){return e.isMounted=!0,function(){var t;e.isMounted=!1,null===(t=null==d?void 0:d.variantChildren)||void 0===t||t.delete(e)}}),[]),Ci((function(){e.forEachValue((function(t,n){e.baseTarget[n]=t.get()}))}),!0),y}(s,n,l),c=function(e,n,r,o){var a=(0,t.useContext)(di);if(n||"undefined"==typeof window)return null;for(var i=Xt(e,a.features),l=i.length,s=[],u=0;u<l;u++){var c=i[u],f=c.shouldRender,d=c.key,p=c.getComponent;if(f(o)){var h=p(o);h&&s.push((0,t.createElement)(h,Gt({key:d},o,{visualElement:r,inherit:pi(o)})))}}return s}(r,l,s,n),f=(0,t.useMemo)((function(){return{visualElement:s,variantContext:u}}),[s,u]),d=a(e,n,s);return function(e){var n=(0,t.useContext)(yi);bi((function(){return function(){gi(n)&&n.remove(e)}}),[])}(s),(0,t.createElement)(t.Fragment,null,(0,t.createElement)(Ja.Provider,{value:f},d),c)}))}function Oi(e){var t=null;return function(){return null===t&&(t=e,function(){t=null})}}var Pi=Oi("dragHorizontal"),Ri=Oi("dragVertical");function Ti(e){var t=!1;if("y"===e)t=Ri();else if("x"===e)t=Pi();else{var n=Pi(),r=Ri();n&&r?t=function(){n(),r()}:(n&&n(),r&&r())}return t}function Mi(e,t,n,r){return e.addEventListener(t,n,r),function(){return e.removeEventListener(t,n,r)}}function zi(e){return"undefined"!=typeof PointerEvent&&e instanceof PointerEvent?!("mouse"!==e.pointerType):e instanceof MouseEvent}function Li(e){return!!e.touches}var Di={pageX:0,pageY:0};function ji(e,t){void 0===t&&(t="page");var n=e.touches[0]||e.changedTouches[0]||Di;return{x:n[t+"X"],y:n[t+"Y"]}}function Bi(e,t){return void 0===t&&(t="page"),{x:e[t+"X"],y:e[t+"Y"]}}function Fi(e,t){return void 0===t&&(t="page"),{point:Li(e)?ji(e,t):Bi(e,t)}}function Ni(e){return Fi(e,"client")}var Ii=function(e,t){void 0===t&&(t=!1);var n,r=function(t){return e(t,Fi(t))};return t?(n=r,function(e){var t=e instanceof MouseEvent;(!t||t&&0===e.button)&&n(e)}):r},Vi="undefined"!=typeof window,Ui={pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointercancel:"mousecancel",pointerover:"mouseover",pointerout:"mouseout",pointerenter:"mouseenter",pointerleave:"mouseleave"},Wi={pointerdown:"touchstart",pointermove:"touchmove",pointerup:"touchend",pointercancel:"touchcancel"};function Hi(e){return Vi&&null===window.onpointerdown?e:Vi&&null===window.ontouchstart?Wi[e]:Vi&&null===window.onmousedown?Ui[e]:e}function qi(e,t,n,r){return Mi(e,Hi(t),Ii(n,"pointerdown"===t),r)}function $i(e,n,r,o){return function(e,n,r,o){(0,t.useEffect)((function(){var t=e.current;if(r&&t)return Mi(t,n,r,o)}),[e,n,r,o])}(e,Hi(n),r&&Ii(r,"pointerdown"===n),o)}var Gi=function(){function e(e,t,n){var r=this,o=(void 0===n?{}:n).transformPagePoint;if(this.startEvent=null,this.lastMoveEvent=null,this.lastMoveEventInfo=null,this.handlers={},this.updatePoint=function(){if(r.lastMoveEvent&&r.lastMoveEventInfo){var e=Xi(r.lastMoveEventInfo,r.history),t=null!==r.startEvent,n=Vr(e.offset,{x:0,y:0})>=3;if(t||n){var o=e.point,a=pn().timestamp;r.history.push(Gt(Gt({},o),{timestamp:a}));var i=r.handlers,l=i.onStart,s=i.onMove;t||(l&&l(r.lastMoveEvent,e),r.startEvent=r.lastMoveEvent),s&&s(r.lastMoveEvent,e)}}},this.handlePointerMove=function(e,t){r.lastMoveEvent=e,r.lastMoveEventInfo=Ki(t,r.transformPagePoint),zi(e)&&0===e.buttons?r.handlePointerUp(e,t):hn.update(r.updatePoint,!0)},this.handlePointerUp=function(e,t){r.end();var n=r.handlers.onEnd;if(n){var o=Xi(Ki(t,r.transformPagePoint),r.history);n&&n(e,o)}},!(Li(e)&&e.touches.length>1)){this.handlers=t,this.transformPagePoint=o;var a=Ki(Fi(e),this.transformPagePoint),i=a.point,l=pn().timestamp;this.history=[Gt(Gt({},i),{timestamp:l})];var s=t.onSessionStart;s&&s(e,Xi(a,this.history)),this.removeListeners=ir(qi(window,"pointermove",this.handlePointerMove),qi(window,"pointerup",this.handlePointerUp),qi(window,"pointercancel",this.handlePointerUp))}}return e.prototype.updateHandlers=function(e){this.handlers=e},e.prototype.end=function(){this.removeListeners&&this.removeListeners(),un.update(this.updatePoint)},e}();function Ki(e,t){return t?{point:t(e.point)}:e}function Qi(e,t){return{x:e.x-t.x,y:e.y-t.y}}function Xi(e,t){var n=e.point;return{point:n,delta:Qi(n,Zi(t)),offset:Qi(n,Yi(t)),velocity:Ji(t,.1)}}function Yi(e){return e[0]}function Zi(e){return e[e.length-1]}function Ji(e,t){if(e.length<2)return{x:0,y:0};for(var n=e.length-1,r=null,o=Zi(e);n>=0&&(r=e[n],!(o.timestamp-r.timestamp>Jr(t)));)n--;if(!r)return{x:0,y:0};var a=(o.timestamp-r.timestamp)/1e3;if(0===a)return{x:0,y:0};var i={x:(o.x-r.x)/a,y:(o.y-r.y)/a};return i.x===1/0&&(i.x=0),i.y===1/0&&(i.y=0),i}function el(e,t,n){var r=t.min,o=t.max;return void 0!==r&&e<r?e=n?Zn(r,e,n):Math.max(e,r):void 0!==o&&e>o&&(e=n?Zn(o,e,n):Math.min(e,o)),e}function tl(e,t,n){return{min:void 0!==t?e.min+t:void 0,max:void 0!==n?e.max+n-(e.max-e.min):void 0}}function nl(e,t){var n,r=t.min-e.min,o=t.max-e.max;return t.max-t.min<e.max-e.min&&(r=(n=Qt([o,r],2))[0],o=n[1]),{min:e.min+r,max:e.min+o}}var rl,ol=new WeakMap,al=function(){function e(e){var t=e.visualElement;this.isDragging=!1,this.currentDirection=null,this.constraints=!1,this.props={},this.hasMutatedConstraints=!1,this.cursorProgress={x:.5,y:.5},this.originPoint={},this.openGlobalLock=null,this.panSession=null,this.visualElement=t,this.visualElement.enableLayoutProjection(),ol.set(t,this)}return e.prototype.start=function(e,t){var n=this,r=void 0===t?{}:t,o=r.snapToCursor,a=void 0!==o&&o,i=r.cursorProgress;a&&this.snapToCursor(e);var l=this.props.transformPagePoint;this.panSession=new Gi(e,{onSessionStart:function(){n.stopMotion()},onStart:function(e,t){var r,o,a=n.props,l=a.drag,s=a.dragPropagation;if(!l||s||(n.openGlobalLock&&n.openGlobalLock(),n.openGlobalLock=Ti(l),n.openGlobalLock)){n.prepareBoundingBox(),n.visualElement.lockTargetBox(),n.resolveDragConstraints();var u=Ni(e).point;Ea((function(e){var t=n.visualElement.targetBox[e],r=t.min,o=t.max;n.cursorProgress[e]=i?i[e]:Yn(r,o,u[e]);var a=n.getAxisMotionValue(e);a&&(n.originPoint[e]=a.get())})),n.isDragging=!0,n.currentDirection=null,null===(o=(r=n.props).onDragStart)||void 0===o||o.call(r,e,t)}},onMove:function(e,t){var r,o,a,i,l=n.props,s=l.dragPropagation,u=l.dragDirectionLock;if(s||n.openGlobalLock){var c=t.offset;if(u&&null===n.currentDirection)return n.currentDirection=function(e,t){void 0===t&&(t=10);var n=null;return Math.abs(e.y)>t?n="y":Math.abs(e.x)>t&&(n="x"),n}(c),void(null!==n.currentDirection&&(null===(o=(r=n.props).onDirectionLock)||void 0===o||o.call(r,n.currentDirection)));n.updateAxis("x",e,c),n.updateAxis("y",e,c),null===(i=(a=n.props).onDrag)||void 0===i||i.call(a,e,t),rl=e}},onEnd:function(e,t){return n.stop(e,t)}},{transformPagePoint:l})},e.prototype.prepareBoundingBox=function(){var e=this.visualElement.getInstance(),t=e.style.transform;this.visualElement.resetTransform(),this.visualElement.measureLayout(),e.style.transform=t,this.visualElement.rebaseTargetBox(!0,this.visualElement.getBoundingBoxWithoutTransforms())},e.prototype.resolveDragConstraints=function(){var e=this,t=this.props.dragConstraints;this.constraints=!!t&&(Qr(t)?this.resolveRefConstraints(this.visualElement.box,t):function(e,t){var n=t.top,r=t.left,o=t.bottom,a=t.right;return{x:tl(e.x,r,a),y:tl(e.y,n,o)}}(this.visualElement.box,t)),this.constraints&&!this.hasMutatedConstraints&&Ea((function(t){var n,r,o;e.getAxisMotionValue(t)&&(e.constraints[t]=(n=e.visualElement.box[t],o={},void 0!==(r=e.constraints[t]).min&&(o.min=r.min-n.min),void 0!==r.max&&(o.max=r.max-n.min),o))}))},e.prototype.resolveRefConstraints=function(e,t){var n=this.props,r=n.onMeasureDragConstraints,o=n.transformPagePoint,a=t.current;this.constraintsBox=_a(a,o);var i=function(e,t){return{x:nl(e.x,t.x),y:nl(e.y,t.y)}}(e,this.constraintsBox);if(r){var l=r(function(e){var t=e.x,n=e.y;return{top:n.min,bottom:n.max,left:t.min,right:t.max}}(i));this.hasMutatedConstraints=!!l,l&&(i=Io(l))}return i},e.prototype.cancelDrag=function(){this.isDragging=!1,this.panSession&&this.panSession.end(),this.panSession=null,!this.props.dragPropagation&&this.openGlobalLock&&(this.openGlobalLock(),this.openGlobalLock=null)},e.prototype.stop=function(e,t){var n;this.visualElement.unlockTargetBox(),null===(n=this.panSession)||void 0===n||n.end(),this.panSession=null;var r=this.isDragging;if(this.cancelDrag(),r){var o=this.props,a=o.dragMomentum,i=o.dragElastic,l=o.onDragEnd;if(a||i){var s=t.velocity;this.animateDragEnd(s)}null==l||l(e,t)}},e.prototype.snapToCursor=function(e){var t=this;this.prepareBoundingBox(),Ea((function(n){var r=t.getAxisMotionValue(n);if(r){var o=Ni(e).point,a=t.visualElement.box,i=a[n].max-a[n].min,l=a[n].min+i/2,s=o[n]-l;t.originPoint[n]=o[n],r.set(s)}else t.cursorProgress[n]=.5,t.updateVisualElementAxis(n,e)}))},e.prototype.updateAxis=function(e,t,n){if(il(e,this.props.drag,this.currentDirection))return this.getAxisMotionValue(e)?this.updateAxisMotionValue(e,n):this.updateVisualElementAxis(e,t)},e.prototype.updateAxisMotionValue=function(e,t){var n=this.getAxisMotionValue(e);if(t&&n){var r=this.props.dragElastic,o=this.originPoint[e]+t[e],a=this.constraints?el(o,this.constraints[e],r):o;n.set(a)}},e.prototype.updateVisualElementAxis=function(e,t){var n,r=this.props.dragElastic,o=this.visualElement.box[e],a=o.max-o.min,i=this.cursorProgress[e],l=function(e,t,n,r,o){var a=e-t*n;return r?el(a,r,o):a}(Ni(t).point[e],a,i,null===(n=this.constraints)||void 0===n?void 0:n[e],r);this.visualElement.setAxisTarget(e,l,l+a)},e.prototype.updateProps=function(e){var t=e.drag,n=void 0!==t&&t,r=e.dragDirectionLock,o=void 0!==r&&r,a=e.dragPropagation,i=void 0!==a&&a,l=e.dragConstraints,s=void 0!==l&&l,u=e.dragElastic,c=void 0===u?.35:u,f=e.dragMomentum,d=void 0===f||f,p=Kt(e,["drag","dragDirectionLock","dragPropagation","dragConstraints","dragElastic","dragMomentum"]);this.props=Gt({drag:n,dragDirectionLock:o,dragPropagation:i,dragConstraints:s,dragElastic:c,dragMomentum:d},p)},e.prototype.getAxisMotionValue=function(e){var t=this.props,n=t.layout,r=t.layoutId,o="_drag"+e.toUpperCase();return this.props[o]?this.props[o]:n||void 0!==r?void 0:this.visualElement.getValue(e,0)},e.prototype.animateDragEnd=function(e){var t=this,n=this.props,r=n.drag,o=n.dragMomentum,a=n.dragElastic,i=n.dragTransition,l=Ea((function(n){if(il(n,r,t.currentDirection)){var l=t.constraints?t.constraints[n]:{},s=a?200:1e6,u=a?40:1e7,c=Gt(Gt({type:"inertia",velocity:o?e[n]:0,bounceStiffness:s,bounceDamping:u,timeConstant:750,restDelta:1,restSpeed:10},i),l);return t.getAxisMotionValue(n)?t.startAxisValueAnimation(n,c):t.visualElement.startLayoutAxisAnimation(n,c)}}));return Promise.all(l).then((function(){var e,n;null===(n=(e=t.props).onDragTransitionEnd)||void 0===n||n.call(e)}))},e.prototype.stopMotion=function(){var e=this;Ea((function(t){var n=e.getAxisMotionValue(t);n?n.stop():e.visualElement.stopLayoutAnimation()}))},e.prototype.startAxisValueAnimation=function(e,t){var n=this.getAxisMotionValue(e);if(n){var r=n.get();return n.set(r),n.set(r),co(e,n,0,t)}},e.prototype.scalePoint=function(){var e=this,t=this.props,n=t.drag,r=t.dragConstraints;if(Qr(r)&&this.constraintsBox){this.stopMotion();var o={x:0,y:0};Ea((function(t){o[t]=ka(e.visualElement.targetBox[t],e.constraintsBox[t])})),this.prepareBoundingBox(),this.resolveDragConstraints(),Ea((function(t){if(il(t,n,null)){var r=function(e,t,n){var r=e.max-e.min,o=Zn(t.min,t.max-r,n);return{min:o,max:o+r}}(e.visualElement.targetBox[t],e.constraintsBox[t],o[t]),a=r.min,i=r.max;e.visualElement.setAxisTarget(t,a,i)}}))}},e.prototype.mount=function(e){var t=this,n=qi(e.getInstance(),"pointerdown",(function(e){var n=t.props,r=n.drag,o=n.dragListener;r&&(void 0===o||o)&&t.start(e)})),r=Mi(window,"resize",(function(){t.scalePoint()})),o=e.onLayoutUpdate((function(){t.isDragging&&t.resolveDragConstraints()})),a=e.prevSnapshot;return(null==a?void 0:a.isDragging)&&this.start(rl,{cursorProgress:a.cursorProgress}),function(){null==n||n(),null==r||r(),null==o||o(),t.cancelDrag()}},e}();function il(e,t,n){return!(!0!==t&&t!==e||null!==n&&n!==e)}var ll=function(e){return function(t){return e(t),null}},sl=ll((function(e){var n=e.visualElement;return function(e,n){var r=e.dragControls,o=(0,t.useContext)(di).transformPagePoint,a=Ia((function(){return new al({visualElement:n})}));a.updateProps(Gt(Gt({},e),{transformPagePoint:o})),(0,t.useEffect)((function(){return r&&r.subscribe(a)}),[a]),(0,t.useEffect)((function(){return a.mount(n)}),[])}(Kt(e,["visualElement"]),n)})),ul={key:"drag",shouldRender:function(e){return!!e.drag||!!e.dragControls},getComponent:function(){return sl}};function cl(e){return(0,t.useEffect)((function(){return function(){return e()}}),[])}var fl=function(e,t){return!!t&&(e===t||fl(e,t.parentElement))},dl=["whileHover","whileTap","whileDrag"],pl=function(e){return dl.indexOf(e)+1},hl=pl("whileTap"),ml=pl("whileHover"),vl=function(e){return function(t,n){zi(t)&&e(t,n)}};var gl=["onPan","onPanStart","onPanEnd","onPanSessionStart","onTap","onTapStart","onTapCancel","whileTap","whileHover","onHoverStart","onHoverEnd"],yl=ll((function(e){var n=e.visualElement;!function(e,n){var r,o,a,i,l,s,u,c,f,d;o=n,a=(r=e).onPan,i=r.onPanStart,l=r.onPanEnd,s=r.onPanSessionStart,u=a||i||l||s,c=(0,t.useRef)(null),f=(0,t.useContext)(di).transformPagePoint,d={onSessionStart:s,onStart:i,onMove:a,onEnd:function(e,t){c.current=null,l&&l(e,t)}},(0,t.useEffect)((function(){null!==c.current&&c.current.updateHandlers(d)})),$i(o,"pointerdown",u&&function(e){c.current=new Gi(e,d,{transformPagePoint:f})}),cl((function(){return c.current&&c.current.end()})),function(e,n){var r=e.onTap,o=e.onTapStart,a=e.onTapCancel,i=e.whileTap,l=r||o||a||i,s=(0,t.useRef)(!1),u=(0,t.useRef)(null);function c(){var e;null===(e=u.current)||void 0===e||e.call(u),u.current=null}i&&Lo(n,i,hl);var f=(0,t.useRef)(null);f.current=function(e,t){var o=n.getInstance();if(c(),s.current&&o){s.current=!1,i&&jo(n,hl);var l=Ti(!0);l&&(l(),fl(o,e.target)?null==r||r(e,t):null==a||a(e,t))}},$i(n,"pointerdown",l?function(e,t){c(),u.current=ir(qi(window,"pointerup",(function(e,t){var n;return null===(n=f.current)||void 0===n?void 0:n.call(f,e,t)})),qi(window,"pointercancel",(function(e,t){var n;return null===(n=f.current)||void 0===n?void 0:n.call(f,e,t)}))),n.getInstance()&&!s.current&&(s.current=!0,null==o||o(e,t),i&&Do(n,hl))}:void 0),cl(c)}(e,n),function(e,t){var n=e.whileHover,r=e.onHoverStart,o=e.onHoverEnd;n&&Lo(t,n,ml),$i(t,"pointerenter",vl((function(e,o){null==r||r(e,o),n&&Do(t,ml)}))),$i(t,"pointerleave",vl((function(e,r){null==o||o(e,r),n&&jo(t,ml)})))}(e,n)}(Kt(e,["visualElement"]),n)})),bl={key:"gestures",shouldRender:function(e){return gl.some((function(t){return e.hasOwnProperty(t)}))},getComponent:function(){return yl}},xl=function(){function e(){this.hasMounted=!1,this.pendingAnimations=[],this.subscribers=new Set}return e.prototype.subscribe=function(e){var t=this;return this.subscribers.add(e),function(){return t.subscribers.delete(e)}},e.prototype.start=function(e,t){var n=this;if(this.hasMounted){var r=[];return this.subscribers.forEach((function(n){var o=To(n,e,{transitionOverride:t});r.push(o)})),Promise.all(r)}return new Promise((function(r){n.pendingAnimations.push({animation:[e,t],resolve:r})}))},e.prototype.set=function(e){return this.hasMounted,this.subscribers.forEach((function(t){Ao(t,e)}))},e.prototype.stop=function(){this.subscribers.forEach((function(e){!function(e){e.forEachValue((function(e){return e.stop()}))}(e)}))},e.prototype.mount=function(){var e=this;this.hasMounted=!0,this.pendingAnimations.forEach((function(t){var n=t.animation,r=t.resolve;e.start.apply(e,Xt(n)).then(r)}))},e.prototype.unmount=function(){this.hasMounted=!1,this.stop()},e}(),wl=ll((function(e){var n=e.animate,r=e.exit,o=e.visualElement,a=Qt(xi(),2),i=a[0],l=a[1],s=(0,t.useContext)(Za),u=(0,t.useRef)(!1),c=void 0!==(null==s?void 0:s.custom)?s.custom:e.custom;(0,t.useEffect)((function(){i?!u.current||!n||"boolean"==typeof n||n instanceof xl||To(o,n):(!u.current&&r&&To(o,r,{custom:c}).then(l),u.current=!0),i&&(u.current=!1)}),[n,c,r,i,l,e])})),kl={key:"exit",shouldRender:function(e){return!!e.exit&&!pi(e)},getComponent:function(){return wl}};function Sl(e,t){void 0===t&&(t=!1),e.transition;var n=e.transitionEnd,r=Kt(e,["transition","transitionEnd"]);return t?Gt(Gt({},r),n):r}var Cl=function(e){var t,n=e instanceof Yr?e.get():e;return Array.from(new Set((t=n)?Array.isArray(t)?t:[t]:[]))},El={shouldRender:function(e){return void 0!==e.animate&&!ko(e.animate)&&!_i(e.animate)},Component:ll((function(e){var n=e.animate;return function(e,n,r){var o=(0,t.useRef)(!0),a=(0,t.useRef)(null);a.current||(a.current=Sl(n,!0)),(0,t.useEffect)((function(){var t,i,l={},s=Sl(n),u=Sl(n,!0);for(var c in s){var f=o.current&&(!e.hasValue(c)||e.getValue(c).get()!==u[c]),d=null!==u[c],p=(t=a.current[c],void 0!==(i=u[c])&&(Array.isArray(t)&&Array.isArray(i)?!function(e,t){if(null===t)return!1;var n=t.length;if(n!==e.length)return!1;for(var r=0;r<n;r++)if(t[r]!==e[r])return!1;return!0}(i,t):t!==i));d&&(p||f)&&(l[c]=s[c])}o.current=!1,a.current=Gt(Gt({},a.current),u),Object.keys(l).length&&To(e,Gt(Gt({},l),{transition:n.transition||r,transitionEnd:n.transitionEnd}))}),[n])}(e.visualElement,n,e.transition)}))},_l={shouldRender:function(e){return e.variants&&!_i(e.animate)||ko(e.animate)},Component:ll((function(e){var n=e.animate,r=e.inherit,o=void 0===r||r;return function(e,n,r,o){var a,i=Cl(r),l=ei(),s=null===(a=l.parent)||void 0===a?void 0:a.isMounted,u=(0,t.useRef)(!1);(0,t.useEffect)((function(){var t,r,a=!1;o?(a=!!s,i=Cl(l.animate)):a=u.current||(t=Cl(n),r=i,t.join(",")!==r.join(",")),a&&To(e,i),u.current=!0}),[i.join(",")])}(e.visualElement,e.initial,n,o)}))},Al={shouldRender:function(e){return _i(e.animate)},Component:ll((function(e){var n,r,o,a=e.animate;return n=e.visualElement,r=a,o=(0,t.useMemo)((function(){return r.subscribe(n)}),[r]),void cl((function(){return null==o?void 0:o()}))}))},Ol={key:"animation",shouldRender:function(){return!0},getComponent:function(e){return El.shouldRender(e)?El.Component:_l.shouldRender(e)?_l.Component:Al.shouldRender(e)?Al.Component:void 0}},Pl=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.frameTarget={x:{min:0,max:0},y:{min:0,max:0}},t.stopAxisAnimation={x:void 0,y:void 0},t.animate=function(e,n,r){void 0===r&&(r={});var o=r.originBox,a=r.targetBox,i=r.visibilityAction,l=r.shouldStackAnimate,s=Kt(r,["originBox","targetBox","visibilityAction","shouldStackAnimate"]),u=t.props,c=u.visualElement,f=u.layout;if(!1===l)return t.safeToRemove();var d=Tl(n=o||n,e=a||e),p=Ea((function(r){if("position"===f){var o=e[r].max-e[r].min;n[r].max=n[r].min+o}if(!c.isTargetBoxLocked)return void 0===i?d?t.animateAxis(r,e[r],n[r],s):c.setAxisTarget(r,e[r].min,e[r].max):void(i===ui.Hide?c.hide():c.show())}));return c.render(),Promise.all(p).then((function(){var e,n;null===(n=(e=t.props).onLayoutAnimationComplete)||void 0===n||n.call(e),c.isPresent?c.presence=si.Present:t.safeToRemove()}))},t}return $t(t,e),t.prototype.componentDidMount=function(){var e=this,t=this.props.visualElement;t.animateMotionValue=co,t.enableLayoutProjection(),this.unsubLayoutReady=t.onLayoutUpdate(this.animate),t.updateConfig(Gt(Gt({},t.config),{safeToRemove:function(){return e.safeToRemove()}}))},t.prototype.componentWillUnmount=function(){var e=this;this.unsubLayoutReady(),Ea((function(t){var n,r;return null===(r=(n=e.stopAxisAnimation)[t])||void 0===r?void 0:r.call(n)}))},t.prototype.animateAxis=function(e,t,n,r){var o,a,i=void 0===r?{}:r,l=i.transition,s=i.crossfadeOpacity;null===(a=(o=this.stopAxisAnimation)[e])||void 0===a||a.call(o);var u,c=this.props.visualElement,f=this.frameTarget[e],d=c.axisProgress[e];d.clearListeners(),d.set(0),d.set(0),s&&(u=this.createCrossfadeAnimation(s),c.show());var p=function(){var r=d.get()/1e3;!function(e,t,n,r){e.min=Zn(t.min,n.min,r),e.max=Zn(t.max,n.max,r)}(f,n,t,r),c.setAxisTarget(e,f.min,f.max),null==u||u(r)};p(),c.updateLayoutDelta();var h=d.onChange(p),m=co("x"===e?"layoutX":"layoutY",d,1e3,l||this.props.transition||zl).then(h);return this.stopAxisAnimation[e]=function(){d.stop(),h()},m},t.prototype.createCrossfadeAnimation=function(e){var t=this.props.visualElement.getValue("opacity",0);return function(n){t.set(Dl(Zn(0,1,n))),e.set(jl(Zn(1,0,n)))}},t.prototype.safeToRemove=function(){var e,t;null===(t=(e=this.props).safeToRemove)||void 0===t||t.call(e)},t.prototype.render=function(){return null},t}(t.Component);function Rl(e){var n=Qt(xi(),2)[1];return(0,t.createElement)(Pl,Gt({},e,{safeToRemove:n}))}function Tl(e,t){return Ml(e.x,t.x)||Ml(e.y,t.y)}function Ml(e,t){return e.min!==t.min||e.max!==t.max}var zl={duration:.45,ease:[.4,0,.1,1]};function Ll(e,t,n){return function(r){return r<e?0:r>t?1:n(Yn(e,t,r))}}var Dl=Ll(0,.5,Sr),jl=Ll(.5,.95,yr),Bl={key:"animate-layout",shouldRender:function(e){return!!e.layout||!!e.layoutId},getComponent:function(){return Rl}},Fl=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return $t(t,e),t.prototype.componentDidMount=function(){var e=this.props,t=e.syncLayout,n=e.visualElement;gi(t)&&t.register(n)},t.prototype.getSnapshotBeforeUpdate=function(){var e=this.props,t=e.syncLayout,n=e.visualElement;return gi(t)?t.syncUpdate():(n.snapshotBoundingBox(),t.add(n)),null},t.prototype.componentDidUpdate=function(){var e=this.props,t=e.syncLayout,n=e.visualElement;gi(t)||t.flush(),n.rebaseTargetBox()},t.prototype.render=function(){return null},t}(t.Component);function Nl(e){var n=(0,t.useContext)(yi);return t.createElement(Fl,Gt({},e,{syncLayout:n}))}var Il={useVisualElement:function(e,n,r,o){var a=(0,t.useContext)(Ja).visualElement,i=Ia((function(){return new(Ya(e)?Qa:Fa)(a,o)}));i.updateConfig(Gt(Gt(Gt({},i.config),{enableHardwareAcceleration:!r}),n)),i.layoutId=n.layoutId;var l=(0,t.useContext)(Za),s=null===l||l.isPresent;i.isPresent=void 0!==n.isPresent?n.isPresent:s;var u=null==l?void 0:l.id;return i.isPresenceRoot=!a||a.presenceId!==u,(0,t.useEffect)((function(){if(n.onViewportBoxUpdate)return i.onViewportBoxUpdate(n.onViewportBoxUpdate)}),[n.onViewportBoxUpdate]),i},render:function(e,n,r){var o="string"==typeof e?function(e){var t={};for(var n in e)ri(n)&&(t[n]=e[n]);return t}(n):n;r.clean(),r.build();var a=Ya(e)?function(e){return Gt(Gt({},e.attrs),{style:Gt({},e.reactStyle)})}(r):function(e,t){var n=t.drag,r={style:Gt(Gt(Gt({},e.reactStyle),e.style),e.vars)};return n&&(r.draggable=!1,r.style.userSelect="none",r.style.touchAction=!0===n?"none":"pan-"+("x"===n?"y":"x")),r}(r,n);return(0,t.createElement)(e,Gt(Gt(Gt({},o),{ref:r.ref}),a))}};function Vl(e){var t=Gt(Gt({},Il),{defaultFeatures:e}),n=new Map;return new Proxy({custom:function(e){return Ai(e,t)}},{get:function(e,r){return"custom"===r?e.custom:(n.has(r)||n.set(r,Ai(r,t)),n.get(r))}})}var Ul=Vl([{key:"measure-layout",shouldRender:function(e){return!!e.drag||!!e.layout||!!e.layoutId},getComponent:function(){return Nl}},Ol,ul,bl,kl,Bl]);function Wl(e,t){return t&&e!==t.lead?{visibilityAction:ui.Hide}:t&&e.presence!==si.Entering&&e===t.lead&&t.lead!==t.prevLead?{visibilityAction:ui.Show}:(e.presence===si.Entering?n=null==t?void 0:t.getFollowOrigin():e.presence===si.Exiting&&(r=null==t?void 0:t.getFollowTarget()),{originBox:n,targetBox:r});var n,r}function Hl(e,t){var n,r,o,a={},i=t&&t.lead,l=null==i?void 0:i.presence;return t&&e===i?e.presence===si.Entering?a.originBox=t.getFollowOrigin():e.presence===si.Exiting&&(a.targetBox=t.getFollowTarget()):t&&e===t.follow&&(a.transition=t.getLeadTransition(),l===si.Entering?a.targetBox=t.getLeadTarget():l===si.Exiting&&(a.originBox=t.getLeadOrigin())),(null===(n=null==t?void 0:t.follow)||void 0===n?void 0:n.isPresenceRoot)||(null==i?void 0:i.isPresenceRoot)?(t&&e!==i?t&&e===t.follow?i&&l!==si.Entering&&l===si.Exiting&&(a.crossfadeOpacity=null===(o=null==t?void 0:t.lead)||void 0===o?void 0:o.getValue("opacity",1)):a.visibilityAction=ui.Hide:e.presence===si.Entering&&(a.crossfadeOpacity=null===(r=null==t?void 0:t.follow)||void 0===r?void 0:r.getValue("opacity",0)),a):a}var ql=function(){function e(){this.order=[],this.hasChildren=!1}return e.prototype.add=function(e){var t;if(this.order.push(e),this.snapshot){e.prevSnapshot=this.snapshot,e.prevViewportBox=this.snapshot.boundingBox;var n=this.snapshot.latestMotionValues;for(var r in n)e.hasValue(r)?null===(t=e.getValue(r))||void 0===t||t.set(n[r]):e.addValue(r,Zr(n[r]))}this.hasChildren=!0},e.prototype.remove=function(e){var t=this.order.findIndex((function(t){return e===t}));-1!==t&&this.order.splice(t,1)},e.prototype.updateLeadAndFollow=function(){this.prevLead=this.lead,this.prevFollow=this.follow;var e=Qt(function(e,t){for(var n=Qt(t,2),r=n[0],o=n[1],a=void 0,i=0,l=void 0,s=e.length,u=!1,c=s-1;c>=0;c--){var f=e[c];if(c===s-1&&(u=f.isPresent),u)a=f;else{var d=e[c-1];d&&d.isPresent&&(a=f)}if(a){i=c;break}}if(a||(a=e[0]),l=e[i-1],a)for(c=i-1;c>=0;c--)if((f=e[c]).isPresent){l=f;break}return a!==r&&!u&&l===o&&e.find((function(e){return e===r}))&&(a=r),[a,l]}(this.order,[this.lead,this.follow]),2),t=e[0],n=e[1];this.lead=t,this.follow=n},e.prototype.updateSnapshot=function(){if(this.lead){var e={boundingBox:this.lead.prevViewportBox,latestMotionValues:{}};this.lead.forEachValue((function(t,n){var r=t.get();Qo(r)||(e.latestMotionValues[n]=r)}));var t=ol.get(this.lead);t&&t.isDragging&&(e.isDragging=!0,e.cursorProgress=t.cursorProgress),this.snapshot=e}},e.prototype.isLeadPresent=function(){var e;return this.lead&&(null===(e=this.lead)||void 0===e?void 0:e.presence)!==si.Exiting},e.prototype.getFollowOrigin=function(){var e;return this.follow?this.follow.prevViewportBox:null===(e=this.snapshot)||void 0===e?void 0:e.boundingBox},e.prototype.getFollowTarget=function(){var e;return null===(e=this.follow)||void 0===e?void 0:e.box},e.prototype.getLeadOrigin=function(){var e;return null===(e=this.lead)||void 0===e?void 0:e.prevViewportBox},e.prototype.getLeadTarget=function(){var e;return null===(e=this.lead)||void 0===e?void 0:e.box},e.prototype.getLeadTransition=function(){var e;return null===(e=this.lead)||void 0===e?void 0:e.config.transition},e}();!function(e){function n(){var t=null!==e&&e.apply(this,arguments)||this;return t.children=new Set,t.stacks=new Map,t.hasMounted=!1,t.updateScheduled=!1,t.renderScheduled=!1,t.syncContext=Gt(Gt({},vi()),{syncUpdate:function(e){return t.scheduleUpdate(e)},forceUpdate:function(){t.syncContext=Gt({},t.syncContext),t.scheduleUpdate(!0)},register:function(e){return t.addChild(e)},remove:function(e){return t.removeChild(e)}}),t}$t(n,e),n.prototype.componentDidMount=function(){this.hasMounted=!0,this.updateStacks()},n.prototype.componentDidUpdate=function(){this.startLayoutAnimation()},n.prototype.shouldComponentUpdate=function(){return this.renderScheduled=!0,!0},n.prototype.startLayoutAnimation=function(){var e=this;this.renderScheduled=this.updateScheduled=!1;var t=this.props.type;this.children.forEach((function(e){e.isPresent?e.presence!==si.Entering&&(e.presence=e.presence===si.Exiting?si.Entering:si.Present):e.presence=si.Exiting})),this.updateStacks();var n="crossfade"===t?Hl:Wl,r={measureLayout:function(e){return e.measureLayout()},layoutReady:function(t){var r=t.layoutId;t.layoutReady(n(t,e.getStack(r)))}};this.children.forEach((function(t){return e.syncContext.add(t)})),this.syncContext.flush(r),this.stacks.forEach((function(e){return e.snapshot=void 0}))},n.prototype.updateStacks=function(){this.stacks.forEach((function(e){return e.updateLeadAndFollow()}))},n.prototype.scheduleUpdate=function(e){void 0===e&&(e=!1),!e&&this.updateScheduled||(this.updateScheduled=!0,this.children.forEach((function(e){return e.snapshotBoundingBox()})),this.stacks.forEach((function(e){return e.updateSnapshot()})),!e&&this.renderScheduled||(this.renderScheduled=!0,this.forceUpdate()))},n.prototype.addChild=function(e){this.children.add(e),this.addToStack(e),e.presence=this.hasMounted?si.Entering:si.Present},n.prototype.removeChild=function(e){this.scheduleUpdate(),this.children.delete(e),this.removeFromStack(e)},n.prototype.addToStack=function(e){var t=this.getStack(e.layoutId);null==t||t.add(e)},n.prototype.removeFromStack=function(e){var t=this.getStack(e.layoutId);null==t||t.remove(e)},n.prototype.getStack=function(e){if(void 0!==e)return!this.stacks.has(e)&&this.stacks.set(e,new ql),this.stacks.get(e)},n.prototype.render=function(){return(0,t.createElement)(yi.Provider,{value:this.syncContext},this.props.children)}}(t.Component),Zr(0),Zr(0),Zr(0),Zr(0);var $l=Zr(null);if("undefined"!=typeof window)if(window.matchMedia){var Gl=window.matchMedia("(prefers-reduced-motion)"),Kl=function(){return $l.set(Gl.matches)};Gl.addListener(Kl),Kl()}else $l.set(!1);function Ql(){return(Ql=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function Xl(){return(Xl=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function Yl(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}!function(){function e(){this.componentControls=new Set}e.prototype.subscribe=function(e){var t=this;return this.componentControls.add(e),function(){return t.componentControls.delete(e)}},e.prototype.start=function(e,t){this.componentControls.forEach((function(n){n.start(e.nativeEvent||e,t)}))},e.prototype.updateConstraints=function(){this.componentControls.forEach((function(e){e.prepareBoundingBox(),e.resolveDragConstraints()}))}}(),function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.initialState={},t}$t(t,e),t.prototype.updateLayoutDelta=function(){},t.prototype.build=function(){},t.prototype.clean=function(){},t.prototype.makeTargetAnimatable=function(e){var t=e.transition,n=e.transitionEnd,r=Kt(e,["transition","transitionEnd"]);return Oo(this,r,Ro(r,t||{},this)),Gt({transition:t,transitionEnd:n},r)},t.prototype.getBoundingBox=function(){return{x:{min:0,max:0},y:{min:0,max:0}}},t.prototype.readNativeValue=function(e){return this.initialState[e]||0},t.prototype.render=function(){this.build()}}(Fo),n(2473);var Zl=Jl()?t.useLayoutEffect:t.useEffect;function Jl(){return!("undefined"==typeof window||!window.document||!window.document.createElement)}"undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math&&self;var es=!1,ts=0,ns=function(){return++ts};function rs(e,t){return e+"-"+t}function os(e,n){var r=function(e){var n=es?ns():null,r=(0,t.useState)(n),o=r[0],a=r[1];return Zl((function(){null===o&&a(ns())}),[]),(0,t.useEffect)((function(){!1===es&&(es=!0)}),[]),null!=o?String(o):void 0}(),o=null!=e?e:r;return n?rs(n,o):o}function as(){return(as=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function is(e,t){var n=e.target;if(e.button>0)return!1;if(n){var r=n.ownerDocument;if(!r||!r.body.contains(n))return!1}return t.current&&!t.current.contains(n)}var ls=(e,n)=>{var r=t.useRef(!1);return t.useEffect((()=>{if(r.current)return e();r.current=!0}),n),r.current};function ss(e){var t=e.getBoundingClientRect();return{width:t.width,height:t.height,top:t.top,right:t.right,bottom:t.bottom,left:t.left,x:t.left,y:t.top}}function us(e){if("[object Window]"!==e.toString()){var t=e.ownerDocument;return t?t.defaultView:window}return e}function cs(e){var t=us(e);return{scrollLeft:t.pageXOffset,scrollTop:t.pageYOffset}}function fs(e){return e instanceof us(e).Element||e instanceof Element}function ds(e){return e instanceof us(e).HTMLElement||e instanceof HTMLElement}function ps(e){return e?(e.nodeName||"").toLowerCase():null}function hs(e){return(fs(e)?e.ownerDocument:e.document).documentElement}function ms(e){return ss(hs(e)).left+cs(e).scrollLeft}function vs(e){return us(e).getComputedStyle(e)}function gs(e){var t=vs(e),n=t.overflow,r=t.overflowX,o=t.overflowY;return/auto|scroll|overlay|hidden/.test(n+o+r)}function ys(e,t,n){void 0===n&&(n=!1);var r,o,a=hs(t),i=ss(e),l=ds(t),s={scrollLeft:0,scrollTop:0},u={x:0,y:0};return(l||!l&&!n)&&(("body"!==ps(t)||gs(a))&&(s=(r=t)!==us(r)&&ds(r)?{scrollLeft:(o=r).scrollLeft,scrollTop:o.scrollTop}:cs(r)),ds(t)?((u=ss(t)).x+=t.clientLeft,u.y+=t.clientTop):a&&(u.x=ms(a))),{x:i.left+s.scrollLeft-u.x,y:i.top+s.scrollTop-u.y,width:i.width,height:i.height}}function bs(e){return{x:e.offsetLeft,y:e.offsetTop,width:e.offsetWidth,height:e.offsetHeight}}function xs(e){return"html"===ps(e)?e:e.assignedSlot||e.parentNode||e.host||hs(e)}function ws(e){return["html","body","#document"].indexOf(ps(e))>=0?e.ownerDocument.body:ds(e)&&gs(e)?e:ws(xs(e))}function ks(e,t){void 0===t&&(t=[]);var n=ws(e),r="body"===ps(n),o=us(n),a=r?[o].concat(o.visualViewport||[],gs(n)?n:[]):n,i=t.concat(a);return r?i:i.concat(ks(xs(a)))}function Ss(e){return["table","td","th"].indexOf(ps(e))>=0}function Cs(e){if(!ds(e)||"fixed"===vs(e).position)return null;var t=e.offsetParent;if(t){var n=hs(t);if("body"===ps(t)&&"static"===vs(t).position&&"static"!==vs(n).position)return n}return t}function Es(e){for(var t=us(e),n=Cs(e);n&&Ss(n)&&"static"===vs(n).position;)n=Cs(n);return n&&"body"===ps(n)&&"static"===vs(n).position?t:n||function(e){for(var t=xs(e);ds(t)&&["html","body"].indexOf(ps(t))<0;){var n=vs(t);if("none"!==n.transform||"none"!==n.perspective||n.willChange&&"auto"!==n.willChange)return t;t=t.parentNode}return null}(e)||t}var _s="top",As="bottom",Os="right",Ps="left",Rs="auto",Ts=[_s,As,Os,Ps],Ms="start",zs="end",Ls="viewport",Ds="popper",js=Ts.reduce((function(e,t){return e.concat([t+"-"+Ms,t+"-"+zs])}),[]),Bs=[].concat(Ts,[Rs]).reduce((function(e,t){return e.concat([t,t+"-"+Ms,t+"-"+zs])}),[]),Fs=["beforeRead","read","afterRead","beforeMain","main","afterMain","beforeWrite","write","afterWrite"];function Ns(e){var t=new Map,n=new Set,r=[];function o(e){n.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach((function(e){if(!n.has(e)){var r=t.get(e);r&&o(r)}})),r.push(e)}return e.forEach((function(e){t.set(e.name,e)})),e.forEach((function(e){n.has(e.name)||o(e)})),r}var Is={placement:"bottom",modifiers:[],strategy:"absolute"};function Vs(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return!t.some((function(e){return!(e&&"function"==typeof e.getBoundingClientRect)}))}function Us(e){void 0===e&&(e={});var t=e,n=t.defaultModifiers,r=void 0===n?[]:n,o=t.defaultOptions,a=void 0===o?Is:o;return function(e,t,n){void 0===n&&(n=a);var o,i,l={placement:"bottom",orderedModifiers:[],options:Object.assign(Object.assign({},Is),a),modifiersData:{},elements:{reference:e,popper:t},attributes:{},styles:{}},s=[],u=!1,c={state:l,setOptions:function(n){f(),l.options=Object.assign(Object.assign(Object.assign({},a),l.options),n),l.scrollParents={reference:fs(e)?ks(e):e.contextElement?ks(e.contextElement):[],popper:ks(t)};var o,i,u=function(e){var t=Ns(e);return Fs.reduce((function(e,n){return e.concat(t.filter((function(e){return e.phase===n})))}),[])}((o=[].concat(r,l.options.modifiers),i=o.reduce((function(e,t){var n=e[t.name];return e[t.name]=n?Object.assign(Object.assign(Object.assign({},n),t),{},{options:Object.assign(Object.assign({},n.options),t.options),data:Object.assign(Object.assign({},n.data),t.data)}):t,e}),{}),Object.keys(i).map((function(e){return i[e]}))));return l.orderedModifiers=u.filter((function(e){return e.enabled})),l.orderedModifiers.forEach((function(e){var t=e.name,n=e.options,r=void 0===n?{}:n,o=e.effect;if("function"==typeof o){var a=o({state:l,name:t,instance:c,options:r});s.push(a||function(){})}})),c.update()},forceUpdate:function(){if(!u){var e=l.elements,t=e.reference,n=e.popper;if(Vs(t,n)){l.rects={reference:ys(t,Es(n),"fixed"===l.options.strategy),popper:bs(n)},l.reset=!1,l.placement=l.options.placement,l.orderedModifiers.forEach((function(e){return l.modifiersData[e.name]=Object.assign({},e.data)}));for(var r=0;r<l.orderedModifiers.length;r++)if(!0!==l.reset){var o=l.orderedModifiers[r],a=o.fn,i=o.options,s=void 0===i?{}:i,f=o.name;"function"==typeof a&&(l=a({state:l,options:s,name:f,instance:c})||l)}else l.reset=!1,r=-1}}},update:(o=function(){return new Promise((function(e){c.forceUpdate(),e(l)}))},function(){return i||(i=new Promise((function(e){Promise.resolve().then((function(){i=void 0,e(o())}))}))),i}),destroy:function(){f(),u=!0}};if(!Vs(e,t))return c;function f(){s.forEach((function(e){return e()})),s=[]}return c.setOptions(n).then((function(e){!u&&n.onFirstUpdate&&n.onFirstUpdate(e)})),c}}var Ws={passive:!0};function Hs(e){return e.split("-")[0]}function qs(e){return e.split("-")[1]}function $s(e){return["top","bottom"].indexOf(e)>=0?"x":"y"}function Gs(e){var t,n=e.reference,r=e.element,o=e.placement,a=o?Hs(o):null,i=o?qs(o):null,l=n.x+n.width/2-r.width/2,s=n.y+n.height/2-r.height/2;switch(a){case _s:t={x:l,y:n.y-r.height};break;case As:t={x:l,y:n.y+n.height};break;case Os:t={x:n.x+n.width,y:s};break;case Ps:t={x:n.x-r.width,y:s};break;default:t={x:n.x,y:n.y}}var u=a?$s(a):null;if(null!=u){var c="y"===u?"height":"width";switch(i){case Ms:t[u]=Math.floor(t[u])-Math.floor(n[c]/2-r[c]/2);break;case zs:t[u]=Math.floor(t[u])+Math.ceil(n[c]/2-r[c]/2)}}return t}var Ks={top:"auto",right:"auto",bottom:"auto",left:"auto"};function Qs(e){var t,n=e.popper,r=e.popperRect,o=e.placement,a=e.offsets,i=e.position,l=e.gpuAcceleration,s=e.adaptive,u=function(e){var t=e.x,n=e.y,r=window.devicePixelRatio||1;return{x:Math.round(t*r)/r||0,y:Math.round(n*r)/r||0}}(a),c=u.x,f=u.y,d=a.hasOwnProperty("x"),p=a.hasOwnProperty("y"),h=Ps,m=_s,v=window;if(s){var g=Es(n);g===us(n)&&(g=hs(n)),o===_s&&(m=As,f-=g.clientHeight-r.height,f*=l?1:-1),o===Ps&&(h=Os,c-=g.clientWidth-r.width,c*=l?1:-1)}var y,b=Object.assign({position:i},s&&Ks);return l?Object.assign(Object.assign({},b),{},((y={})[m]=p?"0":"",y[h]=d?"0":"",y.transform=(v.devicePixelRatio||1)<2?"translate("+c+"px, "+f+"px)":"translate3d("+c+"px, "+f+"px, 0)",y)):Object.assign(Object.assign({},b),{},((t={})[m]=p?f+"px":"",t[h]=d?c+"px":"",t.transform="",t))}var Xs={left:"right",right:"left",bottom:"top",top:"bottom"};function Ys(e){return e.replace(/left|right|bottom|top/g,(function(e){return Xs[e]}))}var Zs={start:"end",end:"start"};function Js(e){return e.replace(/start|end/g,(function(e){return Zs[e]}))}function eu(e,t){var n=Boolean(t.getRootNode&&t.getRootNode().host);if(e.contains(t))return!0;if(n){var r=t;do{if(r&&e.isSameNode(r))return!0;r=r.parentNode||r.host}while(r)}return!1}function tu(e){return Object.assign(Object.assign({},e),{},{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function nu(e,t){return t===Ls?tu(function(e){var t=us(e),n=hs(e),r=t.visualViewport,o=n.clientWidth,a=n.clientHeight,i=0,l=0;return r&&(o=r.width,a=r.height,/^((?!chrome|android).)*safari/i.test(navigator.userAgent)||(i=r.offsetLeft,l=r.offsetTop)),{width:o,height:a,x:i+ms(e),y:l}}(e)):ds(t)?function(e){var t=ss(e);return t.top=t.top+e.clientTop,t.left=t.left+e.clientLeft,t.bottom=t.top+e.clientHeight,t.right=t.left+e.clientWidth,t.width=e.clientWidth,t.height=e.clientHeight,t.x=t.left,t.y=t.top,t}(t):tu(function(e){var t=hs(e),n=cs(e),r=e.ownerDocument.body,o=Math.max(t.scrollWidth,t.clientWidth,r?r.scrollWidth:0,r?r.clientWidth:0),a=Math.max(t.scrollHeight,t.clientHeight,r?r.scrollHeight:0,r?r.clientHeight:0),i=-n.scrollLeft+ms(e),l=-n.scrollTop;return"rtl"===vs(r||t).direction&&(i+=Math.max(t.clientWidth,r?r.clientWidth:0)-o),{width:o,height:a,x:i,y:l}}(hs(e)))}function ru(e){return Object.assign(Object.assign({},{top:0,right:0,bottom:0,left:0}),e)}function ou(e,t){return t.reduce((function(t,n){return t[n]=e,t}),{})}function au(e,t){void 0===t&&(t={});var n=t,r=n.placement,o=void 0===r?e.placement:r,a=n.boundary,i=void 0===a?"clippingParents":a,l=n.rootBoundary,s=void 0===l?Ls:l,u=n.elementContext,c=void 0===u?Ds:u,f=n.altBoundary,d=void 0!==f&&f,p=n.padding,h=void 0===p?0:p,m=ru("number"!=typeof h?h:ou(h,Ts)),v=c===Ds?"reference":Ds,g=e.elements.reference,y=e.rects.popper,b=e.elements[d?v:c],x=function(e,t,n){var r="clippingParents"===t?function(e){var t=ks(xs(e)),n=["absolute","fixed"].indexOf(vs(e).position)>=0&&ds(e)?Es(e):e;return fs(n)?t.filter((function(e){return fs(e)&&eu(e,n)&&"body"!==ps(e)})):[]}(e):[].concat(t),o=[].concat(r,[n]),a=o[0],i=o.reduce((function(t,n){var r=nu(e,n);return t.top=Math.max(r.top,t.top),t.right=Math.min(r.right,t.right),t.bottom=Math.min(r.bottom,t.bottom),t.left=Math.max(r.left,t.left),t}),nu(e,a));return i.width=i.right-i.left,i.height=i.bottom-i.top,i.x=i.left,i.y=i.top,i}(fs(b)?b:b.contextElement||hs(e.elements.popper),i,s),w=ss(g),k=Gs({reference:w,element:y,strategy:"absolute",placement:o}),S=tu(Object.assign(Object.assign({},y),k)),C=c===Ds?S:w,E={top:x.top-C.top+m.top,bottom:C.bottom-x.bottom+m.bottom,left:x.left-C.left+m.left,right:C.right-x.right+m.right},_=e.modifiersData.offset;if(c===Ds&&_){var A=_[o];Object.keys(E).forEach((function(e){var t=[Os,As].indexOf(e)>=0?1:-1,n=[_s,As].indexOf(e)>=0?"y":"x";E[e]+=A[n]*t}))}return E}function iu(e,t,n){return Math.max(e,Math.min(t,n))}function lu(e,t,n){return void 0===n&&(n={x:0,y:0}),{top:e.top-t.height-n.y,right:e.right-t.width+n.x,bottom:e.bottom-t.height+n.y,left:e.left-t.width-n.x}}function su(e){return[_s,Os,As,Ps].some((function(t){return e[t]>=0}))}var uu=Us({defaultModifiers:[{name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var t=e.state,n=e.instance,r=e.options,o=r.scroll,a=void 0===o||o,i=r.resize,l=void 0===i||i,s=us(t.elements.popper),u=[].concat(t.scrollParents.reference,t.scrollParents.popper);return a&&u.forEach((function(e){e.addEventListener("scroll",n.update,Ws)})),l&&s.addEventListener("resize",n.update,Ws),function(){a&&u.forEach((function(e){e.removeEventListener("scroll",n.update,Ws)})),l&&s.removeEventListener("resize",n.update,Ws)}},data:{}},{name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,n=e.name;t.modifiersData[n]=Gs({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}},{name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t=e.state,n=e.options,r=n.gpuAcceleration,o=void 0===r||r,a=n.adaptive,i=void 0===a||a,l={placement:Hs(t.placement),popper:t.elements.popper,popperRect:t.rects.popper,gpuAcceleration:o};null!=t.modifiersData.popperOffsets&&(t.styles.popper=Object.assign(Object.assign({},t.styles.popper),Qs(Object.assign(Object.assign({},l),{},{offsets:t.modifiersData.popperOffsets,position:t.options.strategy,adaptive:i})))),null!=t.modifiersData.arrow&&(t.styles.arrow=Object.assign(Object.assign({},t.styles.arrow),Qs(Object.assign(Object.assign({},l),{},{offsets:t.modifiersData.arrow,position:"absolute",adaptive:!1})))),t.attributes.popper=Object.assign(Object.assign({},t.attributes.popper),{},{"data-popper-placement":t.placement})},data:{}},{name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var t=e.state;Object.keys(t.elements).forEach((function(e){var n=t.styles[e]||{},r=t.attributes[e]||{},o=t.elements[e];ds(o)&&ps(o)&&(Object.assign(o.style,n),Object.keys(r).forEach((function(e){var t=r[e];!1===t?o.removeAttribute(e):o.setAttribute(e,!0===t?"":t)})))}))},effect:function(e){var t=e.state,n={popper:{position:t.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(t.elements.popper.style,n.popper),t.elements.arrow&&Object.assign(t.elements.arrow.style,n.arrow),function(){Object.keys(t.elements).forEach((function(e){var r=t.elements[e],o=t.attributes[e]||{},a=Object.keys(t.styles.hasOwnProperty(e)?t.styles[e]:n[e]).reduce((function(e,t){return e[t]="",e}),{});ds(r)&&ps(r)&&(Object.assign(r.style,a),Object.keys(o).forEach((function(e){r.removeAttribute(e)})))}))}},requires:["computeStyles"]},{name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var t=e.state,n=e.options,r=e.name,o=n.offset,a=void 0===o?[0,0]:o,i=Bs.reduce((function(e,n){return e[n]=function(e,t,n){var r=Hs(e),o=[Ps,_s].indexOf(r)>=0?-1:1,a="function"==typeof n?n(Object.assign(Object.assign({},t),{},{placement:e})):n,i=a[0],l=a[1];return i=i||0,l=(l||0)*o,[Ps,Os].indexOf(r)>=0?{x:l,y:i}:{x:i,y:l}}(n,t.rects,a),e}),{}),l=i[t.placement],s=l.x,u=l.y;null!=t.modifiersData.popperOffsets&&(t.modifiersData.popperOffsets.x+=s,t.modifiersData.popperOffsets.y+=u),t.modifiersData[r]=i}},{name:"flip",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,r=e.name;if(!t.modifiersData[r]._skip){for(var o=n.mainAxis,a=void 0===o||o,i=n.altAxis,l=void 0===i||i,s=n.fallbackPlacements,u=n.padding,c=n.boundary,f=n.rootBoundary,d=n.altBoundary,p=n.flipVariations,h=void 0===p||p,m=n.allowedAutoPlacements,v=t.options.placement,g=Hs(v),y=s||(g!==v&&h?function(e){if(Hs(e)===Rs)return[];var t=Ys(e);return[Js(e),t,Js(t)]}(v):[Ys(v)]),b=[v].concat(y).reduce((function(e,n){return e.concat(Hs(n)===Rs?function(e,t){void 0===t&&(t={});var n=t,r=n.placement,o=n.boundary,a=n.rootBoundary,i=n.padding,l=n.flipVariations,s=n.allowedAutoPlacements,u=void 0===s?Bs:s,c=qs(r),f=c?l?js:js.filter((function(e){return qs(e)===c})):Ts,d=f.filter((function(e){return u.indexOf(e)>=0}));0===d.length&&(d=f);var p=d.reduce((function(t,n){return t[n]=au(e,{placement:n,boundary:o,rootBoundary:a,padding:i})[Hs(n)],t}),{});return Object.keys(p).sort((function(e,t){return p[e]-p[t]}))}(t,{placement:n,boundary:c,rootBoundary:f,padding:u,flipVariations:h,allowedAutoPlacements:m}):n)}),[]),x=t.rects.reference,w=t.rects.popper,k=new Map,S=!0,C=b[0],E=0;E<b.length;E++){var _=b[E],A=Hs(_),O=qs(_)===Ms,P=[_s,As].indexOf(A)>=0,R=P?"width":"height",T=au(t,{placement:_,boundary:c,rootBoundary:f,altBoundary:d,padding:u}),M=P?O?Os:Ps:O?As:_s;x[R]>w[R]&&(M=Ys(M));var z=Ys(M),L=[];if(a&&L.push(T[A]<=0),l&&L.push(T[M]<=0,T[z]<=0),L.every((function(e){return e}))){C=_,S=!1;break}k.set(_,L)}if(S)for(var D=function(e){var t=b.find((function(t){var n=k.get(t);if(n)return n.slice(0,e).every((function(e){return e}))}));if(t)return C=t,"break"},j=h?3:1;j>0&&"break"!==D(j);j--);t.placement!==C&&(t.modifiersData[r]._skip=!0,t.placement=C,t.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}},{name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,r=e.name,o=n.mainAxis,a=void 0===o||o,i=n.altAxis,l=void 0!==i&&i,s=n.boundary,u=n.rootBoundary,c=n.altBoundary,f=n.padding,d=n.tether,p=void 0===d||d,h=n.tetherOffset,m=void 0===h?0:h,v=au(t,{boundary:s,rootBoundary:u,padding:f,altBoundary:c}),g=Hs(t.placement),y=qs(t.placement),b=!y,x=$s(g),w="x"===x?"y":"x",k=t.modifiersData.popperOffsets,S=t.rects.reference,C=t.rects.popper,E="function"==typeof m?m(Object.assign(Object.assign({},t.rects),{},{placement:t.placement})):m,_={x:0,y:0};if(k){if(a){var A="y"===x?_s:Ps,O="y"===x?As:Os,P="y"===x?"height":"width",R=k[x],T=k[x]+v[A],M=k[x]-v[O],z=p?-C[P]/2:0,L=y===Ms?S[P]:C[P],D=y===Ms?-C[P]:-S[P],j=t.elements.arrow,B=p&&j?bs(j):{width:0,height:0},F=t.modifiersData["arrow#persistent"]?t.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},N=F[A],I=F[O],V=iu(0,S[P],B[P]),U=b?S[P]/2-z-V-N-E:L-V-N-E,W=b?-S[P]/2+z+V+I+E:D+V+I+E,H=t.elements.arrow&&Es(t.elements.arrow),q=H?"y"===x?H.clientTop||0:H.clientLeft||0:0,$=t.modifiersData.offset?t.modifiersData.offset[t.placement][x]:0,G=k[x]+U-$-q,K=k[x]+W-$,Q=iu(p?Math.min(T,G):T,R,p?Math.max(M,K):M);k[x]=Q,_[x]=Q-R}if(l){var X="x"===x?_s:Ps,Y="x"===x?As:Os,Z=k[w],J=iu(Z+v[X],Z,Z-v[Y]);k[w]=J,_[w]=J-Z}t.modifiersData[r]=_}},requiresIfExists:["offset"]},{name:"arrow",enabled:!0,phase:"main",fn:function(e){var t,n=e.state,r=e.name,o=n.elements.arrow,a=n.modifiersData.popperOffsets,i=Hs(n.placement),l=$s(i),s=[Ps,Os].indexOf(i)>=0?"height":"width";if(o&&a){var u=n.modifiersData[r+"#persistent"].padding,c=bs(o),f="y"===l?_s:Ps,d="y"===l?As:Os,p=n.rects.reference[s]+n.rects.reference[l]-a[l]-n.rects.popper[s],h=a[l]-n.rects.reference[l],m=Es(o),v=m?"y"===l?m.clientHeight||0:m.clientWidth||0:0,g=p/2-h/2,y=u[f],b=v-c[s]-u[d],x=v/2-c[s]/2+g,w=iu(y,x,b),k=l;n.modifiersData[r]=((t={})[k]=w,t.centerOffset=w-x,t)}},effect:function(e){var t=e.state,n=e.options,r=e.name,o=n.element,a=void 0===o?"[data-popper-arrow]":o,i=n.padding,l=void 0===i?0:i;null!=a&&("string"!=typeof a||(a=t.elements.popper.querySelector(a)))&&eu(t.elements.popper,a)&&(t.elements.arrow=a,t.modifiersData[r+"#persistent"]={padding:ru("number"!=typeof l?l:ou(l,Ts))})},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]},{name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,n=e.name,r=t.rects.reference,o=t.rects.popper,a=t.modifiersData.preventOverflow,i=au(t,{elementContext:"reference"}),l=au(t,{altBoundary:!0}),s=lu(i,r),u=lu(l,o,a),c=su(s),f=su(u);t.modifiersData[n]={referenceClippingOffsets:s,popperEscapeOffsets:u,isReferenceHidden:c,hasPopperEscaped:f},t.attributes.popper=Object.assign(Object.assign({},t.attributes.popper),{},{"data-popper-reference-hidden":c,"data-popper-escaped":f})}}]}),cu=Object.prototype.hasOwnProperty;function fu(e,t,n){for(n of e.keys())if(du(n,t))return n}function du(e,t){var n,r,o;if(e===t)return!0;if(e&&t&&(n=e.constructor)===t.constructor){if(n===Date)return e.getTime()===t.getTime();if(n===RegExp)return e.toString()===t.toString();if(n===Array){if((r=e.length)===t.length)for(;r--&&du(e[r],t[r]););return-1===r}if(n===Set){if(e.size!==t.size)return!1;for(r of e){if((o=r)&&"object"==typeof o&&!(o=fu(t,o)))return!1;if(!t.has(o))return!1}return!0}if(n===Map){if(e.size!==t.size)return!1;for(r of e){if((o=r[0])&&"object"==typeof o&&!(o=fu(t,o)))return!1;if(!du(r[1],t.get(o)))return!1}return!0}if(n===ArrayBuffer)e=new Uint8Array(e),t=new Uint8Array(t);else if(n===DataView){if((r=e.byteLength)===t.byteLength)for(;r--&&e.getInt8(r)===t.getInt8(r););return-1===r}if(ArrayBuffer.isView(e)){if((r=e.byteLength)===t.byteLength)for(;r--&&e[r]===t[r];);return-1===r}if(!n||"object"==typeof e){for(n in r=0,e){if(cu.call(e,n)&&++r&&!cu.call(t,n))return!1;if(!(n in t)||!du(e[n],t[n]))return!1}return Object.keys(t).length===r}}return e!=e&&t!=t}function pu(e,t){return n=>{var r=(0,a.fromEntries)(t.map((t=>[t,e[t]]))),o=du(n.popper,r.popper);return du(n.arrow,r.arrow)&&o?n:r}}var hu=[];function mu(){return(mu=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function vu(e,t){if(t)return e.includes("top")?"2px 2px 2px 0 "+t:e.includes("bottom")?"-1px -1px 1px 0 "+t:e.includes("right")?"-1px 1px 1px 0 "+t:e.includes("left")?"1px -1px 1px 0 "+t:void 0}var gu={top:"bottom center","top-start":"bottom left","top-end":"bottom right",bottom:"top center","bottom-start":"top left","bottom-end":"top right",left:"right center","left-start":"right top","left-end":"right bottom",right:"left center","right-start":"left top","right-end":"left bottom"},yu=e=>gu[e];function bu(){return(bu=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function xu(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}function wu(){return(wu=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var[ku,Su]=(0,a.createContext)({strict:!1,name:"MenuContext"});function Cu(e){var{id:n,closeOnSelect:r=!0,closeOnBlur:o=!0,autoSelect:i=!0,isLazy:l,placement:s="bottom-start",fixed:u=!0}=e,{isOpen:c,onOpen:f,onClose:d,onToggle:p}=function(e){void 0===e&&(e={});var{onClose:n,onOpen:r,isOpen:o,id:a}=e,[i,l]=t.useState(e.defaultIsOpen||!1),[s,u]=Ot(o,i),c=os(a,"disclosure"),f=t.useCallback((()=>{s||l(!1),null==n||n()}),[s,n]),d=t.useCallback((()=>{s||l(!0),null==r||r()}),[s,r]),p=t.useCallback((()=>{(u?f:d)()}),[u,d,f]);return{isOpen:!!u,onOpen:d,onClose:f,onToggle:p,isControlled:s,getButtonProps:function(e){return void 0===e&&(e={}),as({},e,{"aria-expanded":"true","aria-controls":c,onClick:(0,At.v0)(e.onClick,p)})},getDisclosureProps:function(e){return void 0===e&&(e={}),as({},e,{hidden:!u,id:c})}}}(e),h=(0,t.useRef)(null),m=(0,t.useRef)(null);!function(e){var{ref:n,handler:r}=e,o=function(e){var n=t.useRef(e);return t.useEffect((()=>{n.current=e}),[e]),n}(r),a=(0,t.useRef)({isPointerDown:!1,ignoreEmulatedMouseEvents:!1}).current;(0,t.useEffect)((()=>{var e=e=>{is(e,n)&&(a.isPointerDown=!0)},t=e=>{a.ignoreEmulatedMouseEvents?a.ignoreEmulatedMouseEvents=!1:a.isPointerDown&&r&&is(e,n)&&(a.isPointerDown=!1,null==o.current||o.current(e))},i=e=>{a.ignoreEmulatedMouseEvents=!0,r&&a.isPointerDown&&is(e,n)&&(a.isPointerDown=!1,null==o.current||o.current(e))};return document.addEventListener("mousedown",e,!0),document.addEventListener("mouseup",t,!0),document.addEventListener("touchstart",e,!0),document.addEventListener("touchend",i,!0),()=>{document.removeEventListener("mousedown",e,!0),document.removeEventListener("mouseup",t,!0),document.removeEventListener("touchstart",e,!0),document.removeEventListener("touchend",i,!0)}}),[r,n,a.ignoreEmulatedMouseEvents,a.isPointerDown])}({ref:h,handler:e=>{var t;c&&o&&!(null==(t=m.current)?void 0:t.contains(e.target))&&d()}});var v=function(e){var n,r;void 0===e&&(e={});var{placement:o="bottom",preventOverflow:i=!0,fixed:l=!1,flip:s=!0,arrowSize:u=8,arrowShadowColor:c,gutter:f=8,arrowPadding:d=4,offset:p,matchWidth:h,modifiers:m=[]}=e,[v,g]=t.useState(null),[y,b]=t.useState(null),[x,w]=t.useState(null),k=function(e,n,r){void 0===r&&(r={});var o=t.useRef(null),a={onFirstUpdate:r.onFirstUpdate,placement:r.placement||"bottom",strategy:r.strategy||"absolute",modifiers:r.modifiers||hu},[i,l]=t.useState({popper:{position:a.strategy,left:"0",top:"0"}}),[s,u]=t.useState({}),c=t.useMemo((()=>({name:"updateState",enabled:!0,phase:"write",fn:e=>{var{state:t}=e,n=Object.keys(t.elements);l(pu(t.styles,n)),u(pu(t.attributes,n))},requires:["computeStyles"]})),[]),f=t.useMemo((()=>{var e={onFirstUpdate:a.onFirstUpdate,placement:a.placement,strategy:a.strategy,modifiers:[...a.modifiers,c,{name:"applyStyles",enabled:!1}]};return du(o.current,e)?o.current||e:(o.current=e,e)}),[a.onFirstUpdate,a.placement,a.strategy,a.modifiers,c]),d=t.useRef();return bt((()=>{d.current&&d.current.setOptions(f)}),[f]),bt((()=>{if(null!=e||null!=n){var t=(r.createPopper||uu)(e,n,f);return d.current=t,()=>{t.destroy(),d.current=null}}}),[e,n,r.createPopper]),t.useEffect((()=>{var e=requestAnimationFrame((()=>{var e;null==(e=d.current)||e.forceUpdate()}));return()=>{cancelAnimationFrame(e)}}),[]),{state:d.current?d.current.state:null,styles:i,attributes:s,update:d.current?d.current.update:null,forceUpdate:d.current?d.current.forceUpdate:null}}(v,y,{placement:o,strategy:l?"fixed":"absolute",modifiers:t.useMemo((()=>[{name:"offset",options:{offset:null!=p?p:[0,f]},phase:"main"},{name:"preventOverflow",enabled:!!i,phase:"main"},{name:"arrow",enabled:!!x,options:{element:x,padding:d},phase:"main"},{name:"flip",enabled:s,options:{padding:8},phase:"main"},{name:"matchWidth",enabled:!!h,phase:"beforeWrite",requires:["computeStyles"],fn:e=>{var{state:t}=e;t.styles.popper.width=t.rects.reference.width+"px"},effect:e=>{var{state:t}=e;return()=>{var e=t.elements.reference;t.elements.popper.style.width=e.offsetWidth+"px"}}},{name:"applyArrowHide",enabled:!0,phase:"write",fn(e){var t,{state:n}=e,{arrow:r}=n.elements;r&&(0!==(null==(t=n.modifiersData.arrow)?void 0:t.centerOffset)?r.setAttribute("data-hide",""):r.removeAttribute("data-hide"))}}]),[x,d,s,i,p,f,h]).concat(m)});t.useEffect((()=>{var e=requestAnimationFrame((()=>{null==k.forceUpdate||k.forceUpdate()}));return()=>{cancelAnimationFrame(e)}}),[]);var S=null!=(n=null==(r=k.state)?void 0:r.placement)?n:o,C=(e=>{var{arrowSize:t,popperArrowStyles:n={},placement:r}=e,o=mu({},n,{width:t,height:t,zIndex:-1}),a=-t/2;return r.startsWith("top")&&(o.bottom=a),r.startsWith("bottom")&&(o.top=a),r.startsWith("left")&&(o.right=a),r.startsWith("right")&&(o.left=a),o})({placement:S,popperArrowStyles:k.styles.arrow,arrowSize:u});return{transformOrigin:yu(S),getReferenceProps:function(e,t){return void 0===e&&(e={}),void 0===t&&(t=null),bu({},e,{ref:(0,a.mergeRefs)(g,t)})},getPopperProps:function(e,t){var n;return void 0===e&&(e={}),void 0===t&&(t=null),bu({},e,k.attributes.popper,{ref:(0,a.mergeRefs)(b,t),style:bu({},e.style,null==(n=k.styles)?void 0:n.popper)})},getArrowWrapperProps:function(e,t){return void 0===e&&(e={}),void 0===t&&(t=null),bu({},e,k.attributes.arrow,{ref:(0,a.mergeRefs)(w,t),style:bu({},e.style,C)})},getArrowProps:function(e,t){return void 0===e&&(e={}),void 0===t&&(t=null),bu({},e,{ref:t,style:bu({boxShadow:vu(S,c)},e.style,{position:"absolute",zIndex:-1,width:"100%",height:"100%",transform:"rotate(45deg)"})})},state:k.state,forceUpdate:k.forceUpdate,update:k.update,placement:S}}(wu({placement:s,fixed:u},e)),[g,y]=(0,t.useState)(-1),b=function(){var[e,n]=(0,t.useState)([]),r=(0,t.useCallback)((e=>{var{element:t}=e,r=Yl(e,["element"]);t&&n((e=>{if(null==e.find((e=>e.element===t))){var n=e.findIndex((e=>!(!e.element||!t)&&Boolean(e.element.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_PRECEDING))),o=Xl({element:t},r);return-1===n?[...e,o]:[...e.slice(0,n),o,...e.slice(n)]}return e}))}),[]),o=(0,t.useCallback)((e=>{e&&n((t=>t.filter((t=>e!==t.element))))}),[]);return(0,t.useMemo)((()=>({descendants:e,register:r,unregister:o})),[e,r,o])}();ls((()=>{c||y(-1)}),[c]),function(e,t){var{shouldFocus:n,visible:r,focusRef:o}=t,i=n&&!r;ls((()=>{if(i&&!function(e){var t=e.current;if(!t)return!1;var n=(0,a.getActiveElement)(t);return!!n&&!(0,a.contains)(t,n)&&!!(0,a.isTabbable)(n)}(e)){var t=(null==o?void 0:o.current)||e.current;t&&(0,a.focus)(t)}}),[i,e,o])}(h,{focusRef:m,visible:c,shouldFocus:!0});var[x,w]=function(e){for(var t=os(e),n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];return r.map((e=>rs(e,t)))}(n,"menu-button","menu-list");return{openAndFocusMenu:(0,t.useCallback)((()=>{f(),h.current&&(0,a.focus)(h.current)}),[f,h]),openAndFocusFirstItem:(0,t.useCallback)((()=>{f(),y(0)}),[f,y]),openAndFocusLastItem:(0,t.useCallback)((()=>{f(),y(b.descendants.length-1)}),[f,y,b.descendants]),onTransitionEnd:()=>{var e,t,n=null==(e=h.current)?void 0:e.contains(document.activeElement);if(c&&!n){var r=null==(t=b.descendants[g])?void 0:t.element;null==r||r.focus({preventScroll:!0})}},domContext:b,popper:v,buttonId:x,menuId:w,forceUpdate:v.forceUpdate,orientation:"vertical",isOpen:c,onToggle:p,onOpen:f,onClose:d,menuRef:h,buttonRef:m,focusedIndex:g,closeOnSelect:r,closeOnBlur:o,autoSelect:i,setFocusedIndex:y,isLazy:l}}function Eu(e,n){void 0===n&&(n=null);var{onMouseEnter:r,onMouseMove:o,onMouseLeave:i,onClick:l,isDisabled:s,isFocusable:u}=e,c=xu(e,["onMouseEnter","onMouseMove","onMouseLeave","onClick","isDisabled","isFocusable"]),f=Su(),{domContext:d,setFocusedIndex:p,focusedIndex:h,closeOnSelect:m,onClose:v,menuRef:g,isOpen:y}=f,b=(0,t.useRef)(null),x="menuitem-"+os(),w=function(e){var{context:t,element:n,index:r,disabled:o,focusable:a}=e,i=Yl(e,["context","element","index","disabled","focusable"]),l=yt(),{register:s,unregister:u,descendants:c}=t;return bt((()=>{if(n||l(),!o||a)return s(Xl({element:n,disabled:o,focusable:a},i)),()=>{n&&u(n)}}),[n,o,a,...Object.values(i)]),null!=r?r:c.findIndex((e=>e.element===n))}({element:b.current,context:d,disabled:s,focusable:u}),k=(0,t.useCallback)((e=>{null==r||r(e),s||p(w)}),[p,w,s]),S=(0,t.useCallback)((e=>{null==o||o(e),document.activeElement!==b.current&&k(e)}),[k]),C=(0,t.useCallback)((e=>{null==i||i(e),s||p(-1)}),[p,s]),E=(0,t.useCallback)((e=>{null==l||l(e),m&&v()}),[v,l,m]),_=w===h,A=s&&!u;return ls((()=>{if(y)if(_&&!A&&b.current)(0,a.focus)(b.current);else if(document.activeElement!==g.current){var e;null==(e=g.current)||e.focus()}}),[_,A,g,y]),wu({},c,function(e){void 0===e&&(e={});var{ref:n,isDisabled:r,isFocusable:o,clickOnEnter:i=!0,clickOnSpace:l=!0,onMouseDown:s,onMouseUp:u,onClick:c,onKeyDown:f,onKeyUp:d,tabIndex:p,onMouseOver:h}=e,m=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,["ref","isDisabled","isFocusable","clickOnEnter","clickOnSpace","onMouseDown","onMouseUp","onClick","onKeyDown","onKeyUp","tabIndex","onMouseOver"]),[v,g]=(0,t.useState)(!0),[y,b]=(0,t.useState)(!1),x=(0,t.useCallback)((e=>{"BUTTON"!==(null==e?void 0:e.tagName)&&g(!1)}),[]),w=v?p:p||0,k=r&&!o,S=(0,t.useCallback)((e=>{if(r)return e.stopPropagation(),void e.preventDefault();e.currentTarget.focus(),null==c||c(e)}),[r,c]),C=(0,t.useCallback)((e=>{if(null==f||f(e),!(r||e.defaultPrevented||e.metaKey)){var t=i&&"Enter"===e.key,n=l&&" "===e.key;if(!v&&n)return e.preventDefault(),void b(!0);!v&&t&&(e.preventDefault(),e.currentTarget.click())}}),[r,v,f,i,l]),E=(0,t.useCallback)((e=>{if(null==d||d(e),!(r||e.defaultPrevented||e.metaKey)){var t=l&&" "===e.key;!v&&t&&(e.preventDefault(),b(!1),e.currentTarget.click())}}),[l,v,r,d]),_=(0,t.useCallback)((e=>{if(!(0,a.isRightClick)(e)){if(r)return e.stopPropagation(),void e.preventDefault();v||b(!0),null==s||s(e)}}),[r,v,s]),A=(0,t.useCallback)((e=>{v||b(!1),null==u||u(e)}),[u,v]),O=(0,t.useCallback)((e=>{r?e.preventDefault():null==h||h(e)}),[r,h]),P=(0,a.mergeRefs)(n,x);return Ql({},m,v?{ref:P,type:"button","aria-disabled":k?void 0:r,disabled:k,onClick:S,onMouseDown:s,onMouseUp:u,onKeyUp:d,onKeyDown:f,onMouseOver:h}:{ref:P,role:"button","data-active":(0,a.dataAttr)(y),"aria-disabled":!!r,tabIndex:k?void 0:w,onClick:S,onMouseDown:_,onMouseUp:A,onKeyUp:E,onKeyDown:C,onMouseOver:O})}({onClick:E,onMouseEnter:k,onMouseMove:S,onMouseLeave:C,ref:(0,a.mergeRefs)(b,n),isDisabled:s,isFocusable:u}),{id:x,role:"menuitem",tabIndex:_?0:-1})}function _u(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}function Au(){return(Au=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var Ou=e=>{var{children:n}=e,r=(0,St.useMultiStyleConfig)("Menu",e),o=Cu((0,Lt.Lr)(e)),a=t.useMemo((()=>o),[o]),{isOpen:i,onClose:l,forceUpdate:s}=a;return t.createElement(ku,{value:a},t.createElement(St.StylesProvider,{value:r},(0,At.Pu)(n,{isOpen:i,onClose:l,forceUpdate:s})))};a.__DEV__&&(Ou.displayName="Menu");var Pu=(0,St.forwardRef)((function(e,n){var r=(0,St.useStyles)();return t.createElement(St.chakra.button,Au({ref:n},e,{__css:Au({display:"inline-flex",appearance:"none",alignItems:"center",outline:0,transition:"all 250ms"},r.button)}))})),Ru=(0,St.forwardRef)((function(e,n){var{as:r}=e,o=function(e,n){void 0===n&&(n=null);var r=Su(),{isOpen:o,onClose:i,autoSelect:l,popper:s,openAndFocusFirstItem:u,openAndFocusLastItem:c,openAndFocusMenu:f}=r,d=(0,t.useCallback)((()=>{o?i():(l?u:f)()}),[l,o,i,u,f]),p=(0,t.useCallback)((e=>{var t=(0,a.normalizeEventKey)(e),n={Enter:u,ArrowDown:u,ArrowUp:c}[t];n&&(e.preventDefault(),e.stopPropagation(),n(e))}),[u,c]),h=wu({},e,{id:r.buttonId,"data-active":(0,a.dataAttr)(r.isOpen),"aria-expanded":r.isOpen,"aria-haspopup":"menu","aria-controls":r.menuId,onClick:(0,At.v0)(e.onClick,d),onKeyDown:(0,At.v0)(e.onKeyDown,p)});return s.getReferenceProps(h,(0,a.mergeRefs)(r.buttonRef,n))}(_u(e,["children","as"]),n),i=r||Pu;return t.createElement(i,Au({},o,{className:(0,a.cx)("chakra-menu__menu-button",e.className)}),t.createElement(St.chakra.span,{__css:{pointerEvents:"none",flex:"1 1 auto"}},e.children))}));a.__DEV__&&(Ru.displayName="MenuButton");var Tu={enter:{visibility:"visible",opacity:1,scale:1,transition:{duration:.2,ease:[.4,0,.2,1]}},exit:{transitionEnd:{visibility:"hidden"},opacity:0,scale:.8,transition:{duration:.1,easings:"easeOut"}}},Mu=(0,St.chakra)(Ul.div),zu=(0,St.forwardRef)((function(e,n){var r,{isOpen:o,onTransitionEnd:i}=Su(),l=function(e,n){void 0===n&&(n=null);var r=Su();if(!r)throw new Error("useMenuContext: context is undefined. Seems you forgot the component within <Menu>");var{focusedIndex:o,setFocusedIndex:i,menuRef:l,isOpen:s,onClose:u,menuId:c,popper:f,domContext:{descendants:d},isLazy:p}=r,h=function(e){void 0===e&&(e={});var{timeout:n=300,preventDefault:r=(()=>!0)}=e,[o,a]=t.useState([]),i=t.useRef(),l=()=>{i.current&&(clearTimeout(i.current),i.current=null)};return t.useEffect((()=>l),[]),function(e){return t=>{if("Backspace"===t.key){var s=[...o];return s.pop(),void a(s)}if(function(e){var{key:t}=e;return 1===t.length||t.length>1&&/[^a-zA-Z0-9]/.test(t)}(t)){var u=o.concat(t.key);r(t)&&(t.preventDefault(),t.stopPropagation()),a(u),e(u.join("")),l(),i.current=setTimeout((()=>{a([]),i.current=null}),n)}}}}({preventDefault:e=>" "!==e.key}),m=(0,t.useCallback)((e=>{var t=(0,a.normalizeEventKey)(e),n={Tab:e=>{e.preventDefault()},Escape:u,ArrowDown:()=>{var e=(0,a.getNextIndex)(o,d.length);i(e)},ArrowUp:()=>{var e=(0,a.getPrevIndex)(o,d.length);i(e)}}[t];if(n)return e.preventDefault(),void n(e);h((e=>{var t=(0,a.getNextItemFromSearch)(d,e,(e=>{var t;return(null==(t=e.element)?void 0:t.textContent)||""}),d[o]);if(t){var n=d.indexOf(t);i(n)}}))(e)}),[d,o,h,u,i]);return wu({},e,{ref:(0,a.mergeRefs)(l,n),children:!p||s?e.children:null,tabIndex:-1,role:"menu",id:c,style:wu({},e.style,{transformOrigin:f.transformOrigin}),"aria-orientation":"vertical",onKeyDown:(0,At.v0)(e.onKeyDown,m)})}(e,n),s=function(e){void 0===e&&(e={});var{popper:t,isOpen:n}=Su();return(0,a.mergeWith)(t.getPopperProps(e),{style:{visibility:n?"visible":"hidden"}})}(),u=(0,St.useStyles)();return t.createElement(St.chakra.div,Au({},s,{__css:{zIndex:null==(r=u.list)?void 0:r.zIndex}}),t.createElement(Mu,Au({},l,{onUpdate:i,className:(0,a.cx)("chakra-menu__menu-list",l.className),variants:Tu,initial:!1,animate:o?"enter":"exit",__css:Au({outline:0},u.list)})))}));a.__DEV__&&(zu.displayName="MenuList");var Lu=(0,St.forwardRef)((function(e,n){var{as:r,type:o}=e,a=_u(e,["as","type"]),i=r?null!=o?o:void 0:"button",l=Au({textDecoration:"none",color:"inherit",userSelect:"none",display:"flex",width:"100%",alignItems:"center",textAlign:"left",flex:"0 0 auto",outline:0},(0,St.useStyles)().item);return t.createElement(St.chakra.button,Au({ref:n,type:i},a,{__css:l}))})),Du=(0,St.forwardRef)((function(e,n){var{icon:r,iconSpacing:o="0.75rem",command:i,children:l}=e,s=Eu(_u(e,["icon","iconSpacing","command","children"]),n),u=r||i?t.createElement(St.chakra.span,{pointerEvents:"none",flex:"1"},l):l;return t.createElement(Lu,Au({},s,{className:(0,a.cx)("chakra-menu__menuitem",s.className)}),r&&t.createElement(Iu,{fontSize:"0.8em",mr:o},r),u,i&&t.createElement(Nu,null,i))}));a.__DEV__&&(Du.displayName="MenuItem");var ju=e=>t.createElement("svg",Au({viewBox:"0 0 14 14",width:"1em",height:"1em"},e),t.createElement("polygon",{fill:"currentColor",points:"5.5 11.9993304 14 3.49933039 12.5 2 5.5 8.99933039 1.5 4.9968652 0 6.49933039"})),Bu=(0,St.forwardRef)((function(e,n){var{icon:r,iconSpacing:o="0.75rem"}=e,i=_u(e,["icon","iconSpacing"]),l=function(e,t){void 0===t&&(t=null);var{onClick:n,isDisabled:r,isFocusable:o,type:a="radio",isChecked:i}=e;return wu({},xu(e,["onClick","isDisabled","isFocusable","type","isChecked"]),Eu({isDisabled:r,isFocusable:o,onClick:n},t),{role:"menuitem"+a,"aria-checked":i})}(i,n);return t.createElement(Lu,Au({},l,{className:(0,a.cx)("chakra-menu__menuitem-option",i.className)}),t.createElement(Iu,{fontSize:"0.8em",mr:o,opacity:e.isChecked?1:0},r||t.createElement(ju,null)),t.createElement(St.chakra.span,{flex:"1"},l.children))}));Bu.id="MenuItemOption",a.__DEV__&&(Bu.displayName="MenuItemOption"),a.__DEV__;var Fu=(0,St.forwardRef)((function(e,n){var{title:r,children:o,className:i}=e,l=_u(e,["title","children","className"]),s=(0,a.cx)("chakra-menu__group__title",i),u=(0,St.useStyles)();return t.createElement(St.chakra.div,{ref:n,className:"chakra-menu__group",role:"group"},r&&t.createElement(St.chakra.p,Au({className:s},l,{__css:u.groupTitle}),r),o)}));a.__DEV__&&(Fu.displayName="MenuGroup");var Nu=(0,St.forwardRef)((function(e,n){var r=(0,St.useStyles)();return t.createElement(St.chakra.span,Au({ref:n},e,{__css:r.command,className:"chakra-menu__command"}))}));a.__DEV__&&(Nu.displayName="MenuCommand");var Iu=e=>{var{className:n,children:r}=e,o=_u(e,["className","children"]),i=t.Children.only(r),l=t.isValidElement(i)?t.cloneElement(i,{focusable:"false","aria-hidden":!0,className:(0,a.cx)("chakra-menu__icon",i.props.className)}):null,s=(0,a.cx)("chakra-menu__icon-wrapper",n);return t.createElement(St.chakra.span,Au({className:s},o,{__css:{flexShrink:0}}),l)};function Vu(){return(Vu=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}a.__DEV__&&(Iu.displayName="MenuIcon"),a.__DEV__;var Uu=(0,We.F4)({"0%":{transform:"rotate(0deg)"},"100%":{transform:"rotate(360deg)"}}),Wu=(0,St.forwardRef)((function(e,n){var r=(0,St.useStyleConfig)("Spinner",e),o=(0,Lt.Lr)(e),{label:i="Loading...",thickness:l="2px",speed:s="0.45s",color:u,emptyColor:c="transparent",className:f}=o,d=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(o,["label","thickness","speed","color","emptyColor","className"]),p=(0,a.cx)("chakra-spinner",f),h=Vu({display:"inline-block",borderColor:"currentColor",borderStyle:"solid",borderRadius:"99999px",borderWidth:l,borderBottomColor:c,borderLeftColor:c,color:u,animation:Uu+" "+s+" linear infinite"},r);return t.createElement(St.chakra.div,Vu({ref:n,__css:h,className:p},d),i&&t.createElement(Rt,null,i))}));function Hu(){return(Hu=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}a.__DEV__&&(Wu.displayName="Spinner");var[qu,$u]=(0,a.createContext)({strict:!1,name:"ButtonGroupContext"}),Gu=(0,St.forwardRef)((function(e,n){var{size:r,colorScheme:o,variant:i,className:l,spacing:s="0.5rem",isAttached:u,isDisabled:c}=e,f=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,["size","colorScheme","variant","className","spacing","isAttached","isDisabled"]),d=(0,a.cx)("chakra-button__group",l),p=t.useMemo((()=>({size:r,colorScheme:o,variant:i,isDisabled:c})),[r,o,i,c]),h={display:"inline-flex"};return h=Hu({},h,u?{"> *:first-of-type:not(:last-of-type)":{borderRightRadius:0},"> *:not(:first-of-type):not(:last-of-type)":{borderRadius:0},"> *:not(:first-of-type):last-of-type":{borderLeftRadius:0}}:{"& > *:not(style) ~ *:not(style)":{marginLeft:s}}),t.createElement(qu,{value:p},t.createElement(St.chakra.div,Hu({ref:n,role:"group",__css:h,className:d},f)))}));function Ku(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}function Qu(){return(Qu=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}a.__DEV__&&(Gu.displayName="ButtonGroup");var Xu=(0,St.forwardRef)((function(e,n){var r,o=$u(),i=(0,St.useStyleConfig)("Button",Qu({},o,e)),l=(0,Lt.Lr)(e),{isDisabled:s=(null==o?void 0:o.isDisabled),isLoading:u,isActive:c,isFullWidth:f,children:d,leftIcon:p,rightIcon:h,loadingText:m,iconSpacing:v="0.5rem",type:g="button",spinner:y,className:b,as:x}=l,w=Ku(l,["isDisabled","isLoading","isActive","isFullWidth","children","leftIcon","rightIcon","loadingText","iconSpacing","type","spinner","className","as"]),k=(0,a.mergeWith)({},null!=(r=null==i?void 0:i._focus)?r:{},{zIndex:1}),S=Qu({display:"inline-flex",appearance:"none",alignItems:"center",justifyContent:"center",transition:"all 250ms",userSelect:"none",position:"relative",whiteSpace:"nowrap",verticalAlign:"middle",outline:"none",width:f?"100%":"auto"},i,!!o&&{_focus:k});return t.createElement(St.chakra.button,Qu({disabled:s||u,ref:n,as:x,type:x?void 0:g,"data-active":(0,a.dataAttr)(c),"data-loading":(0,a.dataAttr)(u),__css:S,className:(0,a.cx)("chakra-button",b)},w),p&&!u&&t.createElement(Yu,{mr:v},p),u&&t.createElement(Zu,{__css:{fontSize:"1em",lineHeight:"normal"},spacing:v,label:m},y),u?m||t.createElement(St.chakra.span,{opacity:0},d):d,h&&!u&&t.createElement(Yu,{ml:v},h))}));a.__DEV__&&(Xu.displayName="Button");var Yu=e=>{var{children:n,className:r}=e,o=Ku(e,["children","className"]),i=t.isValidElement(n)?t.cloneElement(n,{"aria-hidden":!0,focusable:!1}):n,l=(0,a.cx)("chakra-button__icon",r);return t.createElement(St.chakra.span,Qu({},o,{className:l}),i)};a.__DEV__&&(Yu.displayName="ButtonIcon");var Zu=e=>{var{label:n,spacing:r,children:o=t.createElement(Wu,{color:"currentColor",width:"1em",height:"1em"}),className:i,__css:l}=e,s=Ku(e,["label","spacing","children","className","__css"]),u=(0,a.cx)("chakra-button__spinner",i),c=Qu({display:"flex",alignItems:"center",position:n?"relative":"absolute",mr:n?r:0},l);return t.createElement(St.chakra.div,Qu({className:u},s,{__css:c}),o)};function Ju(){return(Ju=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}a.__DEV__&&(Zu.displayName="ButtonSpinner");var ec={path:t.createElement("g",{stroke:"currentColor",strokeWidth:"1.5"},t.createElement("path",{strokeLinecap:"round",fill:"none",d:"M9,9a3,3,0,1,1,4,2.829,1.5,1.5,0,0,0-1,1.415V14.25"}),t.createElement("path",{fill:"currentColor",strokeLinecap:"round",d:"M12,17.25a.375.375,0,1,0,.375.375A.375.375,0,0,0,12,17.25h0"}),t.createElement("circle",{fill:"none",strokeMiterlimit:"10",cx:"12",cy:"12",r:"11.25"})),viewBox:"0 0 24 24"},tc=(0,St.forwardRef)((function(e,n){var{as:r,viewBox:o,color:i="currentColor",focusable:l=!1,children:s,className:u,__css:c}=e,f=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,["as","viewBox","color","focusable","children","className","__css"]),d={ref:n,focusable:l,className:(0,a.cx)("chakra-icon",u),__css:Ju({w:"1em",h:"1em",display:"inline-block",lineHeight:"1em",flexShrink:0,color:i},c)},p=null!=o?o:ec.viewBox;if(r&&"string"!=typeof r)return t.createElement(St.chakra.svg,Ju({as:r},d,f));var h=null!=s?s:ec.path;return t.createElement(St.chakra.svg,Ju({verticalAlign:"middle",viewBox:p},d,f),h)}));function nc(){return(nc=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}a.__DEV__&&(tc.displayName="Icon");var rc=function(e){var{viewBox:n="0 0 24 24",d:r,path:o,displayName:i,defaultProps:l={}}={displayName:"ChevronDownIcon",d:"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"},s=(0,St.forwardRef)(((e,a)=>t.createElement(tc,nc({ref:a,viewBox:n},l,e),null!=o?o:t.createElement("path",{fill:"currentColor",d:r}))));return a.__DEV__&&(s.displayName=i),s}();const oc=function(){return t.createElement(Ou,null,t.createElement(Ru,{as:Xu,rightIcon:t.createElement(rc,null)},"Home"),t.createElement(zu,null,t.createElement(Du,null,"Link1"),t.createElement(Du,null,"Link2")))};var ac=(0,St.chakra)("div",{baseStyle:{display:"flex",alignItems:"center",justifyContent:"center"}});a.__DEV__&&(ac.displayName="Center");const ic=function(){return t.createElement("div",null,t.createElement(Bt,null),t.createElement(ac,{h:"0px"},t.createElement(oc,null)),t.createElement(Ht,null,t.createElement("span",null,"Welcome")))};var lc,sc=(lc={useSystemColorMode:!0},(0,a.mergeWith)({},vt,lc,(function e(t,n){if((0,a.isFunction)(t))return function(){var r=t(...arguments),o=(0,a.isFunction)(n)?n(...arguments):n;return(0,a.mergeWith)({},r,o,e)}})));e.render(t.createElement(t.StrictMode,null,t.createElement(Ct,{theme:sc},t.createElement(ic,null))),document.getElementById("root"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,